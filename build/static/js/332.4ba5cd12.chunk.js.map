{"version":3,"sources":["../node_modules/reactstrap/es/Spinner.js","../node_modules/prismjs/components/prism-jsx.min.js","components/reactstrap/spinners/SpinnerSourceCode.js","components/reactstrap/spinners/SpinnerBorder.js","components/reactstrap/spinners/SpinnerColors.js","components/reactstrap/spinners/SpinnerGrowing.js","components/reactstrap/spinners/SpinnerGrowingColored.js","components/reactstrap/spinners/SpinnerFlex.js","components/reactstrap/spinners/SpinnerFloat.js","components/reactstrap/spinners/SpinnerTextAlignment.js","components/reactstrap/spinners/SpinnerSizes.js","components/reactstrap/spinners/SpinnerButtons.js","components/reactstrap/spinners/Spinners.js"],"names":["_excluded","propTypes","tag","tagPropType","type","PropTypes","string","size","color","className","cssModule","object","children","Spinner","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","role","defaultProps","t","n","util","clone","languages","javascript","e","a","replace","RegExp","source","jsx","extend","pattern","inside","comment","insertBefore","spread","script","alias","rest","s","content","map","join","g","length","o","i","tagName","pop","push","openedBraces","r","splice","Token","hooks","add","language","tokens","Prism","spinnerBorder","spinnerColors","spinnerGrowing","spinnerGrowColors","spinnerFlex","spinnerFloat","spinnerTextAlignment","spinnerSizes","spinnerButton","SpinnerBorder","state","activeTab","toggleTab","tab","setState","Fragment","Card","CardHeader","CardTitle","Nav","tabs","NavItem","NavLink","classnames","active","this","onClick","CardBody","TabContent","TabPane","tabId","Component","SpinnerColors","SpinnerGrowing","SpinnerGrowColors","SpinnerFlex","SpinnerFloat","SpinnerTextAlignment","SpinnerSizes","SpinnerButton","Button","Ripple","Spinners","highlightAll","BreadCrumb","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","md","sm","SpinnerButtons"],"mappings":"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","file":"static/js/332.4ba5cd12.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"type\", \"size\", \"color\", \"children\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  type: PropTypes.string,\n  size: PropTypes.string,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.string\n};\nvar defaultProps = {\n  tag: 'div',\n  type: 'border',\n  children: 'Loading...'\n};\n\nvar Spinner = function Spinner(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      type = props.type,\n      size = props.size,\n      color = props.color,\n      children = props.children,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, size ? \"spinner-\" + type + \"-\" + size : false, \"spinner-\" + type, color ? \"text-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    role: \"status\"\n  }, attributes, {\n    className: classes\n  }), children && /*#__PURE__*/React.createElement(\"span\", {\n    className: mapToCssModules('sr-only', cssModule)\n  }, children));\n};\n\nSpinner.propTypes = propTypes;\nSpinner.defaultProps = defaultProps;\nexport default Spinner;","!function(t){var n=t.util.clone(t.languages.javascript),e=\"(?:\\\\{<S>*\\\\.{3}(?:[^{}]|<BRACES>)*\\\\})\";function a(t,n){return t=t.replace(/<S>/g,(function(){return\"(?:\\\\s|//.*(?!.)|/\\\\*(?:[^*]|\\\\*(?!/))\\\\*/)\"})).replace(/<BRACES>/g,(function(){return\"(?:\\\\{(?:\\\\{(?:\\\\{[^{}]*\\\\}|[^{}])*\\\\}|[^{}])*\\\\})\"})).replace(/<SPREAD>/g,(function(){return e})),RegExp(t,n)}e=a(e).source,t.languages.jsx=t.languages.extend(\"markup\",n),t.languages.jsx.tag.pattern=a(\"</?(?:[\\\\w.:-]+(?:<S>+(?:[\\\\w.:$-]+(?:=(?:\\\"(?:\\\\\\\\[^]|[^\\\\\\\\\\\"])*\\\"|'(?:\\\\\\\\[^]|[^\\\\\\\\'])*'|[^\\\\s{'\\\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>\"),t.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/,t.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/,t.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,t.languages.jsx.tag.inside.comment=n.comment,t.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:a(\"<SPREAD>\"),inside:t.languages.jsx}},t.languages.jsx.tag),t.languages.insertBefore(\"inside\",\"special-attr\",{script:{pattern:a(\"=<BRACES>\"),alias:\"language-javascript\",inside:{\"script-punctuation\":{pattern:/^=(?=\\{)/,alias:\"punctuation\"},rest:t.languages.jsx}}},t.languages.jsx.tag);var s=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(s).join(\"\"):\"\"},g=function(n){for(var e=[],a=0;a<n.length;a++){var o=n[a],i=!1;if(\"string\"!=typeof o&&(\"tag\"===o.type&&o.content[0]&&\"tag\"===o.content[0].type?\"</\"===o.content[0].content[0].content?e.length>0&&e[e.length-1].tagName===s(o.content[0].content[1])&&e.pop():\"/>\"===o.content[o.content.length-1].content||e.push({tagName:s(o.content[0].content[1]),openedBraces:0}):e.length>0&&\"punctuation\"===o.type&&\"{\"===o.content?e[e.length-1].openedBraces++:e.length>0&&e[e.length-1].openedBraces>0&&\"punctuation\"===o.type&&\"}\"===o.content?e[e.length-1].openedBraces--:i=!0),(i||\"string\"==typeof o)&&e.length>0&&0===e[e.length-1].openedBraces){var r=s(o);a<n.length-1&&(\"string\"==typeof n[a+1]||\"plain-text\"===n[a+1].type)&&(r+=s(n[a+1]),n.splice(a+1,1)),a>0&&(\"string\"==typeof n[a-1]||\"plain-text\"===n[a-1].type)&&(r=s(n[a-1])+r,n.splice(a-1,1),a--),n[a]=new t.Token(\"plain-text\",r,null,r)}o.content&&\"string\"!=typeof o.content&&g(o.content)}};t.hooks.add(\"after-tokenize\",(function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||g(t.tokens)}))}(Prism);","import React from \"react\"\r\n\r\nexport const spinnerBorder = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\nimport React from \"react\"\r\nimport {Spinner} from \"reactstrap\"\r\n\r\nclass SpinnerBorder extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <Spinner color=\"primary\" />\r\n    )\r\n  }\r\n}\r\nexport default SpinnerBorder\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerColors = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\nimport React from \"react\"\r\nimport {Spinner} from \"reactstrap\"\r\n\r\nclass SpinnerColors extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <Spinner color=\"primary\" />\r\n      <Spinner color=\"success\" />\r\n      <Spinner color=\"info\" />\r\n      <Spinner color=\"danger\" />\r\n      <Spinner color=\"warning\" />\r\n      <Spinner color=\"light\" />\r\n      <Spinner color=\"dark\" />\r\n    )\r\n  }\r\n}\r\nexport default SpinnerColors\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerGrowing = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\nimport React from \"react\"\r\nimport {Spinner} from \"reactstrap\"\r\n\r\nclass SpinnerGrowing extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <Spinner type=\"grow\" color=\"primary\" />\r\n    )\r\n  }\r\n}\r\nexport default SpinnerGrowing\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerGrowColors = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\n  import React from \"react\"\r\n  import {Spinner} from \"reactstrap\"\r\n\r\n  class SpinnerColors extends React.Component {\r\n\r\n    render() {\r\n      return(\r\n        <Spinner type=\"grow\" color=\"primary\" />\r\n        <Spinner type=\"grow\" color=\"success\" />\r\n        <Spinner type=\"grow\" color=\"info\" />\r\n        <Spinner type=\"grow\" color=\"danger\" />\r\n        <Spinner type=\"grow\" color=\"warning\" />\r\n        <Spinner type=\"grow\" color=\"light\" />\r\n        <Spinner type=\"grow\" color=\"dark\" />\r\n      )\r\n    }\r\n  }\r\n  export default SpinnerColors\r\n        `}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerFlex = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\nimport React from \"react\"\r\nimport {Spinner} from \"reactstrap\"\r\n\r\nclass SpinnerFlex extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"d-flex justify-content-between align-items-center\">\r\n        <strong>Loading...</strong>\r\n        <Spinner color=\"primary\" />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerFlex\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerFloat = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\nimport React from \"react\"\r\nimport {Spinner} from \"reactstrap\"\r\n\r\nclass SpinnerFloat extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n        <Spinner color=\"primary\" className=\"float-right\" />\r\n    )\r\n  }\r\n}\r\nexport default SpinnerFloat\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerTextAlignment = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\nimport React from \"react\"\r\nimport {Spinner} from \"reactstrap\"\r\n\r\nclass SpinnerTextAlignment extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"text-center\">\r\n        <Spinner color=\"primary\" />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerTextAlignment\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerSizes = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\nimport React from \"react\"\r\nimport {Spinner} from \"reactstrap\"\r\n\r\nclass SpinnerSizes extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <Spinner color=\"primary\" size=\"sm\" />\r\n      <Spinner type=\"grow\" color=\"primary\" size=\"sm\" />\r\n\r\n      <Spinner color=\"primary\" />\r\n      <Spinner type=\"grow\" color=\"primary\" />\r\n\r\n      <Spinner color=\"primary\" size=\"lg\" />\r\n      <Spinner type=\"grow\" color=\"primary\" size=\"lg\" />\r\n    )\r\n  }\r\n}\r\nexport default SpinnerSizes\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const spinnerButton = (\r\n  <pre>\r\n    <code className=\"language-jsx\">\r\n      {`\r\nimport React from \"react\"\r\nimport {Spinner} from \"reactstrap\"\r\n\r\nclass SpinnerButton extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n        <Button color=\"primary\" className=\"mr-1 mb-1\">\r\n          <Spinner color=\"white\" size=\"sm\" />\r\n        </Button>\r\n\r\n        <Button color=\"primary\" className=\"mr-1 mb-1\">\r\n          <Spinner color=\"white\" size=\"sm\" />\r\n          <span className=\"ml-50\">Loading...</span>\r\n        </Button>\r\n\r\n        <Button color=\"primary\" className=\"mr-1 mb-1\">\r\n          <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\r\n        </Button>\r\n\r\n        <Button color=\"primary\" className=\"mb-1\">\r\n          <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\r\n          <span className=\"ml-50\">Loading...</span>\r\n        </Button>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerButton\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n","import React from \"react\"\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerBorder } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerBorder extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Border Spinner</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <p>\r\n              Use <code>Spinner</code> tag to create a bordered spinner.\r\n            </p>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Spinner color=\"primary\" />\r\n              </TabPane>\r\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerBorder}</TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerBorder\r\n","import React from \"react\"\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerColors } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerColors extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Colored Spinners</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <p>\r\n              Use <code>color</code> attribute to create a colored spinner.\r\n            </p>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Spinner className=\"mr-50\" color=\"primary\" />\r\n                <Spinner className=\"mr-50\" color=\"success\" />\r\n                <Spinner className=\"mr-50\" color=\"info\" />\r\n                <Spinner className=\"mr-50\" color=\"danger\" />\r\n                <Spinner className=\"mr-50\" color=\"warning\" />\r\n                <Spinner className=\"mr-50\" color=\"light\" />\r\n                <Spinner className=\"mr-50\" color=\"dark\" />\r\n              </TabPane>\r\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerColors}</TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerColors\r\n","import React from \"react\"\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerGrowing } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerGrowing extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Growing Spinner</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <p>\r\n              Use <code>type=\"grow\"</code> with spinner tag to create a growing\r\n              spinner.\r\n            </p>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Spinner type=\"grow\" color=\"primary\" />\r\n              </TabPane>\r\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerGrowing}</TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerGrowing\r\n","import React from \"react\"\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerGrowColors } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerGrowColors extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Colored Growing Spinners</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <p>\r\n              Use <code>color</code> and <code>type</code> attribute to create a\r\n              colored growing spinner.\r\n            </p>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"primary\" />\r\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"success\" />\r\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"info\" />\r\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"danger\" />\r\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"warning\" />\r\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"light\" />\r\n                <Spinner type=\"grow\" className=\"mr-50\" color=\"dark\" />\r\n              </TabPane>\r\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerGrowColors}</TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerGrowColors\r\n","import React from \"react\"\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerFlex } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerFlex extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Flex</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <p>\r\n              Use Flexbox utilities to place spinners.Use <code>.d-flex</code>{\" \"}\r\n              and <code>.justify-content-[side]</code>.\r\n            </p>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <div className=\"d-flex justify-content-between align-items-center\">\r\n                  <strong>Loading...</strong>\r\n                  <Spinner color=\"primary\" />\r\n                </div>\r\n              </TabPane>\r\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerFlex}</TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerFlex\r\n","import React from \"react\"\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerFloat } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerFloat extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Float</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <p>\r\n              Use <code>.float-[side]</code> with spinner tag to change\r\n              spinner's position.\r\n            </p>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Spinner color=\"primary\" className=\"float-right\" />\r\n              </TabPane>\r\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerFloat}</TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerFloat\r\n","import React from \"react\"\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerTextAlignment } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerTextAlignment extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Text Alignment</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <p>\r\n              You can also use <code>.text-[side]</code> as a wrapper to spinner\r\n              tag to change spinner's position.\r\n            </p>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <div className=\"text-center\">\r\n                  <Spinner color=\"primary\" />\r\n                </div>\r\n              </TabPane>\r\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerTextAlignment}</TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerTextAlignment\r\n","import React from \"react\"\r\nimport {\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerSizes } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerSizes extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Sizes</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <p>\r\n              Use attribute <code>size=\"sm/lg\"</code> for Small or Large spinner\r\n              .\r\n            </p>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Spinner color=\"primary\" size=\"sm\" />\r\n                <Spinner\r\n                  type=\"grow\"\r\n                  color=\"primary\"\r\n                  size=\"sm\"\r\n                  className=\"mr-2\"\r\n                />\r\n\r\n                <Spinner color=\"primary\" />\r\n                <Spinner type=\"grow\" color=\"primary\" className=\"mr-2\" />\r\n\r\n                <Spinner color=\"primary\" size=\"lg\" />\r\n                <Spinner type=\"grow\" color=\"primary\" size=\"lg\" />\r\n              </TabPane>\r\n               <TabPane className=\"component-code\" tabId=\"2\">{spinnerSizes}</TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerSizes\r\n","import React from \"react\"\r\nimport {\r\n  Button,\r\n  Spinner,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardTitle,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from \"reactstrap\"\r\nimport classnames from \"classnames\"\r\nimport { Eye, Code } from \"react-feather\"\r\nimport { spinnerButton } from \"./SpinnerSourceCode\"\r\n\r\nclass SpinnerButton extends React.Component {\r\n  state = {\r\n    activeTab: \"1\"\r\n  }\r\n\r\n  toggleTab = tab => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Buttons</CardTitle>\r\n            <div className=\"views\">\r\n              <Nav tabs>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"1\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"1\")\r\n                    }}\r\n                  >\r\n                    <Eye size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n                <NavItem>\r\n                  <NavLink\r\n                    className={classnames({\r\n                      active: this.state.activeTab === \"2\"\r\n                    })}\r\n                    onClick={() => {\r\n                      this.toggleTab(\"2\")\r\n                    }}\r\n                  >\r\n                    <Code size={15} />\r\n                  </NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <div className=\"d-inline-block mr-1 mb-1\">\r\n                  <Button.Ripple color=\"primary\">\r\n                    <Spinner color=\"white\" size=\"sm\" />\r\n                  </Button.Ripple>\r\n                </div>\r\n\r\n                <div className=\"d-inline-block mr-1 mb-1\">\r\n                  <Button.Ripple color=\"primary\">\r\n                    <Spinner color=\"white\" size=\"sm\" />\r\n                    <span className=\"ml-50\">Loading...</span>\r\n                  </Button.Ripple>\r\n                </div>\r\n\r\n                <div className=\"d-inline-block mr-1 mb-1\">\r\n                  <Button.Ripple color=\"primary\">\r\n                    <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\r\n                  </Button.Ripple>\r\n                </div>\r\n\r\n                <div className=\"d-inline-block mr-1 mb-1\">\r\n                  <Button.Ripple color=\"primary\">\r\n                    <Spinner color=\"white\" size=\"sm\" type=\"grow\" />\r\n                    <span className=\"ml-50\">Loading...</span>\r\n                  </Button.Ripple>\r\n                </div>\r\n              </TabPane>\r\n              <TabPane className=\"component-code\" tabId=\"2\">\r\n                {spinnerButton}\r\n              </TabPane>\r\n            </TabContent>\r\n          </CardBody>\r\n        </Card>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default SpinnerButton\r\n","import React from \"react\"\r\nimport { Row, Col } from \"reactstrap\"\r\nimport BreadCrumbs from \"../../@vuexy/breadCrumbs/BreadCrumb\"\r\nimport SpinnerBorder from \"./SpinnerBorder\"\r\nimport SpinnerColors from \"./SpinnerColors\"\r\nimport SpinnerGrow from \"./SpinnerGrowing\"\r\nimport SpinnerGrowColors from \"./SpinnerGrowingColored\"\r\nimport SpinnerFlex from \"./SpinnerFlex\"\r\nimport SpinnerFloat from \"./SpinnerFloat\"\r\nimport SpinnerTextAlignment from \"./SpinnerTextAlignment\"\r\nimport SpinnerSizes from \"./SpinnerSizes\"\r\nimport SpinnerButtons from \"./SpinnerButtons\"\r\nimport Prism from \"prismjs\"\r\nimport \"prismjs/components/prism-jsx.min\"\r\nclass Spinners extends React.Component {\r\n  componentDidMount() {\r\n    Prism.highlightAll()\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <BreadCrumbs\r\n          breadCrumbTitle=\"Spinners\"\r\n          breadCrumbParent=\"Components\"\r\n          breadCrumbActive=\"Spinners\"\r\n        />\r\n        <Row>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerBorder />\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerColors />\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerGrow />\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerGrowColors />\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerFlex />\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerFloat />\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerTextAlignment />\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerSizes />\r\n          </Col>\r\n          <Col md=\"6\" sm=\"12\">\r\n            <SpinnerButtons />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\nexport default Spinners\r\n"],"sourceRoot":""}