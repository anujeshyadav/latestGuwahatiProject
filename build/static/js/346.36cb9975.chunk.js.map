{"version":3,"sources":["../node_modules/reactstrap/es/Alert.js","views/apps/freshlist/customer/HRM/RecPLace/practskillform.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","propTypes","children","PropTypes","node","className","string","closeClassName","closeAriaLabel","cssModule","color","fade","bool","isOpen","toggle","func","tag","tagPropType","transition","shape","Fade","innerRef","oneOfType","defaultProps","unmountOnExit","Alert","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","closeClasses","alertTransition","baseClass","timeout","React","createElement","_extends","in","role","type","onClick","MockTestForm","useState","answerType","setAnswerType","question","option","data","setData","history","useHistory","successAlert","setSuccessAlert","errorAlert","setErrorAlert","handleSubmit","e","preventDefault","validateForm","_PostSave","Hrm_SkillGroup","resetForm","console","error","values","every","value","trim","desc","handleInputChange","name","onSubmit","form","md","for","id","placeholder","onChange","row","check","inline","disabled","FormGroup"],"mappings":"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","file":"static/js/346.36cb9975.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _excluded = [\"className\", \"closeClassName\", \"closeAriaLabel\", \"cssModule\", \"tag\", \"color\", \"isOpen\", \"toggle\", \"children\", \"transition\", \"fade\", \"innerRef\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nimport Fade from './Fade';\nvar propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  closeClassName: PropTypes.string,\n  closeAriaLabel: PropTypes.string,\n  cssModule: PropTypes.object,\n  color: PropTypes.string,\n  fade: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  toggle: PropTypes.func,\n  tag: tagPropType,\n  transition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.func])\n};\nvar defaultProps = {\n  color: 'success',\n  isOpen: true,\n  tag: 'div',\n  closeAriaLabel: 'Close',\n  fade: true,\n  transition: _objectSpread(_objectSpread({}, Fade.defaultProps), {}, {\n    unmountOnExit: true\n  })\n};\n\nfunction Alert(props) {\n  var className = props.className,\n      closeClassName = props.closeClassName,\n      closeAriaLabel = props.closeAriaLabel,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      color = props.color,\n      isOpen = props.isOpen,\n      toggle = props.toggle,\n      children = props.children,\n      transition = props.transition,\n      fade = props.fade,\n      innerRef = props.innerRef,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, 'alert', \"alert-\" + color, {\n    'alert-dismissible': toggle\n  }), cssModule);\n  var closeClasses = mapToCssModules(classNames('close', closeClassName), cssModule);\n\n  var alertTransition = _objectSpread(_objectSpread(_objectSpread({}, Fade.defaultProps), transition), {}, {\n    baseClass: fade ? transition.baseClass : '',\n    timeout: fade ? transition.timeout : 0\n  });\n\n  return /*#__PURE__*/React.createElement(Fade, _extends({}, attributes, alertTransition, {\n    tag: Tag,\n    className: classes,\n    in: isOpen,\n    role: \"alert\",\n    innerRef: innerRef\n  }), toggle ? /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: closeClasses,\n    \"aria-label\": closeAriaLabel,\n    onClick: toggle\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, \"\\xD7\")) : null, children);\n}\n\nAlert.propTypes = propTypes;\nAlert.defaultProps = defaultProps;\nexport default Alert;","// import React, { useState } from 'react';\r\n// import { Card, CardBody, Form, FormGroup, Label, Input, Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\n// const MockTestForm = () => {\r\n//   const [formData, setFormData] = useState({\r\n//     question: '',\r\n//     isRequired: '',\r\n//     descriptiveAnswer: '',\r\n//   });\r\n\r\n//   const [modal, setModal] = useState(false);\r\n\r\n//   const toggleModal = () => setModal(!modal);\r\n\r\n//   const handleInputChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData({ ...formData, [name]: value });\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     // Handle form submission logic here\r\n//     console.log('Form submitted:', formData);\r\n//     // You can add additional logic or API calls here\r\n//     // Close the modal after submission\r\n//     toggleModal();\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <Button color=\"primary\" onClick={toggleModal}>\r\n//         Open Form\r\n//       </Button>\r\n//       <Modal isOpen={modal} toggle={toggleModal}>\r\n//         <ModalHeader toggle={toggleModal}>Create New Custom Question</ModalHeader>\r\n//         <ModalBody>\r\n//           <Form onSubmit={handleSubmit}>\r\n//             <FormGroup>\r\n//               <Label for=\"question\">Question</Label>\r\n//               <Input\r\n//                 type=\"textarea\"\r\n//                 name=\"question\"\r\n//                 id=\"question\"\r\n//                 value={formData.question}\r\n//                 onChange={handleInputChange}\r\n//                 placeholder=\"Enter question\"\r\n//               />\r\n//             </FormGroup>\r\n//             <FormGroup>\r\n//               <Label for=\"isRequired\">Is Required</Label>\r\n//               <Input\r\n//                 type=\"select\"\r\n//                 name=\"isRequired\"\r\n//                 id=\"isRequired\"\r\n//                 value={formData.isRequired}\r\n//                 onChange={handleInputChange}\r\n//               >\r\n//                 <option value=\"No\">No</option>\r\n//                 <option value=\"Yes\">Yes</option>\r\n//                 <option value=\"Descriptive\">Descriptive</option>\r\n//               </Input>\r\n//             </FormGroup>\r\n//             {formData.isRequired === 'Descriptive' && (\r\n//               <FormGroup>\r\n//                 <Label for=\"descriptiveAnswer\">Descriptive Answer</Label>\r\n//                 <Input\r\n//                   type=\"textarea\"\r\n//                   name=\"descriptiveAnswer\"\r\n//                   id=\"descriptiveAnswer\"\r\n//                   value={formData.descriptiveAnswer}\r\n//                   onChange={handleInputChange}\r\n//                   placeholder=\"Enter descriptive answer\"\r\n//                 />\r\n//               </FormGroup>\r\n//             )}\r\n//             <Button color=\"primary\" type=\"submit\">\r\n//               Submit\r\n//             </Button>\r\n//           </Form>\r\n//         </ModalBody>\r\n//         <ModalFooter>\r\n//           <Button color=\"secondary\" onClick={toggleModal}>\r\n//             Cancel\r\n//           </Button>\r\n//         </ModalFooter>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default MockTestForm;\r\n\r\nimport React, { useState } from 'react';\r\nimport { Row, Col, FormGroup, Label, Input, Button, Form, CardBody, Card, CardHeader, Alert } from 'reactstrap';\r\nimport { Hrm_SkillGroup } from '../../../../../../ApiEndPoint/Api';\r\nimport { _PostSave } from '../../../../../../ApiEndPoint/ApiCalling';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst MockTestForm = () => {\r\n  const [answerType, setAnswerType] = useState('');\r\n  const [data, setData] = useState({\r\n    question: '',\r\n    option: '',\r\n  });\r\n  // parameter's : question,option ,rightAnswer,desc\r\n  const history = useHistory();\r\n  const [successAlert, setSuccessAlert] = useState(false);\r\n  const [errorAlert, setErrorAlert] = useState(false);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (validateForm()) {\r\n      try {\r\n        await _PostSave(Hrm_SkillGroup, data);\r\n        setSuccessAlert(true);\r\n        resetForm();\r\n        history.push('/app/ajgroup/HRM/practiceList');\r\n      } catch (error) {\r\n\r\n        console.error(error);\r\n        setErrorAlert(true);\r\n      }\r\n    } else {\r\n      setErrorAlert(true);\r\n    }\r\n  };\r\n  const validateForm = () => {\r\n    return Object.values(data).every((value) => value.trim() !== '');\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setData({\r\n      question: '',\r\n      option: '',\r\n      desc: '',\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData({ ...data, [name]: value });\r\n\r\n    if (name === 'option') {\r\n      setAnswerType(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Card>\r\n        <CardHeader>\r\n          <h2> Skills Question Form</h2>\r\n          {successAlert && <Alert color=\"success\">Form submitted successfully!</Alert>}\r\n          {errorAlert && <Alert color=\"danger\">Please fill all fields before submitting the form.</Alert>}\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row form>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"exampleEmail\">Input Type Question</Label>\r\n                <Input type=\"text\" name=\"question\" id=\"question\" placeholder=\"Enter your question\" value={data?.question} onChange={handleInputChange} />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"exampleSelect\">Answer Type</Label>\r\n                <Input type=\"select\" name=\"option\" id=\"option\" value={data?.option} onChange={handleInputChange}>\r\n                  <option value=\"\">Select an option</option>\r\n                  <option value=\"yes\">Yes</option>\r\n                  <option value=\"no\">No</option>\r\n                  <option value=\"description\">Description</option>\r\n                </Input>\r\n              </FormGroup>\r\n              {answerType === \"description\" && (\r\n                <FormGroup>\r\n                  <Label for=\"exampleTextarea\">Description</Label>\r\n                  <Input type=\"textarea\" name=\"desc\" id=\"desc\" value={data?.desc} onChange={handleInputChange} />\r\n                </FormGroup>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n          <Button color=\"primary\">Submit</Button>\r\n        </CardBody>\r\n      </Card>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default MockTestForm;\r\n\r\n\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}