{"version":3,"sources":["views/apps/freshlist/accounts/CreateSalesTeam.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["CreateSalesTeam","useState","CreatAccountView","setCreatAccountView","Countries","setCountry","States","setState","Cities","setCities","formData","setFormData","index","setindex","error","setError","Context","useContext","UserContext","handleInputChange","e","type","i","target","name","value","checked","test","files","length","useEffect","console","log","CreateSalespersonXMlView","then","res","data","jsonData","xmlJs","xml2json","compact","spaces","JSON","parse","Createsalesman","input","catch","err","Card","Row","className","Col","render","history","Button","style","cursor","color","onClick","push","CardBody","Form","onSubmit","preventDefault","formdata","FormData","map","ele","_attributes","append","_text","val","forEach","key","swal","Create_Sales_personsave","status","window","location","reload","response","moment","tz","format","phoneinput","lg","md","sm","FormGroup","Label","label","inputClass","country","onKeyDown","includes","countryCodeEditable","onChange","phone","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","Input","placeholder","dateFormat","UserInformatio","timeZone","number","onWheel","multiple","allimages","Array","from","handleFileChange","marginRight","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/387.9a2fc2ef.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n  CreateCustomersave,\r\n  CreateCustomerxmlView,\r\n  CreateMySalesTeam,\r\n  CreateSalespersonXMlView,\r\n  Create_Sales_personsave,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport createSalesman from \"../../../../xmlfiles/CreateSalesman\";\r\n\r\nconst CreateSalesTeam = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n\r\n  const handleFileChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    let allimages = Array.from(e.target.files);\r\n    setindex(i);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: allimages,\r\n    });\r\n  };\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        }\r\n        //  else {\r\n        //   setError(\r\n        //     \"Please enter a valid number with a maximum length of 10 digits\"\r\n        //   );\r\n        // }\r\n      } else if (type == \"file\") {\r\n        // debugger;\r\n        if (e.target.files) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: e.target.files[0],\r\n          });\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    CreateSalespersonXMlView()\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        const jsonData = xmlJs.xml2json(res?.data, {\r\n          compact: true,\r\n          spaces: 2,\r\n        });\r\n        console.log(JSON.parse(jsonData)?.Createsalesman);\r\n        setCreatAccountView(JSON.parse(jsonData)?.Createsalesman?.input);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    // const jsonData = xmlJs.xml2json(response, { compact: true, spaces: 2 });\r\n    // console.log(JSON.parse(jsonData)?.Createsalesman);\r\n    // setCreatAccountView(JSON.parse(jsonData)?.Createsalesman?.input);\r\n\r\n    // setdropdownValue(\r\n    //   JSON.parse(jsonData)?.Createsalesman?.MyDropDown?.dropdown\r\n    // );\r\n    // CreateMySalesTeam()\r\n    //   .then((res) => {\r\n    //     console.log(res);\r\n    //     debugger;\r\n    //     const jsonData = xmlJs.xml2json(res, { compact: true, spaces: 2 });\r\n    //     console.log(JSON.parse(jsonData)?.Createsalesmanager);\r\n    //     setCreatAccountView(JSON.parse(jsonData)?.Createsalesmanager?.input);\r\n\r\n    //     setdropdownValue(\r\n    //       JSON.parse(jsonData)?.CreateCustomer?.MyDropDown?.dropdown\r\n    //     );\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //     swal(\"Something Went Wrong\");\r\n    //   });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    // console.log(CreatAccountView);\r\n    // console.log(dropdownValue);\r\n    let formdata = new FormData();\r\n    CreatAccountView?.map((ele, i) => {\r\n      if (ele?.type?._attributes?.type == \"text\") {\r\n        formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n      } else if (ele?.type?._attributes?.type == \"file\") {\r\n        if (ele?.name?._text == \"Shopphoto\") {\r\n          formData[ele?.name?._text]?.map((val, index) => {\r\n            formdata.append(\"file\", formData[ele?.name?._text][index]);\r\n          });\r\n        }\r\n        if (ele?.name?._text == \"photo\") {\r\n          formData[ele?.name?._text]?.map((val, index) => {\r\n            formdata.append(\"files\", formData[ele?.name?._text][index]);\r\n          });\r\n        }\r\n      } else {\r\n        formdata.append(`status`, formData[\"status\"]);\r\n      }\r\n    });\r\n    // formdata.append(\r\n    //   `${dropdownValue?.name?._text}`,\r\n    //   formData[dropdownValue?.name?._text]\r\n    // );\r\n    formdata.forEach((value, key) => {\r\n      console.log(key, value);\r\n    });\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      Create_Sales_personsave(formdata)\r\n        // CreateCustomersave(formdata)\r\n        .then((res) => {\r\n          console.log(res);\r\n          // setFormData({});\r\n          if (res.status) {\r\n            window.location.reload();\r\n            swal(\"Sales Person Created Successfully\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create Sales Man</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/CreateSalesMan\")\r\n                      }\r\n                    >\r\n                      {\" \"}\r\n                      Back\r\n                      {/* <FaPlus size={15} /> Create User */}\r\n                    </Button>\r\n                  )}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                {/* {dropdownValue && (\r\n                  <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                    <FormGroup>\r\n                      <Label className=\"mb-1\">\r\n                        {dropdownValue && dropdownValue?.label?._text}\r\n                      </Label>\r\n                      <CustomInput\r\n                        required\r\n                        type=\"select\"\r\n                        name={dropdownValue && dropdownValue?.name?._text}\r\n                        value={formData[dropdownValue?.name?._text]}\r\n                        onChange={handleInputChange}\r\n                      >\r\n                        <option value=\"\">--Select--</option>\r\n                        {dropdownValue?.option?.map((option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}\r\n                          >\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        ))}\r\n                      </CustomInput>\r\n                    </FormGroup>\r\n                  </Col>\r\n                )} */}\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.map((ele, i) => {\r\n                    {\r\n                      /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                    }\r\n                    // console.log(Countries);\r\n                    // console.log(States);\r\n                    const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                      .tz(\"America/New_York\")\r\n                      .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"in\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        console.log(ele);\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.label?._text}\r\n                              </Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <>\r\n                            {ele?.type?._attributes?.type == \"date\" ? (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      dateFormat={\r\n                                        Context?.UserInformatio?.dateFormat\r\n                                      }\r\n                                      value={\r\n                                        moment(formData[ele?.name?._text])\r\n                                          .tz(Context?.UserInformatio?.timeZone)\r\n                                          .format(\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          )\r\n                                        // formData[ele?.name?._text]\r\n                                      }\r\n                                      // value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) =>\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        )\r\n                                      }\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            )}\r\n                          </>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {!!ele?.number ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n\r\n                                  <Input\r\n                                    onWheel={(e) => {\r\n                                      e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                    }}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                {ele?.type?._attributes?.type &&\r\n                                ele?.type?._attributes?.type == \"file\" ? (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      multiple\r\n                                      className=\"form-control\"\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      //   value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleFileChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <Label className=\"mb-1\">\r\n                                      {ele?.label?._text}\r\n                                    </Label>\r\n\r\n                                    <Input\r\n                                      className=\"form-control\"\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      type={ele?.type?._attributes?.type}\r\n                                      placeholder={ele?.placeholder?._text}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(e) => {\r\n                                        // const value = e.target.value;\r\n                                        // // Use regular expression to allow only numbers\r\n                                        // const numericValue = value.replace(\r\n                                        //   /\\D/g,\r\n                                        //   \"\"\r\n                                        // );\r\n                                        handleInputChange(\r\n                                          e,\r\n                                          ele?.type?._attributes?.type,\r\n                                          i\r\n                                        );\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </>\r\n                                )}\r\n\r\n                                {/* <Label className=\"mb-1\">\r\n                                  {ele?.label?._text}\r\n                                </Label>\r\n\r\n                                <Input\r\n                                  className=\"form-control\"\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    // const value = e.target.value;\r\n                                    // // Use regular expression to allow only numbers\r\n                                    // const numericValue = value.replace(\r\n                                    //   /\\D/g,\r\n                                    //   \"\"\r\n                                    // );\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )} */}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              <hr />\r\n              {/* <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row> */}\r\n              <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                <Label className=\"mb-0\">Status</Label>\r\n                <div>\r\n                  <input\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Active\"\r\n                    className=\"form-label-group\"\r\n                    onChange={(e) => {\r\n                      setFormData({\r\n                        ...formData,\r\n                        [\"status\"]: \"Active\",\r\n                      });\r\n                    }}\r\n                  />\r\n                  <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                  <input\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Deactive\"\r\n                    onChange={(e) => {\r\n                      setFormData({\r\n                        ...formData,\r\n                        [\"status\"]: \"Deactive\",\r\n                      });\r\n                    }}\r\n                  />\r\n                  <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                </div>\r\n              </Col>\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateSalesTeam;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}