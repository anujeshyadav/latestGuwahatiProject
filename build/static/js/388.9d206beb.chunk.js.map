{"version":3,"sources":["views/apps/freshlist/accounts/CreateTransporter.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","CreateCustomer","useState","CreatAccountView","setCreatAccountView","RoleList","setRoleList","BulkUpload","setBulkUpload","Countries","setCountry","BulkImport","setBulkImport","States","setState","Cities","setCities","formData","setFormData","dropdownValue","setdropdownValue","transporterType","settransporterType","index","setindex","error","setError","bmName","bAddress","bContactNumber","bemail","BGstNumber","formValues","setFormValues","Context","useContext","UserContext","history","useHistory","Params","useParams","handleChange","e","newFormValues","target","name","value","handleInputChange","type","checked","test","files","length","useEffect","navigator","geolocation","getCurrentPosition","position","Date","timestamp","toLocaleString","Geotagging","coords","latitude","longitude","swal","timeout","enableHighAccuracy","userdata","JSON","parse","localStorage","getItem","Get_RoleList","_id","database","then","res","ShowList","Role","filter","item","roleName","toLowerCase","includes","catch","err","console","log","id","_Get","View_TransporterByID","transporter","Transporter","Duedate","split","Country","countryselected","getAllCountries","ele","State","stateselected","getStatesOfCountry","isoCode","City","_GetList","Create_transporter_xmlView","jsonData","xmlJs","xml2json","data","compact","spaces","input","MyDropDown","submitHandler","preventDefault","undefined","formdata","FormData","append","_BulkUpload","Bulk_Upload_Customer","message","dropdown","_text","map","_attributes","stringify","val","status","rolename","forEach","key","Createtransportersave","goBack","response","_Put","Update_TransporterByID","onSelect1","selectedList","selectedItem","onRemove1","className","lg","md","color","onClick","render","style","cursor","push","onSubmit","sm","placeholder","onChange","Ripple","required","selected","options","selectedIndex","getAttribute","data-name","label","option","Registration_Type","moment","tz","format","phoneinput","inputClass","country","onKeyDown","countryCodeEditable","phone","library","getOptionLabel","getOptionValue","isObject","getCitiesOfState","countryCode","selectedValues","onSelect","onRemove","displayValue","dateFormat","UserInformatio","timeZone","number","onWheel","multiple","allimages","Array","from","handleFileChange","element","splice","removeFormFields","marginRight","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/388.9d206beb.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route, useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  Createtransportersave,\r\n  Get_RoleList,\r\n  _BulkUpload,\r\n  _Get,\r\n  _GetList,\r\n  _Put,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\n\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\n\r\nimport {\r\n  Bulk_Upload_Customer,\r\n  Create_transporter_xmlView,\r\n  Update_TransporterByID,\r\n  View_TransporterByID,\r\n} from \"../../../../ApiEndPoint/Api\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\n\r\nconst CreateCustomer = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [RoleList, setRoleList] = useState([]);\r\n  const [BulkUpload, setBulkUpload] = useState(false);\r\n  const [Countries, setCountry] = useState({});\r\n  const [BulkImport, setBulkImport] = useState(null);\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState([]);\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState([]);\r\n  const [transporterType, settransporterType] = useState(\"Create\");\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [formValues, setFormValues] = useState([\r\n    {\r\n      bmName: \"\",\r\n      bAddress: \"\",\r\n      bContactNumber: \"\",\r\n      bemail: \"\",\r\n      BGstNumber: \"\",\r\n    },\r\n  ]);\r\n\r\n  const Context = useContext(UserContext);\r\n  let history = useHistory();\r\n  let Params = useParams();\r\n\r\n  // start\r\n  let handleChange = (i, e) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues[i][e.target.name] = e.target.value;\r\n    setFormValues(newFormValues);\r\n  };\r\n\r\n  let addFormFields = () => {\r\n    setFormValues([\r\n      ...formValues,\r\n      {\r\n        bmName: \"\",\r\n        bAddress: \"\",\r\n        bContactNumber: \"\",\r\n        bemail: \"\",\r\n        BGstNumber: \"\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  let removeFormFields = (i) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues.splice(i, 1);\r\n    setFormValues(newFormValues);\r\n  };\r\n\r\n  // end add  more\r\n\r\n  const handleFileChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    let allimages = Array.from(e.target.files);\r\n    setindex(i);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: allimages,\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        }\r\n      } else if (type == \"file\") {\r\n        if (e.target.files) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: e.target.files[0],\r\n          });\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const date = new Date(position.timestamp);\r\n          const CurentTime = date.toLocaleString();\r\n          formData.Geotagging = `${position.coords.latitude},${position.coords.longitude}`;\r\n        },\r\n        (error) => {\r\n          swal(`Error: ${error}`);\r\n        },\r\n        { timeout: 10000, enableHighAccuracy: true }\r\n      );\r\n    } else {\r\n      swal(`Error: Geolocation not found`);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    Get_RoleList(userdata?._id, userdata?.database)\r\n      .then((res) => {\r\n        let ShowList = res?.Role?.filter((item, i) =>\r\n          item?.roleName?.toLowerCase()?.includes(\"transporter\")\r\n        );\r\n        setRoleList(ShowList);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Roles List Not found\");\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(Params?.id);\r\n    if (Params?.id == 0) {\r\n      settransporterType(\"Create\");\r\n    } else {\r\n      settransporterType(\"Edit\");\r\n\r\n      _Get(View_TransporterByID, Params?.id)\r\n        .then((res) => {\r\n          let transporter = res?.Transporter[0];\r\n          transporter.Duedate = transporter?.Duedate?.split(\"T\")[0];\r\n          setFormData(transporter);\r\n          if (transporter?.Country) {\r\n            let countryselected = Country?.getAllCountries()?.filter(\r\n              (ele, i) => ele?.name == transporter?.Country\r\n            );\r\n            setCountry(countryselected);\r\n            if (transporter?.State) {\r\n              let stateselected = State?.getStatesOfCountry(\r\n                countryselected[0]?.isoCode\r\n              )?.filter((ele, i) => ele?.name == transporter?.State);\r\n              setState(stateselected);\r\n              console.log(stateselected);\r\n              if (transporter?.City) {\r\n                // let cityselected = City.getCitiesOfState(\r\n                //   stateselected[0]?.countryCode,\r\n                //   stateselected[0]?.isoCode\r\n                // )?.filter((ele, i) => ele?.name == transporter?.City);\r\n                setCities(transporter?.City);\r\n              }\r\n            }\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    _GetList(Create_transporter_xmlView)\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, {\r\n          compact: true,\r\n          spaces: 2,\r\n        });\r\n\r\n        console.log(JSON.parse(jsonData)?.CreateCustomer);\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateCustomer?.input);\r\n\r\n        setdropdownValue(JSON.parse(jsonData)?.CreateCustomer?.MyDropDown);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Something Went Wrong\");\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (BulkImport !== null || BulkImport != undefined) {\r\n      let formdata = new FormData();\r\n      formdata.append(\"file\", BulkImport);\r\n\r\n      await _BulkUpload(Bulk_Upload_Customer, formdata)\r\n        .then((res) => {\r\n          swal(`${res?.message}`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Something Went Wrong\");\r\n        });\r\n    } else {\r\n      let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n      let formdata = new FormData();\r\n\r\n      formdata.append(\r\n        `${dropdownValue?.dropdown?.name?._text}`,\r\n        formData[dropdownValue?.dropdown?.name?._text]\r\n      );\r\n      CreatAccountView?.map((ele, i) => {\r\n        if (ele?.type?._attributes?.type == \"text\") {\r\n          if (ele?.name?._text == \"City\") {\r\n            formdata.append(`${ele?.name?._text}`, JSON.stringify(Cities));\r\n          } else {\r\n            formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n          }\r\n        } else if (ele?.type?._attributes?.type == \"file\") {\r\n          if (ele?.name?._text == \"Shopphoto\") {\r\n            formData[ele?.name?._text]?.map((val, index) => {\r\n              formdata.append(\"file\", formData[ele?.name?._text][index]);\r\n            });\r\n          }\r\n          if (ele?.name?._text == \"photo\") {\r\n            formData[ele?.name?._text]?.map((val, index) => {\r\n              formdata.append(\"files\", formData[ele?.name?._text][index]);\r\n            });\r\n          }\r\n        } else {\r\n          formdata.append(`${ele?.name?._text}`, formData[ele?.name?._text]);\r\n        }\r\n      });\r\n\r\n      formdata.append(\"status\", formData?.status);\r\n      formdata.append(\"database\", userdata?.database);\r\n      formdata.append(\"rolename\", formData?.rolename);\r\n      formdata.append(\"transporterDetails\", JSON.stringify(formValues));\r\n\r\n      formdata.forEach((value, key) => {\r\n        console.log(key, value);\r\n      });\r\n\r\n      if (error) {\r\n        // swal(\"Error occured while Entering Details\");\r\n      } else {\r\n        if (Params?.id == \"0\") {\r\n          Createtransportersave(formdata)\r\n            .then((res) => {\r\n              console.log(res);\r\n\r\n              if (res.status) {\r\n                history.goBack();\r\n                swal(\"Transporter Created Successfully\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err.response);\r\n              swal(\"Please Fill correct details\");\r\n            });\r\n        } else {\r\n          // Update_TransporterByID\r\n          _Put(Update_TransporterByID, Params?.id, formdata)\r\n            .then((res) => {\r\n              console.log(res);\r\n              if (res.status) {\r\n                history.goBack();\r\n                swal(\"Transporter Updated Successfully\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n            });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const onSelect1 = (selectedList, selectedItem) => {\r\n    setCities(selectedList);\r\n    console.log(selectedList);\r\n  };\r\n  const onRemove1 = (selectedList, selectedItem) => {\r\n    console.log(selectedList);\r\n    setCities(selectedList);\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">\r\n                {transporterType && transporterType} Transporter\r\n              </h1>\r\n            </Col>\r\n            {!BulkUpload && !BulkUpload ? (\r\n              <>\r\n                <Col lg=\"2\" md=\"2\">\r\n                  <Button\r\n                    color=\"primary\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setBulkUpload(true);\r\n                    }}>\r\n                    Bulk Upload\r\n                  </Button>\r\n                </Col>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Col lg=\"1\" md=\"1\">\r\n                  <Button\r\n                    color=\"primary\"\r\n                    onClick={(e) => {\r\n                      e.preventDefault();\r\n                      setBulkUpload(false);\r\n                    }}>\r\n                    Back\r\n                  </Button>\r\n                </Col>\r\n              </>\r\n            )}\r\n            {!BulkUpload && !BulkUpload && (\r\n              <Col lg=\"1\" md=\"1\">\r\n                <div className=\"float-right\">\r\n                  <Route\r\n                    render={({ history }) => (\r\n                      <Button\r\n                        style={{ cursor: \"pointer\" }}\r\n                        className=\"float-right mr-1\"\r\n                        color=\"primary\"\r\n                        onClick={() =>\r\n                          history.push(\"/app/SoftNumen/accounSearch\")\r\n                        }>\r\n                        {\" \"}\r\n                        Back\r\n                        {/* <FaPlus size={15} /> Create User */}\r\n                      </Button>\r\n                    )}\r\n                  />\r\n                </div>\r\n              </Col>\r\n            )}\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <CardBody>\r\n            {BulkUpload && BulkUpload ? (\r\n              <>\r\n                <Form className=\"m-1\" onSubmit={submitHandler}>\r\n                  <Row>\r\n                    <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                      <FormGroup>\r\n                        <Label>Bulk Import(.xlsx Only)</Label>\r\n\r\n                        <Input\r\n                          className=\"form-control\"\r\n                          type=\"file\"\r\n                          placeholder=\"\"\r\n                          name=\"BulkImport\"\r\n                          onChange={(e) => {\r\n                            setBulkImport(e.target.files[0]);\r\n                          }}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Col>\r\n                      <div className=\"d-flex justify-content-center\">\r\n                        <Button.Ripple\r\n                          color=\"primary\"\r\n                          type=\"submit\"\r\n                          className=\"mr-1 mt-2 mx-2\">\r\n                          Import\r\n                        </Button.Ripple>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </Form>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <Form className=\"m-1\" onSubmit={submitHandler}>\r\n                  <Row className=\"mb-2\">\r\n                    <Col lg=\"4\" md=\"4\">\r\n                      <FormGroup>\r\n                        <Label className=\"mb-1\">Role List *</Label>\r\n                        <CustomInput\r\n                          required\r\n                          type=\"select\"\r\n                          name=\"rolename\"\r\n                          value={formData[\"rolename\"]}\r\n                          onChange={(e) => {\r\n                            const selected = e.target.options[\r\n                              e.target.selectedIndex\r\n                            ]\r\n                              .getAttribute(\"data-name\")\r\n                              ?.split(\" \");\r\n\r\n                            setFormData({\r\n                              ...formData,\r\n                              [\"rolename\"]: e.target.value,\r\n                              [\"roleName\"]: selected[1],\r\n                            });\r\n                          }}>\r\n                          <option>--select Role--</option>\r\n                          {RoleList &&\r\n                            RoleList?.length &&\r\n                            RoleList?.map((ele, i) => {\r\n                              return (\r\n                                <option\r\n                                  data-name={`${ele?.position} ${ele?.roleName}`}\r\n                                  value={ele?._id}>\r\n                                  {ele?.roleName}\r\n                                </option>\r\n                              );\r\n                            })}\r\n                        </CustomInput>\r\n                      </FormGroup>\r\n                    </Col>\r\n                    {dropdownValue && dropdownValue ? (\r\n                      <>\r\n                        <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <FormGroup>\r\n                            <Label className=\"mb-1\">\r\n                              {dropdownValue?.dropdown?.label?._text &&\r\n                                dropdownValue?.dropdown?.label?._text}{\" \"}\r\n                              *\r\n                            </Label>\r\n                            <CustomInput\r\n                              required\r\n                              type=\"select\"\r\n                              name={dropdownValue?.dropdown?.name?._text}\r\n                              value={\r\n                                formData[dropdownValue?.dropdown?.name?._text]\r\n                              }\r\n                              onChange={handleInputChange}>\r\n                              <option value=\"\">--Select --</option>\r\n                              {dropdownValue?.dropdown?.option?.map(\r\n                                (option, index) => (\r\n                                  <option\r\n                                    key={index}\r\n                                    value={option?._attributes?.value}>\r\n                                    {option?._attributes?.value}\r\n                                  </option>\r\n                                )\r\n                              )}\r\n                            </CustomInput>\r\n                          </FormGroup>\r\n                        </Col>\r\n                        {/* {dropdownValue?.map((ele, i) => {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label className=\"mb-1\">\r\n                                {ele?.dropdown?.label?._text &&\r\n                                  ele?.dropdown?.label?._text}\r\n                              </Label>\r\n                              <CustomInput\r\n                                required\r\n                                type=\"select\"\r\n                                name={ele?.dropdown?.name?._text}\r\n                                value={formData[ele?.dropdown?.name?._text]}\r\n                                onChange={handleInputChange}>\r\n                                <option value=\"\">--Select --</option>\r\n                                {ele?.dropdown?.option?.map((option, index) => (\r\n                                  <option\r\n                                    key={index}\r\n                                    value={option?._attributes?.value}>\r\n                                    {option?._attributes?.value}\r\n                                  </option>\r\n                                ))}\r\n                              </CustomInput>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    })} */}\r\n                      </>\r\n                    ) : null}\r\n\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.map((ele, i) => {\r\n                        if (\r\n                          formData?.Registration_Type &&\r\n                          formData?.Registration_Type == \"Unregistered\"\r\n                        ) {\r\n                          if (ele?.label?._text.includes(\"GST Number\")) {\r\n                            return null;\r\n                          }\r\n                        }\r\n                        if (\r\n                          formData?.roleName &&\r\n                          formData?.roleName == \"Transporter\"\r\n                        ) {\r\n                        }\r\n                        {\r\n                          /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                        }\r\n                        // console.log(Countries);\r\n                        // console.log(States);\r\n                        const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                          .tz(\"America/New_York\")\r\n                          .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                        if (!!ele?.phoneinput) {\r\n                          return (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n                                  <PhoneInput\r\n                                    inputClass=\"myphoneinput\"\r\n                                    country={\"us\"}\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    countryCodeEditable={false}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(phone) => {\r\n                                      setFormData({\r\n                                        ...formData,\r\n                                        [ele?.name?._text]: phone,\r\n                                      });\r\n                                    }}\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          );\r\n                        } else if (!!ele?.library) {\r\n                          if (ele?.label._text?.includes(\"ountry\")) {\r\n                            {\r\n                              /* console.log(ele); */\r\n                            }\r\n                            return (\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n                                  <Select\r\n                                    inputClass=\"countryclass\"\r\n                                    className=\"countryclassnw\"\r\n                                    options={Country.getAllCountries()}\r\n                                    getOptionLabel={(options) => {\r\n                                      return options[\"name\"];\r\n                                    }}\r\n                                    getOptionValue={(options) => {\r\n                                      return options[\"name\"];\r\n                                    }}\r\n                                    value={Countries}\r\n                                    onChange={(country) => {\r\n                                      setCountry(country);\r\n                                      setFormData({\r\n                                        ...formData,\r\n                                        [\"Country\"]: country?.name,\r\n                                      });\r\n                                    }}\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            );\r\n                          } else if (ele?.label._text?.includes(\"tate\")) {\r\n                            return (\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n                                  <Select\r\n                                    options={State?.getStatesOfCountry(\r\n                                      Countries?.isoCode\r\n                                    )}\r\n                                    getOptionLabel={(options) => {\r\n                                      return options[\"name\"];\r\n                                    }}\r\n                                    getOptionValue={(options) => {\r\n                                      return options[\"name\"];\r\n                                    }}\r\n                                    value={States}\r\n                                    onChange={(State) => {\r\n                                      setState(State);\r\n                                      setFormData({\r\n                                        ...formData,\r\n                                        [\"State\"]: State?.name,\r\n                                      });\r\n                                    }}\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            );\r\n                          } else if (ele?.label._text?.includes(\"ity\")) {\r\n                            return (\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup>\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.label?._text}\r\n                                  </Label>\r\n                                  <Multiselect\r\n                                    required\r\n                                    isObject=\"false\"\r\n                                    options={City?.getCitiesOfState(\r\n                                      States?.countryCode,\r\n                                      States?.isoCode\r\n                                    )} // Options to display in the dropdown\r\n                                    selectedValues={Cities && Cities} // Preselected value to persist in dropdown\r\n                                    onSelect={onSelect1} // Function will trigger on select event\r\n                                    onRemove={onRemove1} // Function will trigger on remove event\r\n                                    displayValue=\"name\" // Property name to display in the dropdown options\r\n                                  />\r\n                                  {/* <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}  \r\n                              /> */}\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            );\r\n                          } else {\r\n                            return (\r\n                              <>\r\n                                {ele?.type?._attributes?.type == \"date\" ? (\r\n                                  <>\r\n                                    <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                      <FormGroup key={i}>\r\n                                        <Label className=\"mb-1\">\r\n                                          {ele?.label?._text}\r\n                                        </Label>\r\n\r\n                                        <Input\r\n                                          onKeyDown={(e) => {\r\n                                            if (\r\n                                              ele?.type?._attributes?.type ==\r\n                                              \"number\"\r\n                                            ) {\r\n                                              [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                                e.key\r\n                                              ) && e.preventDefault();\r\n                                            }\r\n                                          }}\r\n                                          type={ele?.type?._attributes?.type}\r\n                                          placeholder={ele?.placeholder?._text}\r\n                                          name={ele?.name?._text}\r\n                                          dateFormat={\r\n                                            Context?.UserInformatio?.dateFormat\r\n                                          }\r\n                                          value={\r\n                                            moment(formData[ele?.name?._text])\r\n                                              .tz(\r\n                                                Context?.UserInformatio\r\n                                                  ?.timeZone\r\n                                              )\r\n                                              .format(\r\n                                                Context?.UserInformatio\r\n                                                  ?.dateFormat\r\n                                              )\r\n                                            // formData[ele?.name?._text]\r\n                                          }\r\n                                          // value={formData[ele?.name?._text]}\r\n                                          onChange={(e) =>\r\n                                            handleInputChange(\r\n                                              e,\r\n                                              ele?.type?._attributes?.type,\r\n                                              i\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        {index === i ? (\r\n                                          <>\r\n                                            {error && (\r\n                                              <span style={{ color: \"red\" }}>\r\n                                                {error}\r\n                                              </span>\r\n                                            )}\r\n                                          </>\r\n                                        ) : (\r\n                                          <></>\r\n                                        )}\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                      <FormGroup key={i}>\r\n                                        <Label className=\"mb-1\">\r\n                                          {ele?.label?._text}\r\n                                        </Label>\r\n\r\n                                        <Input\r\n                                          onKeyDown={(e) => {\r\n                                            if (\r\n                                              ele?.type?._attributes?.type ==\r\n                                              \"number\"\r\n                                            ) {\r\n                                              [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                                e.key\r\n                                              ) && e.preventDefault();\r\n                                            }\r\n                                          }}\r\n                                          type={ele?.type?._attributes?.type}\r\n                                          placeholder={ele?.placeholder?._text}\r\n                                          name={ele?.name?._text}\r\n                                          value={formData[ele?.name?._text]}\r\n                                          onChange={(e) =>\r\n                                            handleInputChange(\r\n                                              e,\r\n                                              ele?.type?._attributes?.type,\r\n                                              i\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        {index === i ? (\r\n                                          <>\r\n                                            {error && (\r\n                                              <span style={{ color: \"red\" }}>\r\n                                                {error}\r\n                                              </span>\r\n                                            )}\r\n                                          </>\r\n                                        ) : (\r\n                                          <></>\r\n                                        )}\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </>\r\n                                )}\r\n                              </>\r\n                            );\r\n                          }\r\n                        } else {\r\n                          return (\r\n                            <>\r\n                              {!!ele?.number ? (\r\n                                <>\r\n                                  <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                    <FormGroup key={i}>\r\n                                      <Label className=\"mb-1\">\r\n                                        {ele?.label?._text}\r\n                                      </Label>\r\n\r\n                                      <Input\r\n                                        onWheel={(e) => {\r\n                                          e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                        }}\r\n                                        onKeyDown={(e) => {\r\n                                          if (\r\n                                            ele?.type?._attributes?.type ==\r\n                                            \"number\"\r\n                                          ) {\r\n                                            [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                              e.key\r\n                                            ) && e.preventDefault();\r\n                                          }\r\n                                        }}\r\n                                        type={ele?.type?._attributes?.type}\r\n                                        placeholder={ele?.placeholder?._text}\r\n                                        name={ele?.name?._text}\r\n                                        value={formData[ele?.name?._text]}\r\n                                        onChange={(e) =>\r\n                                          handleInputChange(\r\n                                            e,\r\n                                            ele?.type?._attributes?.type,\r\n                                            i\r\n                                          )\r\n                                        }\r\n                                      />\r\n                                      {index === i ? (\r\n                                        <>\r\n                                          {error && (\r\n                                            <span style={{ color: \"red\" }}>\r\n                                              {error}\r\n                                            </span>\r\n                                          )}\r\n                                        </>\r\n                                      ) : (\r\n                                        <></>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </>\r\n                              ) : (\r\n                                <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                  <FormGroup key={i}>\r\n                                    {ele?.type?._attributes?.type &&\r\n                                    ele?.type?._attributes?.type == \"file\" ? (\r\n                                      <>\r\n                                        <Label className=\"mb-1\">\r\n                                          {ele?.label?._text}\r\n                                        </Label>\r\n\r\n                                        <Input\r\n                                          multiple\r\n                                          className=\"form-control\"\r\n                                          type={ele?.type?._attributes?.type}\r\n                                          placeholder={ele?.placeholder?._text}\r\n                                          name={ele?.name?._text}\r\n                                          //   value={formData[ele?.name?._text]}\r\n                                          onChange={(e) => {\r\n                                            // const value = e.target.value;\r\n                                            // // Use regular expression to allow only numbers\r\n                                            // const numericValue = value.replace(\r\n                                            //   /\\D/g,\r\n                                            //   \"\"\r\n                                            // );\r\n                                            handleFileChange(\r\n                                              e,\r\n                                              ele?.type?._attributes?.type,\r\n                                              i\r\n                                            );\r\n                                          }}\r\n                                        />\r\n                                        {index === i ? (\r\n                                          <>\r\n                                            {error && (\r\n                                              <span style={{ color: \"red\" }}>\r\n                                                {error}\r\n                                              </span>\r\n                                            )}\r\n                                          </>\r\n                                        ) : (\r\n                                          <></>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <>\r\n                                        <Label className=\"mb-1\">\r\n                                          {ele?.label?._text}\r\n                                        </Label>\r\n\r\n                                        <Input\r\n                                          className=\"form-control\"\r\n                                          onKeyDown={(e) => {\r\n                                            if (\r\n                                              ele?.type?._attributes?.type ==\r\n                                              \"number\"\r\n                                            ) {\r\n                                              [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                                e.key\r\n                                              ) && e.preventDefault();\r\n                                            }\r\n                                          }}\r\n                                          type={ele?.type?._attributes?.type}\r\n                                          placeholder={ele?.placeholder?._text}\r\n                                          name={ele?.name?._text}\r\n                                          value={formData[ele?.name?._text]}\r\n                                          onChange={(e) => {\r\n                                            // const value = e.target.value;\r\n                                            // // Use regular expression to allow only numbers\r\n                                            // const numericValue = value.replace(\r\n                                            //   /\\D/g,\r\n                                            //   \"\"\r\n                                            // );\r\n                                            handleInputChange(\r\n                                              e,\r\n                                              ele?.type?._attributes?.type,\r\n                                              i\r\n                                            );\r\n                                          }}\r\n                                        />\r\n                                        {index === i ? (\r\n                                          <>\r\n                                            {error && (\r\n                                              <span style={{ color: \"red\" }}>\r\n                                                {error}\r\n                                              </span>\r\n                                            )}\r\n                                          </>\r\n                                        ) : (\r\n                                          <></>\r\n                                        )}\r\n                                      </>\r\n                                    )}\r\n\r\n                                    {/* <Label className=\"mb-1\">\r\n                                  {ele?.label?._text}\r\n                                </Label>\r\n\r\n                                <Input\r\n                                  className=\"form-control\"\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) => {\r\n                                    // const value = e.target.value;\r\n                                    // // Use regular expression to allow only numbers\r\n                                    // const numericValue = value.replace(\r\n                                    //   /\\D/g,\r\n                                    //   \"\"\r\n                                    // );\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    );\r\n                                  }}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )} */}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              )}\r\n                            </>\r\n                          );\r\n                        }\r\n                      })}\r\n                  </Row>\r\n                  <br />\r\n\r\n                  {formValues.map((element, index) => (\r\n                    <>\r\n                      <Row>\r\n                        <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                          <div className=\"d-flex justify-content-center\">\r\n                            <h3 key={index}>Service Location</h3>\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row className=\"mb-2\">\r\n                        <Col className=\"mb-2\" key={index} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <Label>Branch Manager Name</Label>\r\n                          <Input\r\n                            type=\"text\"\r\n                            placeholder=\"Branch Manage Name\"\r\n                            name=\"bmName\"\r\n                            value={element.bmName || \"\"}\r\n                            onChange={(e) => handleChange(index, e)}\r\n                          />\r\n                        </Col>\r\n                        <Col className=\"mb-2\" key={index} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <Label>Address</Label>\r\n                          <Input\r\n                            type=\"text\"\r\n                            placeholder=\"Branch Address\"\r\n                            name=\"bAddress\"\r\n                            value={element.bAddress || \"\"}\r\n                            onChange={(e) => handleChange(index, e)}\r\n                          />\r\n                        </Col>\r\n                        <Col className=\"mb-2\" key={index} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <Label>Contact Number</Label>\r\n                          <Input\r\n                            type=\"number\"\r\n                            placeholder=\"Branch Contact Number\"\r\n                            name=\"bContactNumber\"\r\n                            value={element.bContactNumber || \"\"}\r\n                            onChange={(e) => handleChange(index, e)}\r\n                          />\r\n                        </Col>\r\n                        <Col className=\"mb-2\" key={index} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <Label>Email Id</Label>\r\n                          <Input\r\n                            type=\"email\"\r\n                            placeholder=\"Branch Email\"\r\n                            name=\"bemail\"\r\n                            value={element.bemail || \"\"}\r\n                            onChange={(e) => handleChange(index, e)}\r\n                          />\r\n                        </Col>\r\n                        <Col className=\"mb-2\" key={index} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <Label>GST Number</Label>\r\n                          <Input\r\n                            type=\"text\"\r\n                            placeholder=\"Branch GST\"\r\n                            name=\"BGstNumber\"\r\n                            value={element.BGstNumber || \"\"}\r\n                            onChange={(e) => handleChange(index, e)}\r\n                          />\r\n                        </Col>\r\n                        <Col key={index} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <div className=\"d-flex justify-content-space-around\">\r\n                            {index ? (\r\n                              <Button\r\n                                color=\"info\"\r\n                                type=\"button\"\r\n                                className=\"button remove mt-2\"\r\n                                onClick={() => removeFormFields(index)}>\r\n                                x\r\n                              </Button>\r\n                            ) : null}\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                    </>\r\n                  ))}\r\n                  <Row>\r\n                    <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                      <div className=\"d-flex justify-content-end\">\r\n                        <Button\r\n                          color=\"primary\"\r\n                          className=\"button add mt-2\"\r\n                          type=\"button\"\r\n                          onClick={() => addFormFields()}>\r\n                          Add\r\n                        </Button>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"mt-2\">\r\n                    <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                      <Label className=\"mb-0\">Status</Label>\r\n                      <div\r\n                        className=\"form-label-group\"\r\n                        onChange={(e) => {\r\n                          setFormData({\r\n                            ...formData,\r\n                            [\"status\"]: e.target.value,\r\n                          });\r\n                        }}>\r\n                        <input\r\n                          style={{ marginRight: \"3px\" }}\r\n                          checked={formData?.status == \"Active\"}\r\n                          type=\"radio\"\r\n                          name=\"status\"\r\n                          value=\"Active\"\r\n                        />\r\n                        <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                        <input\r\n                          style={{ marginRight: \"3px\" }}\r\n                          type=\"radio\"\r\n                          checked={formData?.status == \"Deactive\"}\r\n                          name=\"status\"\r\n                          value=\"Deactive\"\r\n                        />\r\n                        <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row>\r\n                    <Button.Ripple\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      className=\"mr-1 mt-2 mx-2\">\r\n                      Submit\r\n                    </Button.Ripple>\r\n                  </Row>\r\n                </Form>\r\n              </>\r\n            )}\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateCustomer;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}