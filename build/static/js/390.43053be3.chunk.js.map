{"version":3,"sources":["../node_modules/reactstrap/es/FormGroup.js","views/apps/freshlist/accounts/EditAccount.js"],"names":["_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","EditAccount","EditOneData","useState","CreatAccountView","setCreatAccountView","WareHouseList","setWareHouseList","SelectedWareHouse","setSelectedWareHouse","WareHouseIncharge","setWareHouseIncharge","Countries","setCountry","States","setState","Cities","setCities","formData","setFormData","setdropdownValue","index","setindex","error","setError","Context","useContext","UserContext","handleInputChange","e","type","i","target","name","value","checked","test","length","useEffect","console","log","warehouse","selectedWareHouse","map","ele","id","userdata","JSON","parse","localStorage","getItem","Get_RoleList","_id","database","then","res","Role","rolename","catch","err","swal","Country","countryselected","getAllCountries","filter","State","stateselected","getStatesOfCountry","isoCode","City","cityselected","getCitiesOfState","countryCode","status","CreateAccountView","jsonData","xmlJs","xml2json","data","compact","spaces","CreateUser","input","_Get","WareahouseList_For_addProduct","Warehouse","onSubmit","preventDefault","CreateAccountUpdate","lg","md","roleName","readOnly","required","showCheckbox","isObject","options","selectedValues","onSelect","selectedList","selectedItem","onRemove","removedItem","displayValue","moment","tz","format","phoneinput","key","sm","label","_text","inputClass","country","onKeyDown","_attributes","includes","countryCodeEditable","onChange","phone","style","color","library","getOptionLabel","getOptionValue","placeholder","dateFormat","UserInformatio","timeZone","number","onWheel","marginRight","Ripple"],"mappings":"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","file":"static/js/390.43053be3.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;","import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountUpdate,\r\n  CreateAccountView,\r\n  Get_RoleList,\r\n  _Get,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport { CloudLightning } from \"react-feather\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport {\r\n  Created_Warehouse,\r\n  WareahouseList_For_addProduct,\r\n} from \"../../../../ApiEndPoint/Api\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\n\r\nconst EditAccount = ({ EditOneData }) => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [WareHouseList, setWareHouseList] = useState([]);\r\n  const [SelectedWareHouse, setSelectedWareHouse] = useState([]);\r\n  const [Master, setMaster] = useState(false);\r\n  const [WareHouseIncharge, setWareHouseIncharge] = useState(false);\r\nconst [Rule, setRule] = useState([]);\r\nconst [Countries, setCountry] = useState({});\r\nconst [Loader, setLoader] = useState(false);\r\nconst [States, setState] = useState({});\r\nconst [Image, setImage] = useState({});\r\nconst [Cities, setCities] = useState({});\r\nconst [formData, setFormData] = useState({});\r\nconst [dropdownValue, setdropdownValue] = useState({});\r\nconst [index, setindex] = useState(\"\");\r\nconst [error, setError] = useState(\"\");\r\nconst [permissions, setpermissions] = useState({});\r\n\r\nconst Context = useContext(UserContext);\r\n\r\nconst handleInputChange = (e, type, i) => {\r\n  const { name, value, checked } = e.target;\r\n  setindex(i);\r\n  if (type == \"checkbox\") {\r\n    if (checked) {\r\n      setFormData({\r\n        ...formData,\r\n        [name]: checked,\r\n      });\r\n    } else {\r\n      setFormData({\r\n        ...formData,\r\n        [name]: checked,\r\n      });\r\n    }\r\n  } else {\r\n    if (type == \"number\") {\r\n      if (/^\\d{0,10}$/.test(value)) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        setError(\"\");\r\n      } else {\r\n        setError(\r\n          \"Please enter a valid number with a maximum length of 10 digits\"\r\n        );\r\n      }\r\n    } else {\r\n      if (value.length <= 10) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        // console.log(value);\r\n        setError(\"\");\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        // setError(\"Input length exceeds the maximum of 10 characters\");\r\n      }\r\n    }\r\n  }\r\n};\r\n  \r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    setFormData(EditOneData);\r\n    if (!!EditOneData?.warehouse) {\r\n      //\r\n      let selectedWareHouse = EditOneData?.warehouse?.map((ele) => {\r\n        return ele?.id;\r\n      });\r\n      debugger;\r\n\r\n      setSelectedWareHouse(selectedWareHouse);\r\n    }\r\n\r\n    let userdata = JSON.parse(localStorage.getItem(\"userData\"));\r\n    Get_RoleList(userdata?._id, userdata?.database)\r\n      .then((res) => {\r\n        setdropdownValue(res?.Role);\r\n        formData[\"rolename\"] = EditOneData?.rolename?._id;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        swal(\"Roles List Not found\");\r\n      });\r\n    if (EditOneData?.Country) {\r\n      let countryselected = Country?.getAllCountries()?.filter(\r\n        (ele, i) => ele?.name == EditOneData?.Country\r\n      );\r\n      setCountry(countryselected);\r\n      if (EditOneData?.State) {\r\n        let stateselected = State?.getStatesOfCountry(\r\n          countryselected[0]?.isoCode\r\n        )?.filter((ele, i) => ele?.name == EditOneData?.State);\r\n        setState(stateselected);\r\n        if (EditOneData?.City) {\r\n          let cityselected = City.getCitiesOfState(\r\n            stateselected[0]?.countryCode,\r\n            stateselected[0]?.isoCode\r\n          )?.filter((ele, i) => ele?.name == EditOneData?.City);\r\n          setCities(cityselected);\r\n        }\r\n      }\r\n    }\r\n\r\n    formData[\"status\"] = EditOneData?.status;\r\n    CreateAccountView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n\r\n        setCreatAccountView(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    _Get(WareahouseList_For_addProduct, userdata?.database)\r\n      .then((res) => {\r\n        setWareHouseList(res?.Warehouse);\r\n        console.log(res?.Warehouse);\r\n        if (!!EditOneData?.warehouse) {\r\n          setWareHouseIncharge(true);\r\n        } else {\r\n          setWareHouseIncharge(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      CreateAccountUpdate(EditOneData?._id, formData)\r\n        .then((res) => {\r\n          setFormData({});\r\n          if (res.status) {\r\n            swal(\"User Updated Successfully\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Edit User</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                {/* <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/accounSearch\")\r\n                      }\r\n                    >\r\n                      {\" \"}\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                /> */}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          {/* <hr /> */}\r\n\r\n          <Form className=\"m-1\" onSubmit={submitHandler}>\r\n            <Row className=\"mb-2\">\r\n              {/* <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      {\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n                          ?._text\r\n                      }\r\n                    </Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name={\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n                          ?._text\r\n                      }\r\n                      value={\r\n                        formData[\r\n                          dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n                            ?.name?._text\r\n                        ]\r\n                      }\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n                      {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n                        (option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}\r\n                          >\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col> */}\r\n              <Col lg=\"4\" md=\"4\">\r\n                <FormGroup>\r\n                  <Label>\r\n                    Role Name-\r\n                    <strong>\r\n                      {formData?.rolename?.roleName &&\r\n                        formData?.rolename?.roleName}\r\n                    </strong>\r\n                  </Label>\r\n                  <Input\r\n                    readOnly\r\n                    value={\r\n                      formData?.rolename?.roleName &&\r\n                      formData?.rolename?.roleName\r\n                    }\r\n                  />\r\n                </FormGroup>\r\n              </Col>\r\n              {WareHouseIncharge && WareHouseIncharge && (\r\n                <Col className=\"mb-1\" lg=\"4\" md=\"4\">\r\n                  <Label>Select WareHouse to Assign * </Label>\r\n                  <Multiselect\r\n                    required\r\n                    showCheckbox=\"true\"\r\n                    isObject=\"false\"\r\n                    options={WareHouseList} // Options to display in the dropdown\r\n                    selectedValues={SelectedWareHouse} // Preselected value to persist in dropdown\r\n                    onSelect={(selectedList, selectedItem) => {\r\n                      setSelectedWareHouse(selectedList);\r\n                    }} // Function will trigger on select event\r\n                    onRemove={(selectedList, removedItem) => {\r\n                      setSelectedWareHouse(selectedList);\r\n                    }} // Function will trigger on remove event\r\n                    displayValue=\"warehouseName\" // Property name to display in the dropdown options\r\n                  />\r\n                </Col>\r\n              )}\r\n              {CreatAccountView &&\r\n                CreatAccountView?.map((ele, i) => {\r\n                  {\r\n                    /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                  }\r\n                  // console.log(Countries);\r\n                  // console.log(States);\r\n                  const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                    .tz(\"America/New_York\")\r\n                    .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                  if (!!ele?.phoneinput) {\r\n                    return (\r\n                      <>\r\n                        <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <FormGroup>\r\n                            <Label>{ele?.label?._text}</Label>\r\n                            <PhoneInput\r\n                              inputClass=\"myphoneinput\"\r\n                              country={\"in\"}\r\n                              onKeyDown={(e) => {\r\n                                if (ele?.type?._attributes?.type == \"number\") {\r\n                                  [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                    e.preventDefault();\r\n                                }\r\n                              }}\r\n                              countryCodeEditable={false}\r\n                              name={ele?.name?._text}\r\n                              value={formData[ele?.name?._text]}\r\n                              onChange={(phone) => {\r\n                                setFormData({\r\n                                  ...formData,\r\n                                  [ele?.name?._text]: phone,\r\n                                });\r\n                              }}\r\n                            />\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </>\r\n                    );\r\n                  } else if (!!ele?.library) {\r\n                    if (ele?.label._text?.includes(\"ountry\")) {\r\n                      return (\r\n                        <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <FormGroup>\r\n                            <Label>{ele?.label?._text}</Label>\r\n                            <Select\r\n                              disabled\r\n                              inputClass=\"countryclass\"\r\n                              className=\"countryclassnw\"\r\n                              options={Country.getAllCountries()}\r\n                              getOptionLabel={(options) => {\r\n                                return options[\"name\"];\r\n                              }}\r\n                              getOptionValue={(options) => {\r\n                                return options[\"name\"];\r\n                              }}\r\n                              value={Countries}\r\n                              onChange={(country) => {\r\n                                setCountry(country);\r\n                                setFormData({\r\n                                  ...formData,\r\n                                  [\"Country\"]: country?.name,\r\n                                });\r\n                              }}\r\n                            />\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      );\r\n                    } else if (ele?.label._text?.includes(\"tate\")) {\r\n                      return (\r\n                        <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <FormGroup>\r\n                            <Label>{ele?.label?._text}</Label>\r\n                            <Select\r\n                              disabled\r\n                              options={State?.getStatesOfCountry(\r\n                                Countries?.isoCode\r\n                              )}\r\n                              getOptionLabel={(options) => {\r\n                                return options[\"name\"];\r\n                              }}\r\n                              getOptionValue={(options) => {\r\n                                return options[\"name\"];\r\n                              }}\r\n                              value={States}\r\n                              onChange={(State) => {\r\n                                setState(State);\r\n                                setFormData({\r\n                                  ...formData,\r\n                                  [\"State\"]: State?.name,\r\n                                });\r\n                              }}\r\n                            />\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      );\r\n                    } else if (ele?.label._text?.includes(\"ity\")) {\r\n                      return (\r\n                        <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                          <FormGroup>\r\n                            <Label>{ele?.label?._text}</Label>\r\n                            <Select\r\n                              disabled\r\n                              options={City?.getCitiesOfState(\r\n                                States?.countryCode,\r\n                                States?.isoCode\r\n                              )}\r\n                              getOptionLabel={(options) => {\r\n                                return options[\"name\"];\r\n                              }}\r\n                              getOptionValue={(options) => {\r\n                                return options[\"name\"];\r\n                              }}\r\n                              value={Cities}\r\n                              onChange={(City) => {\r\n                                setCities(City);\r\n                                setFormData({\r\n                                  ...formData,\r\n                                  [\"City\"]: City?.name,\r\n                                });\r\n                              }}\r\n                            />\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {ele?.type?._attributes?.type == \"date\" ? (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label>{ele?.label?._text}</Label>\r\n\r\n                                  <Input\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    dateFormat={\r\n                                      Context?.UserInformatio?.dateFormat\r\n                                    }\r\n                                    value={\r\n                                      moment(formData[ele?.name?._text])\r\n                                        .tz(Context?.UserInformatio?.timeZone)\r\n                                        .format(\r\n                                          Context?.UserInformatio?.dateFormat\r\n                                        )\r\n                                      // formData[ele?.name?._text]\r\n                                    }\r\n                                    // value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                                <FormGroup key={i}>\r\n                                  <Label>{ele?.label?._text}</Label>\r\n\r\n                                  <Input\r\n                                    onKeyDown={(e) => {\r\n                                      if (\r\n                                        ele?.type?._attributes?.type == \"number\"\r\n                                      ) {\r\n                                        [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                          e.preventDefault();\r\n                                      }\r\n                                    }}\r\n                                    type={ele?.type?._attributes?.type}\r\n                                    placeholder={ele?.placeholder?._text}\r\n                                    name={ele?.name?._text}\r\n                                    value={formData[ele?.name?._text]}\r\n                                    onChange={(e) =>\r\n                                      handleInputChange(\r\n                                        e,\r\n                                        ele?.type?._attributes?.type,\r\n                                        i\r\n                                      )\r\n                                    }\r\n                                  />\r\n                                  {index === i ? (\r\n                                    <>\r\n                                      {error && (\r\n                                        <span style={{ color: \"red\" }}>\r\n                                          {error}\r\n                                        </span>\r\n                                      )}\r\n                                    </>\r\n                                  ) : (\r\n                                    <></>\r\n                                  )}\r\n                                </FormGroup>\r\n                              </Col>\r\n                            </>\r\n                          )}\r\n                        </>\r\n                      );\r\n                    }\r\n                  } else {\r\n                    return (\r\n                      <>\r\n                        {!!ele?.number ? (\r\n                          <>\r\n                            <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                              <FormGroup key={i}>\r\n                                <Label>{ele?.label?._text}</Label>\r\n\r\n                                <Input\r\n                                  onWheel={(e) => {\r\n                                    e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                  }}\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  placeholder={ele?.placeholder?._text}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(\r\n                                      e,\r\n                                      ele?.type?._attributes?.type,\r\n                                      i\r\n                                    )\r\n                                  }\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </>\r\n                        ) : (\r\n                          <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n                            <FormGroup key={i}>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) => {\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  );\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        )}\r\n                      </>\r\n                    );\r\n                  }\r\n                })}\r\n            </Row>\r\n\r\n            <hr />\r\n            {/* <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row> */}\r\n            <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n              <Label className=\"mb-0\">Status</Label>\r\n              <div\r\n                className=\"form-label-group\"\r\n                onChange={(e) => {\r\n                  setFormData({\r\n                    ...formData,\r\n                    [\"status\"]: e.target.value,\r\n                  });\r\n                }}>\r\n                <input\r\n                  checked={formData[\"status\"] == \"Active\"}\r\n                  style={{ marginRight: \"3px\" }}\r\n                  type=\"radio\"\r\n                  name=\"status\"\r\n                  value=\"Active\"\r\n                />\r\n                <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                <input\r\n                  // checked={status == \"Inactive\"}\r\n                  checked={formData[\"status\"] == \"Deactive\"}\r\n                  style={{ marginRight: \"3px\" }}\r\n                  type=\"radio\"\r\n                  name=\"status\"\r\n                  value=\"Deactive\"\r\n                />\r\n                <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n              </div>\r\n            </Col>\r\n            <Row>\r\n              <Button.Ripple\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n                className=\"mr-1 mt-2 mx-2\">\r\n                Submit\r\n              </Button.Ripple>\r\n            </Row>\r\n          </Form>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditAccount;\r\n"],"sourceRoot":""}