{"version":3,"sources":["../node_modules/reactstrap/es/Spinner.js","views/apps/freshlist/accounts/EditTeamRolePosition.js"],"names":["_excluded","propTypes","tag","tagPropType","type","PropTypes","string","size","color","className","cssModule","object","children","Spinner","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","role","defaultProps","DepartmentRoleAssign","useState","selectedDepartment","setSelectedDepartment","setSelectedRoles","SelectedRolesList","setSelectedRolesList","DepartMentList","setDepartMentList","setRoleList","ChangedDepartment","setChangedDepartment","Loader","setLoader","useEffect","userData","JSON","parse","localStorage","getItem","_Get","ViewDepartmentWise_Assign_Role","database","then","res","Department","length","catch","err","console","log","RoleLists","Get_RoleList","_id","WithoutAssign","Role","filter","ele","assign","roleName","Position","rolename","position","i","handleAssignRoles","currentDepartmentWithRole","roles","map","val","roleId","rolePosition","payload","_Put","Update_AssignRole_InDepartment","swal","style","display","justifyContent","marginTop","height","width","handleAddRanking","e","data","id","AllSelected","AllDeptList","index","indexOf","Number","target","value","lg","render","history","cursor","onClick","goBack","sm","md","onChange","event","department","handleDepartmentChange","key","departmentName","marginRight","fontSize","right","readOnly","placeholder"],"mappings":"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","file":"static/js/391.f0022efa.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"type\", \"size\", \"color\", \"children\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  type: PropTypes.string,\n  size: PropTypes.string,\n  color: PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  children: PropTypes.string\n};\nvar defaultProps = {\n  tag: 'div',\n  type: 'border',\n  children: 'Loading...'\n};\n\nvar Spinner = function Spinner(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      type = props.type,\n      size = props.size,\n      color = props.color,\n      children = props.children,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, size ? \"spinner-\" + type + \"-\" + size : false, \"spinner-\" + type, color ? \"text-\" + color : false), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({\n    role: \"status\"\n  }, attributes, {\n    className: classes\n  }), children && /*#__PURE__*/React.createElement(\"span\", {\n    className: mapToCssModules('sr-only', cssModule)\n  }, children));\n};\n\nSpinner.propTypes = propTypes;\nSpinner.defaultProps = defaultProps;\nexport default Spinner;","// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   Badge,\r\n//   Button,\r\n//   Card,\r\n//   CardBody,\r\n//   Col,\r\n//   CustomInput,\r\n//   Input,\r\n//   Label,\r\n//   Row,\r\n//   Spinner,\r\n//   Table,\r\n// } from \"reactstrap\";\r\n// import { Route } from \"react-router-dom\";\r\n// import { _Get, _PostSave, _Put } from \"../../../../ApiEndPoint/ApiCalling\";\r\n// import {\r\n//   All_Users_List,\r\n//   Deptartment_with_Role,\r\n//   User_Assign_User,\r\n//   ViewDepartmentWise_Assign_Role,\r\n// } from \"../../../../ApiEndPoint/Api\";\r\n// import swal from \"sweetalert\";\r\n// let SelectedChild = [];\r\n// let SetAllHeadOfdepartment = [];\r\n// const EditTeamRolePosition = () => {\r\n//   const [DepartmentWithRole, setDepartmentWithRole] = useState([]);\r\n//   const [SelectedDepartment, setSelectedDepartment] = useState([]);\r\n//   const [ShowParentList, setShowParentList] = useState([]);\r\n//   const [ALLheadsofDept, setALLheadsofDept] = useState([]);\r\n//   const [ShowChildList, setShowChildList] = useState([]);\r\n//   const [Show, setShow] = useState(false);\r\n//   const [Child, setChild] = useState(false);\r\n//   const [SelectedParentForHeirarchy, setSelectedParentForHeirarchy] = useState(\r\n//     {}\r\n//   );\r\n//   const [SelectedChildForHeirarchy, setSelectedChildForHeirarchy] = useState(\r\n//     []\r\n//   );\r\n//   const [NoChild, setNoChild] = useState(false);\r\n//   const [Loader, setLoader] = useState(false);\r\n//   const [Party, setParty] = useState(false);\r\n//   const [HeadOfDepartment, setHeadOfDepartment] = useState(false);\r\n//   const [Parent, setParent] = useState(\"\");\r\n//   const [ParentName, setParentName] = useState(\"\");\r\n//   const [SelectedRoleId, setSelectedRoleId] = useState(\"\");\r\n//   const [ChildList, setChildList] = useState([]);\r\n//   const [AllUsersList, setAllUsersList] = useState([]);\r\n\r\n//   const UserList = () => {\r\n//     let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n\r\n//     _Get(All_Users_List, userData?.database)\r\n//       .then((res) => {\r\n//         // console.log(res?.User);\r\n//         let WithoutCreatedBy = res?.User?.filter((ele, i) => !ele?.created_by);\r\n//         setAllUsersList(res?.User);\r\n//         // if (WithoutCreatedBy?.length) {\r\n//         //   setAllUsersList(WithoutCreatedBy);\r\n//         // }\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//   };\r\n//   useEffect(() => {\r\n//     let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n//     // ViewDepartmentWise_Assign_Role\r\n//     // _Get(ViewDepartmentWise_Assign_Role, userData?.database)\r\n//     //   .then((res) => {\r\n//     //     console.log(res);\r\n//     //     setDepartmentWithRole(res?.Department);\r\n//     //     debugger;\r\n//     //   })\r\n//     //   .catch((err) => {\r\n//     //     console.log(err);\r\n//     //   });\r\n//     UserList();\r\n//     _Get(Deptartment_with_Role, userData?.database)\r\n//       .then((res) => {\r\n//         setDepartmentWithRole(res?.Department);\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//   }, []);\r\n\r\n//   const handleSaveParent = (parent) => {\r\n//     setSelectedParentForHeirarchy(parent);\r\n//   };\r\n//   const handleSaveChild = (child, e) => {\r\n//     if (e.target.checked) {\r\n//       SelectedChild.push(child);\r\n\r\n//       setSelectedChildForHeirarchy(child);\r\n//     } else {\r\n//       let index = SelectedChild?.indexOf(child);\r\n//       setSelectedChildForHeirarchy(SelectedChild.splice(index, 1));\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     // setLoader(true);\r\n//     let ParentID = SelectedParentForHeirarchy?._id;\r\n//     let child = SelectedChild?.map((ele, i) => {\r\n//       return {\r\n//         id: ele?._id,\r\n//       };\r\n//     });\r\n//     let payload = {\r\n//       parentId: ParentID,\r\n//       childs: child,\r\n//     };\r\n\r\n//     await _PostSave(User_Assign_User, payload)\r\n//       .then((res) => {\r\n//         setLoader(false);\r\n//         // console.log(res);\r\n\r\n//         UserList();\r\n//         setSelectedDepartment([]);\r\n//         setShowParentList([]);\r\n//         setParent(\"\");\r\n//         setShowChildList([]);\r\n//         setChild(false);\r\n//         setChildList([]);\r\n//         SelectedChild = [];\r\n//         swal(\"Assigned Successfully\");\r\n//       })\r\n//       .catch((err) => {\r\n//         setLoader(false);\r\n//         swal(\"Something Went Wrong\");\r\n//         console.log(err);\r\n//       });\r\n//   };\r\n//   console.log(ShowChildList);\r\n//   return (\r\n//     <div>\r\n//       <Card>\r\n//         <CardBody>\r\n//           <div className=\" m-2\">\r\n//             <Row className=\"\">\r\n//               <Col>\r\n//                 <h1>Edit Team Members of Parents</h1>\r\n//               </Col>\r\n//               <Col lg=\"2\" md=\"2\">\r\n//                 <div className=\"float-right\">\r\n//                   <Route\r\n//                     render={({ history }) => (\r\n//                       <Button\r\n//                         style={{ cursor: \"pointer\" }}\r\n//                         className=\"float-right mr-1\"\r\n//                         color=\"primary\"\r\n//                         onClick={() => history.goBack()}>\r\n//                         {\" \"}\r\n//                         Back\r\n//                       </Button>\r\n//                     )}\r\n//                   />\r\n//                 </div>\r\n//               </Col>\r\n//             </Row>\r\n//           </div>\r\n//           <div className=\" m-2\">\r\n//             <Row className=\"\">\r\n//               <Col lg=\"3\" md=\"3\">\r\n//                 <Label>Select Department</Label>\r\n//                 <CustomInput\r\n//                   value={SelectedDepartment}\r\n//                   onChange={(e) => {\r\n//                     e.target.value ? setShow(true) : setShow(false);\r\n//                     if (e.target.value == \"All_Dept_Heads\") {\r\n//                       SetAllHeadOfdepartment = [];\r\n//                       setShow(false);\r\n//                       DepartmentWithRole?.map((ele, i) => {\r\n//                         ele?.roles?.forEach((val, index) => {\r\n//                           if (val?.rolePosition == 1) {\r\n//                             SetAllHeadOfdepartment?.push(val);\r\n//                           }\r\n//                         });\r\n//                       });\r\n//                       setALLheadsofDept(SetAllHeadOfdepartment);\r\n//                       let allHeadUsers = [];\r\n//                       SetAllHeadOfdepartment?.map((ele, i) => {\r\n//                         AllUsersList?.forEach((val, i) => {\r\n//                           if (val?.rolename?._id == ele?.roleId?._id) {\r\n//                             allHeadUsers.push(val);\r\n//                           }\r\n//                         });\r\n//                       });\r\n//                       setSelectedDepartment(e.target.value);\r\n//                       setShowChildList(allHeadUsers);\r\n//                       if (allHeadUsers?.length) {\r\n//                         setChild(true);\r\n//                       }\r\n//                       let userData = JSON.parse(\r\n//                         localStorage.getItem(\"userData\")\r\n//                       );\r\n\r\n//                       let arr = [userData];\r\n//                       setShowParentList(arr);\r\n//                       // setChildList(SelectedChild);\r\n//                     } else {\r\n//                       let selectedDepartment = DepartmentWithRole?.filter(\r\n//                         (ele, i) => ele?._id == e.target.value\r\n//                       );\r\n//                       setSelectedDepartment(selectedDepartment[0]?.roles);\r\n//                     }\r\n//                   }}\r\n//                   type=\"select\">\r\n//                   <option value=\"\">--Select Department--</option>\r\n//                   <option value=\"All_Dept_Heads\">All Department Head</option>\r\n//                   {DepartmentWithRole &&\r\n//                     DepartmentWithRole?.map((ele, i) => (\r\n//                       <option\r\n//                         data-name={`${ele?._id} ${ele?.database}`}\r\n//                         value={ele?._id}>\r\n//                         {ele?.departmentName?.departmentName}\r\n//                       </option>\r\n//                     ))}\r\n//                 </CustomInput>\r\n//               </Col>\r\n//               {Show && Show && (\r\n//                 <Col lg=\"3\" md=\"3\">\r\n//                   <Label>Select Parent Role</Label>\r\n//                   <CustomInput\r\n//                     value={Parent}\r\n//                     onChange={(e) => {\r\n//                       const selected = e.target.options[e.target.selectedIndex]\r\n//                         .getAttribute(\"data-name\")\r\n//                         ?.split(\" \");\r\n//                       if (selected[0] === 1) {\r\n//                         // pass created by\r\n//                         setHeadOfDepartment(true);\r\n//                       }\r\n//                       const name = selected.slice(2).join(\" \");\r\n//                       let child = [];\r\n//                       if (name == \"Sales Person\") {\r\n//                         child = AllUsersList?.filter(\r\n//                           (ele) => ele?.rolename?.roleName == \"Customer\"\r\n//                         );\r\n//                       } else {\r\n//                         child = SelectedDepartment?.filter(\r\n//                           (ele) => ele?.rolePosition == Number(selected[0]) + 1\r\n//                         );\r\n//                       }\r\n\r\n//                       let ParentList = AllUsersList?.filter(\r\n//                         (ele) => ele?.rolename?._id == selected[1]\r\n//                       );\r\n\r\n//                       setShowParentList(ParentList);\r\n//                       setParent(e.target.value);\r\n//                       setParentName(name);\r\n//                       setSelectedRoleId(selected[1]);\r\n\r\n//                       if (child?.length) {\r\n//                         let ChildList = [];\r\n//                         if (name == \"Sales Person\") {\r\n//                           setShowChildList(child);\r\n//                           setParty(true);\r\n//                           // setShowChildList(ChildList);\r\n//                           setChild(true);\r\n//                           setChildList(child);\r\n//                         } else {\r\n//                           ChildList = AllUsersList?.filter(\r\n//                             (ele) => ele?.rolename?._id == child[0]?.roleId?._id\r\n//                           );\r\n//                           setShowChildList(ChildList);\r\n//                           setChild(true);\r\n//                           setParty(false);\r\n\r\n//                           setChildList(child);\r\n//                         }\r\n//                       } else {\r\n//                         setChildList([]);\r\n//                         setShowChildList([]);\r\n//                         setNoChild(true);\r\n//                         setChild(false);\r\n//                       }\r\n//                     }}\r\n//                     type=\"select\">\r\n//                     <option value=\"\">--Select Role--</option>\r\n//                     {SelectedDepartment &&\r\n//                       SelectedDepartment?.map((ele, i) => (\r\n//                         <option\r\n//                           data-name={`${ele?.rolePosition} ${ele?.roleId?._id} ${ele?.roleName}`}\r\n//                           value={ele?._id}>\r\n//                           {ele?.roleName} (Position-\r\n//                           {ele?.rolePosition})\r\n//                         </option>\r\n//                       ))}\r\n//                   </CustomInput>\r\n//                 </Col>\r\n//               )}\r\n//               {Child && Child ? (\r\n//                 <>\r\n//                   <Col lg=\"3\" md=\"3\">\r\n//                     <Label>Next Child</Label>\r\n//                     <Input\r\n//                       readOnly\r\n//                       type=\"text\"\r\n//                       value={ChildList[0]?.roleName && ChildList[0]?.roleName}\r\n//                     />\r\n//                   </Col>\r\n//                   {SelectedChild && SelectedChild?.length > 0 && (\r\n//                     <Col lg=\"3\" md=\"3\">\r\n//                       <Button\r\n//                         color=\"primary\"\r\n//                         onClick={(e) => handleSubmit(e)}\r\n//                         className=\"mt-2\">\r\n//                         Submit\r\n//                       </Button>\r\n//                     </Col>\r\n//                   )}\r\n//                 </>\r\n//               ) : (\r\n//                 <>\r\n//                   {NoChild && NoChild && (\r\n//                     <Col lg=\"3\" md=\"3\">\r\n//                       <Label style={{ color: \"red\" }}>\r\n//                         No Next Child Found\r\n//                       </Label>\r\n//                       <Input readOnly type=\"text\" value=\"No Child Found\" />\r\n//                     </Col>\r\n//                   )}\r\n//                 </>\r\n//               )}\r\n//             </Row>\r\n//           </div>\r\n//           <hr />\r\n//           <div className=\"p-2\">\r\n//             <Row>\r\n//               {ShowParentList && ShowParentList?.length > 0 && (\r\n//                 <Col lg=\"6\" md=\"6\" sm=\"6\">\r\n//                   <div className=\"d-flex justify-content-center\">\r\n//                     <h2>\r\n//                       <strong>\r\n//                         {ParentName && ParentName ? (\r\n//                           <> {ParentName} (Parent)</>\r\n//                         ) : (\r\n//                           \"Head\"\r\n//                         )}{\" \"}\r\n//                         Users List\r\n//                       </strong>\r\n//                     </h2>\r\n//                   </div>\r\n//                   <div\r\n//                     className=\"p-1\"\r\n//                     style={{\r\n//                       borderRight: \"1px solid black\",\r\n//                     }}>\r\n//                     <Table\r\n//                       className=\"table_heading\"\r\n//                       style={{ cursor: \"pointer\" }}\r\n//                       responsive>\r\n//                       <thead>\r\n//                         <tr>\r\n//                           <th>#</th>\r\n//                           <th>Assigned To</th>\r\n//                           <th>First Name</th>\r\n//                           <th>Last Name</th>\r\n//                           <th>Mobile Number</th>\r\n//                           <th>email</th>\r\n//                           <th>State</th>\r\n//                           <th>City</th>\r\n//                         </tr>\r\n//                       </thead>\r\n//                       <tbody>\r\n//                         {ShowParentList && ShowParentList?.length ? (\r\n//                           <>\r\n//                             {ShowParentList &&\r\n//                               ShowParentList?.map((ele, i) => {\r\n//                                 return (\r\n//                                   <tr key={ele?._id}>\r\n//                                     <th scope=\"row\">\r\n//                                       {/* {i + 1}{\" \"} */}\r\n//                                       <Input\r\n//                                         name=\"Parent\"\r\n//                                         value=\"checkbox1\"\r\n//                                         type=\"radio\"\r\n//                                         onClick={(e) => handleSaveParent(ele)}\r\n//                                       />\r\n//                                     </th>\r\n//                                     <td>\r\n//                                       {ele?.created_by?.firstName &&\r\n//                                         ele?.created_by?.firstName && (\r\n//                                           <Badge color=\"primary\">\r\n//                                             <strong>\r\n//                                               {ele?.created_by?.firstName &&\r\n//                                                 ele?.created_by?.firstName}\r\n//                                             </strong>\r\n//                                           </Badge>\r\n//                                         )}\r\n//                                     </td>\r\n//                                     <td>{ele?.firstName}</td>\r\n//                                     <td>{ele?.lastName}</td>\r\n//                                     <td>{ele?.mobileNumber}</td>\r\n//                                     <td>{ele?.email}</td>\r\n//                                     <td>{ele?.State}</td>\r\n//                                     <td>{ele?.City}</td>\r\n//                                   </tr>\r\n//                                 );\r\n//                               })}\r\n//                           </>\r\n//                         ) : null}\r\n//                       </tbody>\r\n//                     </Table>\r\n//                   </div>\r\n//                 </Col>\r\n//               )}\r\n\r\n//               {ShowChildList && ShowChildList?.length > 0 && (\r\n//                 <Col lg=\"6\" md=\"6\" sm=\"6\">\r\n//                   <div className=\"d-flex justify-content-center\">\r\n//                     <h2>\r\n//                       <strong>\r\n//                         {ChildList[0]?.roleName && ChildList[0]?.roleName ? (\r\n//                           <>\r\n//                             {\" \"}\r\n//                             {ChildList[0]?.roleName && ChildList[0]?.roleName}\r\n//                             (child)\r\n//                           </>\r\n//                         ) : (\r\n//                           <>{Party && Party ? \"Party\" : \"All Dept Head\"}</>\r\n//                         )}{\" \"}\r\n//                         Users List\r\n//                       </strong>\r\n//                     </h2>\r\n//                   </div>\r\n//                   <div className=\"p-1\">\r\n//                     <Table\r\n//                       className=\"table_heading\"\r\n//                       style={{\r\n//                         cursor: \"pointer\",\r\n//                       }}\r\n//                       responsive>\r\n//                       <thead>\r\n//                         <tr>\r\n//                           <th>#</th>\r\n//                           <th>Assigned To</th>\r\n//                           <th>First Name</th>\r\n\r\n//                           <th>Last Name</th>\r\n//                           <th>Mobile Number</th>\r\n//                           <th>email</th>\r\n//                           <th>State</th>\r\n//                           <th>City</th>\r\n//                         </tr>\r\n//                       </thead>\r\n\r\n//                       <tbody>\r\n//                         {ShowChildList &&\r\n//                           ShowChildList?.map((ele, i) => {\r\n//                             {\r\n//                               /* console.log(ele); */\r\n//                             }\r\n//                             return (\r\n//                               <tr key={ele?._id}>\r\n//                                 <th scope=\"row\">\r\n//                                   {\" \"}\r\n//                                   {ele?.created_by?.firstName &&\r\n//                                   ele?.created_by?.firstName ? null : (\r\n//                                     <>\r\n//                                       <Input\r\n//                                         value=\"checkbox1\"\r\n//                                         type=\"checkbox\"\r\n//                                         onClick={(e) => handleSaveChild(ele, e)}\r\n//                                       />\r\n//                                     </>\r\n//                                   )}\r\n//                                 </th>\r\n//                                 <td>\r\n//                                   <Badge color=\"primary\">\r\n//                                     <strong>\r\n//                                       {ele?.created_by?.firstName &&\r\n//                                         ele?.created_by?.firstName}\r\n//                                     </strong>\r\n//                                   </Badge>\r\n//                                 </td>\r\n//                                 <td>{ele?.firstName}</td>\r\n//                                 <td>{ele?.lastName}</td>\r\n//                                 <td>{ele?.mobileNumber}</td>\r\n//                                 <td>{ele?.email}</td>\r\n//                                 <td>{ele?.State}</td>\r\n//                                 <td>{ele?.City}</td>\r\n//                               </tr>\r\n//                             );\r\n//                           })}\r\n//                       </tbody>\r\n//                     </Table>\r\n//                   </div>\r\n//                 </Col>\r\n//               )}\r\n//             </Row>\r\n//           </div>\r\n//         </CardBody>\r\n//       </Card>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EditTeamRolePosition;\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Input, Label, Row, Spinner } from \"reactstrap\";\r\nimport {\r\n  Get_RoleList,\r\n  _Get,\r\n  _GetList,\r\n  _PostSave,\r\n  _Put,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nimport {\r\n  List_Department,\r\n  Save_Assigned_Role,\r\n  Update_AssignRole_InDepartment,\r\n  ViewDepartmentWise_Assign_Role,\r\n} from \"../../../../ApiEndPoint/Api\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst DepartmentRoleAssign = () => {\r\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\r\n  const [selectedRoles, setSelectedRoles] = useState([]);\r\n  const [SelectedRolesList, setSelectedRolesList] = useState([]);\r\n  const [DepartMentList, setDepartMentList] = useState([]);\r\n  const [RoleList, setRoleList] = useState([]);\r\n  const [ChangedDepartment, setChangedDepartment] = useState({});\r\n  const [Loader, setLoader] = useState(false);\r\n  const [Index, setIndex] = useState(null);\r\n\r\n  const handleDepartmentChange = (event) => {\r\n    const department = event.target.value;\r\n    let selectedDepartment = DepartMentList?.filter(\r\n      (ele) => ele?._id == department\r\n    );\r\n    // debugger;\r\n    setSelectedRolesList(selectedDepartment[0]);\r\n    setSelectedDepartment(department);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n\r\n    _Get(ViewDepartmentWise_Assign_Role, userData?.database)\r\n      .then((res) => {\r\n        // debugger;\r\n        if (res?.Department?.length) {\r\n          setDepartMentList(res?.Department);\r\n        }\r\n\r\n        // setDepartmentWithRole(res?.Department);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    // let URL = `${List_Department}/${userData?.database}`;\r\n    // _GetList(URL)\r\n    //   .then((res) => {\r\n    //     let Departments = res?.Department?.filter(\r\n    //       (ele) => ele?.status == \"Active\"\r\n    //     );\r\n\r\n    //     // setDepartMentList(Departments);\r\n    //   })\r\n    //   .catch((err) => {\r\n    //     console.log(err);\r\n    //   });\r\n    RoleLists();\r\n  }, []);\r\n\r\n  const RoleLists = () => {\r\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    Get_RoleList(userData?._id, userData?.database)\r\n      .then((res) => {\r\n        let WithoutAssign = res?.Role?.filter(\r\n          (ele) =>\r\n            ele?.assign == 0 &&\r\n            ele?.roleName != \"SuperAdmin\" &&\r\n            ele?.roleName != \"Admin\"\r\n        );\r\n        let Position = userData?.rolename?.position;\r\n        let ShowList = res?.Role?.filter((ele, i) => ele?.position > Position);\r\n\r\n        setRoleList(WithoutAssign);\r\n        // setRoleList(res?.Role);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const handleRoleChange = (role, i) => {\r\n    setIndex(i);\r\n    const roles = [...selectedRoles];\r\n\r\n    if (roles?.includes(role)) {\r\n      // Remove role if it's already selected\r\n      roles?.splice(roles.indexOf(role), 1);\r\n    } else {\r\n      // Add role if it's not selected\r\n      roles.push(role);\r\n    }\r\n\r\n    setSelectedRoles(roles);\r\n  };\r\n\r\n  const handleAssignRoles = async () => {\r\n    // Implement your logic to assign roles to the selected department\r\n    let userinfo = JSON.parse(localStorage.getItem(\"userData\"));\r\n    setLoader(true);\r\n    let currentDepartmentWithRole = ChangedDepartment?.roles?.map((val) => {\r\n      return {\r\n        database: val?.database,\r\n        roleName: val?.roleName,\r\n        roleId: val?.roleId?._id,\r\n        rolePosition: val?.rolePosition,\r\n      };\r\n    });\r\n    // let allRoles = [];\r\n    // DepartMentList?.forEach((ele, i) => {\r\n    //   let a = ele?.roles?.map((val) => {\r\n    //     return {\r\n    //       database: val?.database,\r\n    //       roleName: val?.roleName,\r\n    //       roleId: val?.roleId?._id,\r\n    //       rolePosition: val?.rolePosition,\r\n    //     };\r\n    //   });\r\n    //   allRoles.push(a);\r\n    // });\r\n    // let allroleswithPosition = allRoles?.flat();\r\n    // console.log(allroleswithPosition);\r\n    let payload = {\r\n      roles: currentDepartmentWithRole,\r\n    };\r\n\r\n    await _Put(Update_AssignRole_InDepartment, ChangedDepartment?._id, payload)\r\n      .then((res) => {\r\n        console.log(res);\r\n        setSelectedRoles([]);\r\n        setLoader(false);\r\n\r\n        swal(\"Roles Changed Successfully\");\r\n        RoleLists();\r\n      })\r\n      .catch((err) => {\r\n        setLoader(false);\r\n\r\n        console.log(err);\r\n        swal(\"Something went wrong\");\r\n      });\r\n    // You can send this data to your server or manage it in your state\r\n  };\r\n  if (Loader) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          marginTop: \"20rem\",\r\n        }}>\r\n        <Spinner\r\n          style={{\r\n            height: \"4rem\",\r\n            width: \"4rem\",\r\n          }}\r\n          color=\"primary\">\r\n          Loading...\r\n        </Spinner>\r\n      </div>\r\n    );\r\n  }\r\n  const handleAddRanking = (e, data, i, id) => {\r\n    let AllSelected = [...SelectedRolesList?.roles];\r\n    let AllDeptList = [...DepartMentList];\r\n    // let selectedrole = AllSelected?.filter((ele) => ele?._id == id);\r\n    let index = DepartMentList?.indexOf(SelectedRolesList);\r\n    AllSelected[i][\"rolePosition\"] = Number(e.target.value);\r\n    AllDeptList[index][\"roles\"] = AllSelected;\r\n    setDepartMentList(AllDeptList);\r\n    setChangedDepartment(AllDeptList[index]);\r\n    // debugger;\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"card p-3\">\r\n        <Row>\r\n          <Col></Col>\r\n\r\n          {/* )} */}\r\n\r\n          <Col lg=\"2\">\r\n            <Route\r\n              render={({ history }) => (\r\n                <Button\r\n                  style={{ cursor: \"pointer\" }}\r\n                  className=\"float-right mr-1\"\r\n                  color=\"primary\"\r\n                  onClick={() => history.goBack()}>\r\n                  {\" \"}\r\n                  Back\r\n                  {/* <FaPlus size={15} /> Create User */}\r\n                </Button>\r\n              )}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <div className=\"d-flex justify-content-center\">\r\n          <h3 className=\"mb-3 mt-2\">\r\n            <strong>Assigned Department and Roles</strong>\r\n          </h3>\r\n        </div>\r\n        <Row>\r\n          <Col lg=\"4\" sm=\"6\" md=\"4\">\r\n            <Label>Select Department:</Label>\r\n            <select\r\n              id=\"departments\"\r\n              className=\"form-control\"\r\n              onChange={(e) => handleDepartmentChange(e)}\r\n              value={selectedDepartment}>\r\n              <option value=\"\">--Select Department--</option>\r\n              {DepartMentList &&\r\n                DepartMentList?.map((department, i) => (\r\n                  <option key={department?._id} value={department?._id}>\r\n                    {department?.departmentName?.departmentName}\r\n                  </option>\r\n                ))}\r\n            </select>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n\r\n        <div className=\"d-flex justify-content-center\">\r\n          <h3 className=\"mb-3\">\r\n            {SelectedRolesList && SelectedRolesList?.roles ? (\r\n              <>\r\n                <strong>\r\n                  Selected Roles and Position(Position should no be the Same)\r\n                </strong>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <strong>No Roles Assigned</strong>\r\n              </>\r\n            )}\r\n          </h3>\r\n        </div>\r\n        <Row>\r\n          {SelectedRolesList &&\r\n            SelectedRolesList?.roles?.map((role, i) => (\r\n              <Col lg=\"6\" sm=\"12\" md=\"6\">\r\n                <div\r\n                  key={role?._id}\r\n                  className=\"form-label-group d-flex justify-content-space-between\">\r\n                  {/* <input\r\n                    className=\"mt-1\"\r\n                    required\r\n                    type=\"checkbox\"\r\n                    style={{\r\n                      marginRight: \"3px\",\r\n                      height: \"22px\",\r\n                      width: \"22px\",\r\n                    }}\r\n                    id={role}\r\n                    value={role}\r\n                    //   checked={selectedRoles?.includes(role?._id)}\r\n                    onChange={() => handleRoleChange(role, i)}\r\n                  /> */}\r\n                  <span\r\n                    className=\"mb-1 ml-1\"\r\n                    style={{ marginRight: \"20px\", fontSize: \"25px\" }}>\r\n                    {role?.roleName?.length > 12 ? (\r\n                      <>{role?.roleName}</>\r\n                    ) : (\r\n                      <>{role?.roleName}</>\r\n                    )}\r\n                  </span>\r\n                  {role?.rolePosition == \"1\" ? (\r\n                    <>\r\n                      <span\r\n                        className=\"input\"\r\n                        style={{\r\n                          position: \"absolute\",\r\n                          right: 20,\r\n                          width: \"100px\",\r\n                        }}>\r\n                        <Input\r\n                          value={role?.rolePosition}\r\n                          readOnly\r\n                          onChange={(e) =>\r\n                            handleAddRanking(e, role, i, role?._id)\r\n                          }\r\n                          placeholder=\"Ex. 1 or 2 or 3\"\r\n                          type=\"number\"\r\n                        />\r\n                      </span>\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <span\r\n                        className=\"input\"\r\n                        style={{\r\n                          position: \"absolute\",\r\n                          right: 20,\r\n                          width: \"100px\",\r\n                        }}>\r\n                        <Input\r\n                          value={role?.rolePosition}\r\n                          onChange={(e) =>\r\n                            handleAddRanking(e, role, i, role?._id)\r\n                          }\r\n                          placeholder=\"Ex. 1 or 2 or 3\"\r\n                          type=\"number\"\r\n                        />\r\n                      </span>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            ))}\r\n        </Row>\r\n        <div className=\"d-flex justify-content-center mt-3\">\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={handleAssignRoles}\r\n            // disabled={!selectedDepartment || selectedRoles.length === 0}\r\n          >\r\n            Change Roles\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DepartmentRoleAssign;\r\n"],"sourceRoot":""}