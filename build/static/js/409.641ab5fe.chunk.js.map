{"version":3,"sources":["views/apps/freshlist/customer/HRM/HrmPractskill/PracticsEdit.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","PracticsEditform","useState","answerType","setAnswerType","question","option","desc","data","setData","id","useParams","history","useHistory","useEffect","_Get","Hrm_SkillViewOne","response","Question","console","log","fetchData","handleSubmit","e","preventDefault","_Put","Hrm_SkillUpdate","push","error","handleInputChange","target","name","value","color","type","onClick","goBack","onSubmit","form","md","for","placeholder","onChange","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/409.641ab5fe.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, FormGroup, Label, Input, Button, Form, CardBody, Card, CardHeader } from 'reactstrap';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Hrm_SkillViewOne, Hrm_SkillUpdate } from '../../../../../../ApiEndPoint/Api';\r\nimport { _Put, _Get } from '../../../../../../ApiEndPoint/ApiCalling';\r\nconst PracticsEditform = () => {\r\n    const [answerType, setAnswerType] = useState('');\r\n    const [data, setData] = useState({\r\n        question: '',\r\n        option: '',\r\n        desc: '',\r\n    });\r\n    const { id } = useParams();\r\n    const history = useHistory();\r\n    // parameter's : question,option ,rightAnswer,desc\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await _Get(Hrm_SkillViewOne, id);\r\n                setData(response?.Question)\r\n                console.log(response?.Question)\r\n                if (!!response?.Question?.desc) {\r\n                    setAnswerType(\"description\")\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [id]);\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await _Put(Hrm_SkillUpdate, id, data);\r\n            history.push('/app/ajgroup/HRM/practiceList')\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setData({ ...data, [name]: value });\r\n\r\n        if (name === 'option') {\r\n            setAnswerType(value);\r\n        }\r\n    };\r\n    const handleBack = () => {\r\n        history.goBack();\r\n    }\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <h2> Skills Question Form</h2>\r\n                <Button color=\"btn btn-danger\" type='button' onClick={handleBack}>Back</Button>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <Form onSubmit={handleSubmit}>\r\n\r\n                    <Row form>\r\n                        <Col md={6}>\r\n                            <FormGroup>\r\n                                <Label for=\"exampleEmail\">Input Type Question</Label>\r\n                                <Input type=\"text\" name=\"question\" id=\"question\" placeholder=\"Enter your question\" value={data?.question} onChange={handleInputChange} />\r\n                            </FormGroup>\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <FormGroup>\r\n                                <Label for=\"exampleSelect\">Answer Type</Label>\r\n                                <Input type=\"select\" name=\"option\" id=\"option\" value={data?.option} onChange={handleInputChange}>\r\n                                    <option value=\"\">Select an option</option>\r\n                                    <option value=\"yes\">yes</option>\r\n                                    <option value=\"no\">no</option>\r\n                                    <option value=\"description\">Description</option>\r\n                                </Input>\r\n                            </FormGroup>\r\n                            {answerType === \"description\" && (\r\n                                <FormGroup>\r\n                                    <Label for=\"exampleTextarea\">Description</Label>\r\n                                    <Input type=\"textarea\" name=\"desc\" id=\"desc\" value={data?.desc} onChange={handleInputChange} />\r\n                                </FormGroup>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                    <Button type=\"submit\" color=\"primary\">Update</Button>\r\n                </Form>\r\n            </CardBody>\r\n        </Card >\r\n    );\r\n};\r\n\r\nexport default PracticsEditform;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}