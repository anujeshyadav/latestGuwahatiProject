{"version":3,"sources":["views/apps/freshlist/customer/HRM/HrmPractskill/PracticsView.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","PracticsViewform","useState","answerType","setAnswerType","question","option","desc","data","setData","id","useParams","history","useHistory","useEffect","_Get","Hrm_SkillViewOne","response","Question","console","log","fetchData","handleSubmit","e","preventDefault","_Put","Hrm_SkillUpdate","resetForm","error","handleInputChange","target","name","value","onSubmit","color","type","onClick","goBack","form","md","for","readOnly","placeholder","onChange","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/410.224bc07f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, FormGroup, Label, Input, Button, Form, CardBody, Card, CardHeader } from 'reactstrap';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Hrm_SkillViewOne, Hrm_SkillUpdate } from '../../../../../../ApiEndPoint/Api';\r\nimport { _Put, _Get } from '../../../../../../ApiEndPoint/ApiCalling';\r\nconst PracticsViewform = () => {\r\n  const [answerType, setAnswerType] = useState('');\r\n  const [data, setData] = useState({\r\n    question: '',\r\n    option: '',\r\n    desc: '',\r\n  });\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  // parameter's : question,option ,rightAnswer,desc\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await _Get(Hrm_SkillViewOne, id);\r\n        setData(response?.Question)\r\n        if (!!response?.Question?.desc) {\r\n          setAnswerType(\"description\")\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [id]);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await _Put(Hrm_SkillUpdate, id, data);\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData({ ...data, [name]: value });\r\n\r\n    if (name === 'option') {\r\n      setAnswerType(value);\r\n    }\r\n  };\r\n  const handleBack = () => {\r\n    history.goBack();\r\n  }\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Card>\r\n        <CardHeader>\r\n          <h2> Skills Question Form</h2>\r\n          <Button color=\"btn btn-danger\" type='button' onClick={handleBack}>Back</Button>\r\n        </CardHeader>\r\n        <CardBody>\r\n          <Row form>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"exampleEmail\">Input Type Question</Label>\r\n                <Input readOnly type=\"text\" name=\"question\" id=\"question\" placeholder=\"Enter your question\" value={data?.question} onChange={handleInputChange} />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"exampleSelect\">Answer Type</Label>\r\n                <Input readOnly type=\"text\" name=\"option\" id=\"option\" value={data?.option} onChange={handleInputChange}>\r\n                  <option value=\"\">Select an option</option>\r\n                  <option value=\"Yes\">Yes</option>\r\n                  <option value=\"No\">No</option>\r\n                  <option value=\"Description\">Description</option>\r\n                </Input>\r\n              </FormGroup>\r\n              {answerType === \"description\" && (\r\n                <FormGroup>\r\n                  <Label for=\"exampleTextarea\">Description</Label>\r\n                  <Input readOnly type=\"textarea\" name=\"desc\" id=\"desc\" value={data?.desc} onChange={handleInputChange} />\r\n                </FormGroup>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n        </CardBody>\r\n      </Card>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PracticsViewform;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}