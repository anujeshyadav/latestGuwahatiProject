{"version":3,"sources":["views/apps/freshlist/customer/HRM/HrmTraining/trainingEdit.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","TrainingEditForm","useState","branch","trainer","trainingType","trainingCost","employee","startDate","endDate","description","data","setData","id","useParams","history","useHistory","useEffect","_Get","Hrm_TrainViewOne","response","Training","console","log","fetchData","handleSubmit","e","preventDefault","_Put","Hrm_TrainUpdate","push","handleInputChange","target","name","value","style","width","marginLeft","color","type","onClick","goBack","md","onSubmit","for","onChange","setBranch","form","setTrainer","row","sm","size","offset","_excluded","propTypes","children","PropTypes","node","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/411.e2660ba1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, Row, Col, Form, FormGroup, Label, Input, Button, CardBody, CardHeader } from 'reactstrap';\r\nimport { useParams, useHistory } from \"react-router-dom\"\r\nimport { Hrm_TrainViewOne, Hrm_TrainUpdate } from '../../../../../../ApiEndPoint/Api';\r\nimport { _Get, _Put } from '../../../../../../ApiEndPoint/ApiCalling';\r\n\r\nconst TrainingEditForm = () => {\r\n    const [data, setData] = useState({\r\n        branch: '',\r\n        trainer: '',\r\n        trainingType: '',\r\n        trainingCost: '',\r\n        employee: '',\r\n        startDate: '',\r\n        endDate: '',\r\n        description: '',\r\n    })\r\n    const { id } = useParams();\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await _Get(Hrm_TrainViewOne, id);\r\n                setData(response.Training);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [id]);\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await _Put(Hrm_TrainUpdate, id, data);\r\n            history.push('/app/ajgroup/HRM/trainList')\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    };\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setData({ ...data, [name]: value })\r\n    };\r\n    const handleBack = () => {\r\n        history.goBack();\r\n    }\r\n    return (\r\n        <Card style={{ width: '60%', marginLeft: '20%' }}>\r\n            <CardHeader>\r\n                <h2>Create Training</h2>\r\n                <Button color=\" btn btn-danger\" type=\"button\" onClick={handleBack}>\r\n                    Back\r\n                </Button>\r\n            </CardHeader>\r\n            <CardBody style={{ marginLeft: '20%' }}>\r\n\r\n                <Row md={10}>\r\n                    <Col md={10}>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"branch\">Branch</Label>\r\n                                <Input type=\"select\" name=\"branch\" id=\"branch\" value={data.branch} onChange={(e) => setBranch(e.target.value)}>\r\n                                    <option>Select Branch</option>\r\n                                    <option>Branch 1</option>\r\n                                    <option>Branch 2</option>\r\n                                    <option>Branch 3</option>\r\n                                    {/* Add more branches */}\r\n                                </Input>\r\n                            </FormGroup>\r\n                            <Row form>\r\n                                <Col md={6}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"trainer\">Trainer</Label>\r\n                                        <Input type=\"select\" name=\"trainer\" id=\"trainer\" value={data.trainer} onChange={(e) => setTrainer(e.target.value)}>\r\n                                            <option>Select Trainer</option>\r\n                                            <option>Internal</option>\r\n                                            <option>Teresa</option>\r\n                                            {/* Add more trainers */}\r\n                                        </Input>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"trainingType\">Training Type</Label>\r\n                                        <Input type=\"text\" name=\"trainingType\" id=\"trainingType\" value={data.trainingType} onChange={handleInputChange} />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            <FormGroup>\r\n                                <Label for=\"trainingCost\">Training Cost</Label>\r\n                                <Input type=\"text\" name=\"trainingCost\" id=\"trainingCost\" value={data.trainingCost} onChange={handleInputChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"employee\">Employee</Label>\r\n                                <Input type=\"select\" name=\"employee\" id=\"employee\" value={data.employee} onChange={handleInputChange}>\r\n                                    <option>Select Employee</option>\r\n                                    <option>Employee 1</option>\r\n                                    <option>Employee 2</option>\r\n                                    <option>Employee 3</option>\r\n                                    {/* Add more employees */}\r\n                                </Input>\r\n                            </FormGroup>\r\n                            <Row form>\r\n                                <Col md={6}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"startDate\">Start Date</Label>\r\n                                        <Input type=\"date\" name=\"startDate\" id=\"startDate\" value={data.startDate} onChange={handleInputChange} />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormGroup>\r\n                                        <Label for=\"endDate\">End Date</Label>\r\n                                        <Input type=\"date\" name=\"endDate\" id=\"endDate\" value={data.endDate} onChange={handleInputChange} />\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            <FormGroup>\r\n                                <Label for=\"description\">Description</Label>\r\n                                <Input type=\"textarea\" name=\"description\" id=\"description\" value={data.description} onChange={handleInputChange} />\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col sm={{ size: 8, offset: 4 }}>\r\n                                    <Button color=\"primary\" type=\"submit\">\r\n                                        Update\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TrainingEditForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}