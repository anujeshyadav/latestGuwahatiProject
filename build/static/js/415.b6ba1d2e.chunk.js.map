{"version":3,"sources":["views/apps/freshlist/customer/HRM/HrmjpbApp/JobapView.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","JobApView","useState","job","name","email","mobileNo","status","data","setData","history","useHistory","id","useParams","useEffect","_Get","Hrm_AppviewOne","response","Job","console","log","fetchData","handleSubmit","e","preventDefault","_Put","Hrm_AppUpdate","handleInputChange","target","value","color","type","onClick","goBack","onSubmit","row","for","sm","onChange","readOnly","_excluded","propTypes","children","PropTypes","node","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/415.b6ba1d2e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from \"react-router-dom\"\r\nimport { Card, CardBody, Col, Form, FormGroup, Label, Input, Button, Alert, CardHeader } from 'reactstrap';\r\nimport { Hrm_AppUpdate, Hrm_AppviewOne } from '../../../../../../ApiEndPoint/Api';\r\nimport { _Get, _Put } from '../../../../../../ApiEndPoint/ApiCalling';\r\n\r\nconst JobApView = () => {\r\n    const [data, setData] = useState({\r\n        job: '',\r\n        name: '',\r\n        email: '',\r\n        mobileNo: '',\r\n        status: '',\r\n    });\r\n\r\n    const history = useHistory();\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await _Get(Hrm_AppviewOne, id);\r\n\r\n                setData(response.Job);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [id]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            await _Put(Hrm_AppUpdate, id, data);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n\r\n\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setData({ ...data, [name]: value });\r\n    };\r\n    const handleBack = () => {\r\n        history.goBack();\r\n    }\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <h2>Applied/Result Form</h2>\r\n\r\n                <Button color=\"danger\" type=\"button\" onClick={handleBack}>\r\n                    Back\r\n                </Button>\r\n\r\n            </CardHeader>\r\n            <CardBody>\r\n\r\n\r\n                <Form onSubmit={handleSubmit}>\r\n                    <FormGroup row>\r\n                        <Label for=\"job\" sm={4}>\r\n                            Job\r\n                        </Label>\r\n                        <Col sm={8}>\r\n                            <Input\r\n                                name=\"job\"\r\n                                id=\"job\"\r\n                                value={data?.job}\r\n                                onChange={handleInputChange}\r\n                                readOnly\r\n                            >\r\n                                <option value=\"\">Select Job</option>\r\n                                <option value=\"job1\">Job 1</option>\r\n                                <option value=\"job2\">Job 2</option>\r\n                            </Input>\r\n                        </Col>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup row>\r\n                        <Label for=\"name\" sm={4}>\r\n                            Name\r\n                        </Label>\r\n                        <Col sm={8}>\r\n                            <Input\r\n\r\n                                name=\"name\"\r\n                                id=\"name\"\r\n                                value={data?.name}\r\n                                onChange={handleInputChange}\r\n                                readOnly\r\n                            />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"email\" sm={4}>\r\n                            Email\r\n                        </Label>\r\n                        <Col sm={8}>\r\n                            <Input\r\n\r\n                                name=\"email\"\r\n                                id=\"email\"\r\n                                value={data?.email}\r\n                                onChange={handleInputChange}\r\n                                readOnly\r\n                            />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Label for=\"phoneNumber\" sm={4}>\r\n                            Phone Number\r\n                        </Label>\r\n                        <Col sm={8}>\r\n                            <Input\r\n\r\n                                name=\"mobileNo\"\r\n                                id=\"mobileNo\"\r\n                                value={data?.mobileNo}\r\n                                onChange={handleInputChange}\r\n                                readOnly\r\n                            />\r\n                        </Col>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup row>\r\n                        <Label for=\"status\" sm={4}>\r\n                            Status\r\n                        </Label>\r\n                        <Col sm={8}>\r\n                            <Input\r\n\r\n                                name=\"status\"\r\n                                id=\"status\"\r\n                                value={data?.status}\r\n                                onChange={handleInputChange}\r\n                                readOnly\r\n                            >\r\n                                <option value=\"\">Select </option>\r\n                                <option value=\"Active\">Active</option>\r\n                                <option value=\"Deactive\">Deactive</option>\r\n                            </Input>\r\n                        </Col>\r\n                    </FormGroup>\r\n\r\n                </Form>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default JobApView;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}