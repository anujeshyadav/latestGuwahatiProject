{"version":3,"sources":["views/apps/freshlist/customer/HRM/Setrules/rulesform.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","SetRules","useState","rule","setRule","calculationType","setCalculationType","inputType","setInputType","calculationValue","setCalculationValue","value","setValue","durationType","setDurationType","title","setTitle","target","setTargetType","bonusType","setInputBonusType","loanType","setLoanType","handleSubmit","e","preventDefault","console","log","sm","md","className","onSubmit","for","type","name","id","onChange","newRule","placeholder","includes","color","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/431.8aec508e.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport { Button, Card, CardBody, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\r\n\r\nconst SetRules = () => {\r\n    const [rule, setRule] = useState('');\r\n    const [calculationType, setCalculationType] = useState('');\r\n    const [inputType, setInputType] = useState('');\r\n    const [calculationValue, setCalculationValue] = useState('');\r\n    const [value, setValue] = useState('');\r\n    const [durationType, setDurationType] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [target, setTargetType] = useState('');\r\n    const [bonusType, setInputBonusType] = useState('');\r\n    const [loanType, setLoanType] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        console.log('Rule:', rule);\r\n        console.log('Calculation Type:', calculationType);\r\n        console.log('Input Type:', inputType);\r\n        console.log('Calculation Value:', calculationValue);\r\n        console.log('Duration Type:', durationType);\r\n    };\r\n\r\n\r\n    const handleTitleChange = (e) => {\r\n\r\n        if (title !== e.target.value) {\r\n            setTitle('');\r\n        }\r\n        setTitle(e.target.value);\r\n\r\n    };\r\n\r\n    const handleRuleChange = (newRule) => {\r\n        setRule(newRule);\r\n        setTitle('');\r\n        setCalculationType('');\r\n        setInputType('');\r\n        setCalculationValue('');\r\n        setDurationType('');\r\n        setValue('');\r\n        setLoanType('');\r\n        setInputBonusType('');\r\n      \r\n    };\r\n\r\n    const renderRuleSpecificFields = () => {\r\n        if (rule === 'ALLOWANCE') {\r\n            return (\r\n                <>\r\n                    <FormGroup>\r\n                        <Label for=\"inputType\">Distance</Label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            name=\"inputType\"\r\n                            id=\"inputType\"\r\n                            value={inputType}\r\n                            placeholder=\"Enter Distance\"\r\n                            onChange={(e) => setInputType(e.target.value)}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                </>\r\n            );\r\n        }\r\n\r\n        if (rule === 'INCENTIVE') {\r\n            return (\r\n                <>\r\n                    <FormGroup>\r\n                        <Label for=\"targetType\">Target Percentage</Label>\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"targetType\"\r\n                            id=\"targetType\"\r\n                            value={target}\r\n                            placeholder=\"Enter Target Percentage\"\r\n                            onChange={(e) => setTargetType(e.target.value)}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"ValueInput\"> Target Value</Label>\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"ValueInput\"\r\n                            id=\"ValueInput\"\r\n                            value={value}\r\n                            placeholder=\"Enter Value\"\r\n                            onChange={(e) => setValue(e.target.value)}\r\n                        />\r\n                    </FormGroup>\r\n\r\n\r\n                </>\r\n            );\r\n        }\r\n\r\n        if (rule === 'LOAN') {\r\n            return (\r\n                <>\r\n\r\n                    <FormGroup>\r\n                        <Label for=\"inputType\">Loan Amount</Label>\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"inputType\"\r\n                            id=\"inputType\"\r\n                            value={loanType}\r\n                            placeholder=\"Enter Loan Amount\"\r\n                            onChange={(e) => setLoanType(e.target.value)}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"durationTypeDropdown\">Time Period</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"durationType\"\r\n                            id=\"durationTypeDropdown\"\r\n                            value={durationType}\r\n                            onChange={(e) => setDurationType(e.target.value)}\r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"monthly\">Monthly</option>\r\n                            <option value=\"yearly\">Yearly</option>\r\n\r\n                        </Input>\r\n                    </FormGroup>\r\n                </>\r\n            );\r\n        }\r\n\r\n        if (rule === 'BONUS') {\r\n            return (\r\n                <>\r\n                    <FormGroup>\r\n                        <Label for=\"inputType\">Bonus Amount</Label>\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"inputType\"\r\n                            id=\"inputType\"\r\n                            value={bonusType}\r\n                            placeholder=\"Enter Bonus Amount\"\r\n                            onChange={(e) => setInputBonusType(e.target.value)}\r\n                        />\r\n                    </FormGroup>\r\n\r\n\r\n                </>\r\n            );\r\n        }\r\n\r\n        if (['ACTUAL (BILL)', 'PF', 'OVERTIME', 'ADVANCE', 'EMI'].includes(rule)) {\r\n            return (\r\n                <>\r\n                    {/* <FormGroup>\r\n                        <Label for=\"calculationTypeDropdown\">Calculation Type</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"calculationType\"\r\n                            id=\"calculationTypeDropdown\"\r\n                            value={calculationType}\r\n                            onChange={(e) => setCalculationType(e.target.value)}\r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"percentage\">Percentage</option>\r\n                            <option value=\"fixed\">Fixed</option>\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"calculationValueInput\">Calculation Value</Label>\r\n                        <Input\r\n                            type=\"number\"\r\n                            name=\"calculationValue\"\r\n                            id=\"calculationValueInput\"\r\n                            value={calculationValue}\r\n                            placeholder=\"Enter Calculation Value\"\r\n                            onChange={(e) => setCalculationValue(e.target.value)}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"durationTypeDropdown\">Duration Type</Label>\r\n                        <Input\r\n                            type=\"select\"\r\n                            name=\"durationType\"\r\n                            id=\"durationTypeDropdown\"\r\n                            value={durationType}\r\n                            onChange={(e) => setDurationType(e.target.value)}\r\n\r\n                        >\r\n                            <option value=\"\">Select</option>\r\n                            <option value=\"monthly\">Monthly</option>\r\n                            <option value=\"yearly\">Yearly</option>\r\n                            <option value=\"daily\">Daily</option>\r\n                            <option value=\"one-time\">One Time</option>\r\n\r\n                        </Input>\r\n                    </FormGroup> */}\r\n                </>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n            <Col sm=\"12\" md=\"6\" className=\"mx-auto\">\r\n                <Card>\r\n                    <CardBody>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <h1>Set Rules</h1>\r\n\r\n\r\n                            <FormGroup>\r\n                                <Label for=\"ruleDropdown\">Rule</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"Rule\"\r\n                                    id=\"ruleDropdown\"\r\n                                    value={rule}\r\n                                    onChange={(e) => handleRuleChange(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"ALLOWANCE\">ALLOWANCE</option>\r\n                                    <option value=\"INCENTIVE\">INCENTIVE</option>\r\n                                    <option value=\"LOAN\">LOAN</option>\r\n                                    <option value=\"BONUS\">BONUS</option>\r\n                                    <option value=\"ACTUAL (BILL)\">ACTUAL (BILL)</option>\r\n                                    <option value=\"PF\">PF</option>\r\n                                    <option value=\"OVERTIME\">OVERTIME</option>\r\n                                    <option value=\"ADVANCE\">ADVANCE</option>\r\n                                    <option value=\"EMI\">EMI</option>\r\n                                </Input>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"title\">Title</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"title\"\r\n                                    id=\"title\"\r\n                                    value={title}\r\n                                    placeholder=\"Enter title...\"\r\n                                    onChange={handleTitleChange}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"calculationTypeDropdown\">Calculation Type</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"calculationType\"\r\n                                    id=\"calculationTypeDropdown\"\r\n                                    value={calculationType}\r\n                                    onChange={(e) => setCalculationType(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"percentage\">Percentage</option>\r\n                                    <option value=\"fixed\">Fixed</option>\r\n                                </Input>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"calculationValue\">Calculation Value</Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"calculationValue\"\r\n                                    id=\"calculationValue\"\r\n                                    value={calculationValue}\r\n                                    placeholder=\"Enter Calculation Value\"\r\n                                    onChange={(e) => setCalculationValue(e.target.value)}\r\n                                />\r\n                            </FormGroup>\r\n\r\n                            <FormGroup>\r\n                                <Label for=\"durationTypeDropdown\">Duration Type</Label>\r\n                                <Input\r\n                                    type=\"select\"\r\n                                    name=\"durationType\"\r\n                                    id=\"durationTypeDropdown\"\r\n                                    value={durationType}\r\n                                    onChange={(e) => setDurationType(e.target.value)}\r\n                                >\r\n                                    <option value=\"\">Select</option>\r\n                                    <option value=\"monthly\">Monthly</option>\r\n                                    <option value=\"yearly\">Yearly</option>\r\n                                    <option value=\"daily\">Daily</option>\r\n                                    <option value=\"one-time\">One Time</option>\r\n                                </Input>\r\n                            </FormGroup>\r\n\r\n                            {renderRuleSpecificFields()}\r\n\r\n                            <Button color=\"primary\" type=\"submit\">\r\n                                Submit\r\n                            </Button>\r\n                        </Form>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default SetRules;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}