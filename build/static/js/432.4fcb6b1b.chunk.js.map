{"version":3,"sources":["views/apps/freshlist/customer/HRM/TCPA/bonusform.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["BonusForm","useState","department","designation","employeeName","appraisalMonth","targetRating","overallRating","formData","setFormData","submittedData","setSubmittedData","handleChange","e","target","name","value","prevState","handleSubmit","preventDefault","console","log","md","onSubmit","for","type","placeholder","id","onChange","color","striped","map","data","index","key","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","className","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/432.4fcb6b1b.chunk.js","sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { Row, Col, Form, FormGroup, Label, Input, Button, Card, CardBody, Table } from 'reactstrap';\r\n\r\nconst BonusForm = () => {\r\n    const [formData, setFormData] = useState({\r\n        department: '',\r\n        designation: '',\r\n        employeeName: '',\r\n        appraisalMonth: '',\r\n        targetRating: '',\r\n        overallRating: ''\r\n    });\r\n\r\n    const [submittedData, setSubmittedData] = useState([]);\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prevState => ({\r\n            ...prevState,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // Handle form submission here\r\n        console.log(formData);\r\n        setSubmittedData([...submittedData, formData]); // Add form data to submittedData array\r\n        setFormData({\r\n            department: '',\r\n            designation: '',\r\n            employeeName: '',\r\n            appraisalMonth: '',\r\n            targetRating: '',\r\n            overallRating: ''\r\n        }); // Reset form data\r\n    };\r\n\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <h1>Bonus Form</h1>\r\n                <Row>\r\n                    <Col md={6}>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"department\">Department</Label>\r\n                                <Input type=\"text\" placeholder='Enter your Department Name' name=\"department\" id=\"department\" value={formData.department} onChange={handleChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"designation\">Designation</Label>\r\n                                <Input type=\"text\" placeholder='Enter Designation' name=\"designation\" id=\"designation\" value={formData.designation} onChange={handleChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"employeeName\">Employee Name</Label>\r\n                                <Input type=\"text\" placeholder='Employe Name' name=\"employeeName\" id=\"employeeName\" value={formData.employeeName} onChange={handleChange} />\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col md={6}>\r\n                        <Form onSubmit={handleSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"appraisalMonth\">Appraisal Month</Label>\r\n                                <Input type=\"text\" name=\"appraisalMonth\" id=\"appraisalMonth\" value={formData.appraisalMonth} onChange={handleChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"targetRating\">Target Rating</Label>\r\n                                <Input type=\"text\" placeholder='Enter Rate' name=\"targetRating\" id=\"targetRating\" value={formData.targetRating} onChange={handleChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"overallRating\">Overall Rating</Label>\r\n                                <Input type=\"text\" placeholder='Overall Rating' name=\"overallRating\" id=\"overallRating\" value={formData.overallRating} onChange={handleChange} />\r\n                            </FormGroup>\r\n                            <Button type=\"submit\" color=\"primary\">Submit</Button>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Table striped>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Department</th>\r\n                                    <th>Designation</th>\r\n                                    <th>Employee Name</th>\r\n                                    <th>Appraisal Month</th>\r\n                                    <th>Target Rating</th>\r\n                                    <th>Overall Rating</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {submittedData.map((data, index) => (\r\n                                    <tr key={index}>\r\n                                        <td>{data.department}</td>\r\n                                        <td>{data.designation}</td>\r\n                                        <td>{data.employeeName}</td>\r\n                                        <td>{data.appraisalMonth}</td>\r\n                                        <td>{data.targetRating}</td>\r\n                                        <td>{data.overallRating}</td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n};\r\nexport default BonusForm;\r\n\r\n\r\n\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}