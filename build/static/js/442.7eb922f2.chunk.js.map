{"version":3,"sources":["views/apps/freshlist/customer/Support/CreateSupport.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["CreateSupport","useState","CreatAccountView","setCreatAccountView","formData","setFormData","dropdownValue","setdropdownValue","index","setindex","error","setError","handleInputChange","useContext","UserContext","e","type","i","target","name","value","checked","test","length","useEffect","console","log","CreateAccountView","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","CreateAccount","input","permissions","role","catch","err","render","history","className","color","onClick","goBack","onSubmit","preventDefault","swal","CreateAccountSave","status","window","location","reload","lg","md","MyDropdown","dropdown","label","_text","required","onChange","option","map","key","_attributes","ele","roles","find","includes","phoneinput","sm","inputClass","country","onKeyDown","countryCodeEditable","phone","style","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","placeholder","CheckBox","marginRight","size","Radiobutton","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/442.7eb922f2.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport { Route } from \"react-router-dom\";\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateAccountSave,\r\n  CreateAccountView,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../../context/Context\";\r\n\r\nconst CreateSupport = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const createUserXmlView = useContext(UserContext);\r\n  // const [selectedCountry, setSelectedCountry] = useState(null);\r\n  // const [selectedState, setSelectedState] = useState(null);\r\n  // const [selectedCity, setSelectedCity] = useState(null);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    console.log(formData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    CreateAccountView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData));\r\n        let origionalpermission =\r\n          JSON.parse(jsonData)?.CreateAccount?.input[14].permissions?.role;\r\n        // const rolePermissions = origionalpermission?.find(\r\n        //   (role) => role._attributes?.name === \"SUPERADMIN\"\r\n        // );\r\n        // console.log(rolePermissions);\r\n        // setpermissions(rolePermissions);\r\n        // console.log(permissions);\r\n        // console.log(rolePermissions?.canCreateUser._text.includes(\"true\"));\r\n        // console.log(rolePermissions?.canEditProfile._text.includes(\"true\"));\r\n        // console.log(rolePermissions?.canCreateUser._text.includes(\"true\"));\r\n\r\n        setCreatAccountView(JSON.parse(jsonData));\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      CreateAccountSave(formData)\r\n        .then((res) => {\r\n          if (res.status) {\r\n            setFormData({});\r\n            window.location.reload();\r\n            swal(\"Acccont Created Successfully\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Row>\r\n          <Col>\r\n            <Route\r\n              render={({ history }) => (\r\n                <Button\r\n                  className=\" float-right\"\r\n                  color=\"danger\"\r\n                  onClick={\r\n                    () => history.goBack()\r\n                    // () => history.push(\"/app/freshlist/order/delivered\")\r\n                    // history.push(\"/app/freshlist/order/addOrder\")\r\n                  }\r\n                >\r\n                  Back\r\n                </Button>\r\n              )}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Create Support</h1>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      {\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n                          ?._text\r\n                      }\r\n                    </Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name={\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n                          ?._text\r\n                      }\r\n                      value={\r\n                        formData[\r\n                          dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n                            ?.name?._text\r\n                        ]\r\n                      }\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n                      {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n                        (option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}\r\n                          >\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col>\r\n\r\n                {CreatAccountView &&\r\n                  CreatAccountView?.CreateAccount?.input?.map((ele, i) => {\r\n                    let View = \"\";\r\n                    let Edit = \"\";\r\n                    if (ele?.role) {\r\n                      let roles = ele?.role?.find(\r\n                        (role) => role._attributes?.name === \"WARRANTY APPROVER\"\r\n                      );\r\n\r\n                      View = roles?.permissions?._text.includes(\"View\");\r\n                      Edit = roles?.permissions?._text.includes(\"Edit\");\r\n                      {\r\n                        /* console.log(View, Edit); */\r\n                      }\r\n                    }\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          {/* {Edit && Edit ? ( */}\r\n                          <>\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label>{ele?.label?._text}</Label>\r\n                                <PhoneInput\r\n                                  inputClass=\"myphoneinput\"\r\n                                  country={\"us\"}\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  countryCodeEditable={false}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(phone) => {\r\n                                    setFormData({\r\n                                      ...formData,\r\n                                      [ele?.name?._text]: phone,\r\n                                    });\r\n                                  }}\r\n                                  // onChange={handleInputChange}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </>\r\n                          {/* ) : (\r\n                            <>\r\n                              {View && View ? (\r\n                                <>\r\n                                  <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                    <FormGroup>\r\n                                      <Label>{ele?.label?._text}</Label>\r\n                                      <PhoneInput\r\n                                        disabled\r\n                                        inputClass=\"myphoneinput\"\r\n                                        country={\"us\"}\r\n                                        onKeyDown={(e) => {\r\n                                          if (\r\n                                            ele?.type?._attributes?.type ==\r\n                                            \"number\"\r\n                                          ) {\r\n                                            [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                              e.key\r\n                                            ) && e.preventDefault();\r\n                                          }\r\n                                        }}\r\n                                        countryCodeEditable={false}\r\n                                        name={ele?.name?._text}\r\n                                        value={formData[ele?.name?._text]}\r\n                                        onChange={(phone) => {\r\n                                          setFormData({\r\n                                            ...formData,\r\n                                            [ele?.name?._text]: phone,\r\n                                          });\r\n                                        }}\r\n                                        // onChange={handleInputChange}\r\n                                      />\r\n                                      {index === i ? (\r\n                                        <>\r\n                                          {error && (\r\n                                            <span style={{ color: \"red\" }}>\r\n                                              {error}\r\n                                            </span>\r\n                                          )}\r\n                                        </>\r\n                                      ) : (\r\n                                        <></>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </>\r\n                              ) : null}\r\n                            </>\r\n                          )} */}\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.country}\r\n                                onChange={(country) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"country\"]: country,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  formData?.country?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.State}\r\n                                onChange={(State) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  formData?.State?.countryCode,\r\n                                  formData?.State?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={formData.City}\r\n                                onChange={(City) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          {/* {Edit && Edit ? ( */}\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                          {/* ) : (\r\n                            <>\r\n                              {View && View ? (\r\n                                <>\r\n                                  <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                                    <FormGroup>\r\n                                      <Label>{ele?.label?._text}</Label>\r\n\r\n                                      <Input\r\n                                        disabled\r\n                                        onKeyDown={(e) => {\r\n                                          if (\r\n                                            ele?.type?._attributes?.type ==\r\n                                            \"number\"\r\n                                          ) {\r\n                                            [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                              e.key\r\n                                            ) && e.preventDefault();\r\n                                          }\r\n                                        }}\r\n                                        type={ele?.type?._attributes?.type}\r\n                                        placeholder={ele?.placeholder?._text}\r\n                                        name={ele?.name?._text}\r\n                                        value={formData[ele?.name?._text]}\r\n                                        onChange={(e) =>\r\n                                          handleInputChange(\r\n                                            e,\r\n                                            ele?.type?._attributes?.type,\r\n                                            i\r\n                                          )\r\n                                        }\r\n                                      />\r\n                                      {index === i ? (\r\n                                        <>\r\n                                          {error && (\r\n                                            <span style={{ color: \"red\" }}>\r\n                                              {error}\r\n                                            </span>\r\n                                          )}\r\n                                        </>\r\n                                      ) : (\r\n                                        <></>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                </>\r\n                              ) : null}\r\n                            </>\r\n                          )} */}\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n\r\n                <div className=\"container\">\r\n                  <Label className=\"py-1\">Notification</Label>\r\n                  <div>\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.CheckBox?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <>\r\n                              <span key={i} className=\"mx-2\">\r\n                                <Input\r\n                                  style={{ marginRight: \"3px\" }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  name={ele?.name?._text}\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(e, \"checkbox\")\r\n                                  }\r\n                                />{\" \"}\r\n                                <span\r\n                                  className=\"mt-1 mx-1\"\r\n                                  style={{ marginRight: \"40px\" }}\r\n                                >\r\n                                  {ele?.label?._text == \"Whatsapp\" ? (\r\n                                    <BsWhatsapp\r\n                                      className=\"mx-1\"\r\n                                      color=\"#59CE72\"\r\n                                      size={25}\r\n                                    />\r\n                                  ) : (\r\n                                    <>\r\n                                      {ele.label?._text == \"SMS\" ? (\r\n                                        <>\r\n                                          <FcPhoneAndroid size={30} />\r\n                                        </>\r\n                                      ) : (\r\n                                        <>\r\n                                          <BiEnvelope className=\"\" size={30} />\r\n                                        </>\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n                                  {/* <BsWhatsapp\r\n                              className=\"mx-1\"\r\n                              color=\"#59CE72\"\r\n                              size={25}\r\n                            /> */}\r\n                                </span>\r\n                              </span>\r\n                              {/* <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Input\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                            </FormGroup>\r\n                          </Col> */}\r\n                            </>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </div>\r\n              </Row>\r\n\r\n              <hr />\r\n              <Row className=\"mt-2 \">\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatAccountView &&\r\n                      CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateSupport;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}