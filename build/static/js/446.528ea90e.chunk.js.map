{"version":3,"sources":["views/apps/freshlist/customer/unit/EditUnit.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["StateList","id","state_title","EditUnit","ViewOneData","useState","CreatUnitView","setCreatUnitView","setSelectedValue","formData","setFormData","index","setindex","error","setError","useEffect","console","log","CreateunitxmlView","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","JSON","parse","CreateUnit","catch","err","className","onSubmit","e","preventDefault","swal","userData","localStorage","getItem","_id","SaveUnit","status","message","lg","md","sm","required","showCheckbox","isObject","options","onSelect","selectedList","onRemove","displayValue","input","map","ele","i","key","label","_text","type","_attributes","placeholder","name","value","onChange","target","test","length","handleInputChange","style","color","Ripple","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/446.528ea90e.chunk.js","sourcesContent":["// import React, { useEffect, useState, useContext } from \"react\";\r\n// import xmlJs from \"xml-js\";\r\n// import {\r\n//   Card,\r\n//   CardBody,\r\n//   Col,\r\n//   Form,\r\n//   Row,\r\n//   Input,\r\n//   Label,\r\n//   Button,\r\n//   FormGroup,\r\n//   CustomInput,\r\n//   Badge,\r\n// } from \"reactstrap\";\r\n// import { history } from \"../../../../../history\";\r\n// import PhoneInput from \"react-phone-input-2\";\r\n// import \"react-phone-input-2/lib/style.css\";\r\n// import { Country, State, City } from \"country-state-city\";\r\n// import Select from \"react-select\";\r\n// import moment from \"moment-timezone\";\r\n// import { Route } from \"react-router-dom\";\r\n\r\n// import swal from \"sweetalert\";\r\n// import { BiEnvelope } from \"react-icons/bi\";\r\n// import { FcPhoneAndroid } from \"react-icons/fc\";\r\n// import { BsWhatsapp } from \"react-icons/bs\";\r\n// // import \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n// import \"../../../../../assets/scss/pages/users.scss\";\r\n// import { CloudLightning } from \"react-feather\";\r\n// import { FaPlus } from \"react-icons/fa\";\r\n\r\n// import {\r\n//   CreateAccountSave,\r\n//   CreateAccountView,\r\n// } from \"../../../../../ApiEndPoint/ApiCalling\";\r\n// import \"../../../../../assets/scss/pages/users.scss\";\r\n// import UserContext from \"../../../../../context/Context\";\r\n\r\n// const EditUnit = ({ ViewOneData }) => {\r\n//   const [CreatAccountView, setCreatAccountView] = useState([]);\r\n//   const [Countries, setCountry] = useState({});\r\n//   const [States, setState] = useState({});\r\n//   const [Cities, setCities] = useState({});\r\n//   const [formData, setFormData] = useState({});\r\n//   const [dropdownValue, setdropdownValue] = useState({});\r\n//   const [index, setindex] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [permissions, setpermissions] = useState({});\r\n\r\n//   const Context = useContext(UserContext);\r\n\r\n//   const handleInputChange = (e, type, i) => {\r\n//     const { name, value, checked } = e.target;\r\n//     setindex(i);\r\n//     if (type == \"checkbox\") {\r\n//       if (checked) {\r\n//         setFormData({\r\n//           ...formData,\r\n//           [name]: checked,\r\n//         });\r\n//       } else {\r\n//         setFormData({\r\n//           ...formData,\r\n//           [name]: checked,\r\n//         });\r\n//       }\r\n//     } else {\r\n//       if (type == \"number\") {\r\n//         if (/^\\d{0,10}$/.test(value)) {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           setError(\"\");\r\n//         } else {\r\n//           setError(\r\n//             \"Please enter a valid number with a maximum length of 10 digits\"\r\n//           );\r\n//         }\r\n//       } else {\r\n//         if (value.length <= 10) {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           // console.log(value);\r\n//           setError(\"\");\r\n//         } else {\r\n//           setFormData({\r\n//             ...formData,\r\n//             [name]: value,\r\n//           });\r\n//           // setError(\"Input length exceeds the maximum of 10 characters\");\r\n//         }\r\n//       }\r\n//     }\r\n//   };\r\n//   useEffect(() => {\r\n//     console.log(formData);\r\n//   }, [formData]);\r\n//   useEffect(() => {\r\n//     console.log(ViewOneData);\r\n//     setFormData(ViewOneData);\r\n//     CreateAccountView()\r\n//       .then((res) => {\r\n//         const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n//         // console.log(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n//         setCreatAccountView(JSON.parse(jsonData)?.CreateUser?.input);\r\n\r\n//         setdropdownValue(JSON.parse(jsonData));\r\n//       })\r\n//       .catch((err) => {\r\n//         console.log(err);\r\n//       });\r\n//   }, []);\r\n\r\n//   const submitHandler = (e) => {\r\n//     e.preventDefault();\r\n//     console.log(formData);\r\n//     if (error) {\r\n//       swal(\"Error occured while Entering Details\");\r\n//     } else {\r\n//       CreateAccountSave(formData)\r\n//         .then((res) => {\r\n//           setFormData({});\r\n//           if (res.status) {\r\n//             window.location.reload();\r\n//             swal(\"User Created Successfully\");\r\n//           }\r\n//         })\r\n//         .catch((err) => {\r\n//           console.log(err);\r\n//         });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <Card>\r\n//           <Row className=\"m-2\">\r\n//             <Col>\r\n//               <h1 className=\"float-left\">Edit User</h1>\r\n//             </Col>\r\n//             <Col>\r\n//               <div className=\"float-right\">\r\n//                 {/* <Route\r\n//                   render={({ history }) => (\r\n//                     <Button\r\n//                       style={{ cursor: \"pointer\" }}\r\n//                       className=\"float-right mr-1\"\r\n//                       color=\"primary\"\r\n//                       onClick={() =>\r\n//                         history.push(\"/app/SoftNumen/accounSearch\")\r\n//                       }\r\n//                     >\r\n//                       {\" \"}\r\n//                       Back\r\n//                     </Button>\r\n//                   )}\r\n//                 /> */}\r\n//               </div>\r\n//             </Col>\r\n//           </Row>\r\n//           {/* <hr /> */}\r\n\r\n//           <CardBody>\r\n//             <Form className=\"m-1\" onSubmit={submitHandler}>\r\n//               <Row className=\"mb-2\">\r\n//                 {/* <Col lg=\"6\" md=\"6\">\r\n//                   <FormGroup>\r\n//                     <Label>\r\n//                       {\r\n//                         dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n//                           ?._text\r\n//                       }\r\n//                     </Label>\r\n//                     <CustomInput\r\n//                       required\r\n//                       type=\"select\"\r\n//                       name={\r\n//                         dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n//                           ?._text\r\n//                       }\r\n//                       value={\r\n//                         formData[\r\n//                           dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n//                             ?.name?._text\r\n//                         ]\r\n//                       }\r\n//                       onChange={handleInputChange}\r\n//                     >\r\n//                       <option value=\"\">--Select Role--</option>\r\n//                       {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n//                         (option, index) => (\r\n//                           <option\r\n//                             key={index}\r\n//                             value={option?._attributes?.value}\r\n//                           >\r\n//                             {option?._attributes?.value}\r\n//                           </option>\r\n//                         )\r\n//                       )}\r\n//                     </CustomInput>\r\n//                   </FormGroup>\r\n//                 </Col> */}\r\n\r\n//                 {CreatAccountView &&\r\n//                   CreatAccountView?.map((ele, i) => {\r\n//                     {\r\n//                       /* console.log(Context?.UserInformatio?.dateFormat); */\r\n//                     }\r\n//                     // console.log(Countries);\r\n//                     // console.log(States);\r\n//                     const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n//                       .tz(\"America/New_York\")\r\n//                       .format(\"D MMM, YYYY HH:mm\");\r\n\r\n//                     if (!!ele?.phoneinput) {\r\n//                       return (\r\n//                         <>\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <PhoneInput\r\n//                                 disabled\r\n//                                 inputClass=\"myphoneinput\"\r\n//                                 country={\"us\"}\r\n//                                 onKeyDown={(e) => {\r\n//                                   if (\r\n//                                     ele?.type?._attributes?.type == \"number\"\r\n//                                   ) {\r\n//                                     [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                       e.preventDefault();\r\n//                                   }\r\n//                                 }}\r\n//                                 countryCodeEditable={false}\r\n//                                 name={ele?.name?._text}\r\n//                                 value={formData[ele?.name?._text]}\r\n//                                 onChange={(phone) => {\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [ele?.name?._text]: phone,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         </>\r\n//                       );\r\n//                     } else if (!!ele?.library) {\r\n//                       if (ele?.label._text?.includes(\"ountry\")) {\r\n//                         console.log(ele);\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 disabled\r\n//                                 inputClass=\"countryclass\"\r\n//                                 className=\"countryclassnw\"\r\n//                                 options={Country.getAllCountries()}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={Countries}\r\n//                                 onChange={(country) => {\r\n//                                   setCountry(country);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"Country\"]: country?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else if (ele?.label._text?.includes(\"tate\")) {\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 disabled\r\n//                                 options={State?.getStatesOfCountry(\r\n//                                   Countries?.isoCode\r\n//                                 )}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={States}\r\n//                                 onChange={(State) => {\r\n//                                   setState(State);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"State\"]: State?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else if (ele?.label._text?.includes(\"ity\")) {\r\n//                         return (\r\n//                           <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                             <FormGroup>\r\n//                               <Label>{ele?.label?._text}</Label>\r\n//                               <Select\r\n//                                 disabled\r\n//                                 options={City?.getCitiesOfState(\r\n//                                   States?.countryCode,\r\n//                                   States?.isoCode\r\n//                                 )}\r\n//                                 getOptionLabel={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 getOptionValue={(options) => {\r\n//                                   return options[\"name\"];\r\n//                                 }}\r\n//                                 value={Cities}\r\n//                                 onChange={(City) => {\r\n//                                   setCities(City);\r\n//                                   setFormData({\r\n//                                     ...formData,\r\n//                                     [\"City\"]: City?.name,\r\n//                                   });\r\n//                                 }}\r\n//                               />\r\n//                               {index === i ? (\r\n//                                 <>\r\n//                                   {error && (\r\n//                                     <span style={{ color: \"red\" }}>\r\n//                                       {error}\r\n//                                     </span>\r\n//                                   )}\r\n//                                 </>\r\n//                               ) : (\r\n//                                 <></>\r\n//                               )}\r\n//                             </FormGroup>\r\n//                           </Col>\r\n//                         );\r\n//                       } else {\r\n//                         return (\r\n//                           <>\r\n//                             {ele?.type?._attributes?.type == \"date\" ? (\r\n//                               <>\r\n//                                 <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                   <FormGroup key={i}>\r\n//                                     <Label>{ele?.label?._text}</Label>\r\n\r\n//                                     <Input\r\n//                                       disabled\r\n//                                       onKeyDown={(e) => {\r\n//                                         if (\r\n//                                           ele?.type?._attributes?.type ==\r\n//                                           \"number\"\r\n//                                         ) {\r\n//                                           [\"e\", \"E\", \"+\", \"-\"].includes(\r\n//                                             e.key\r\n//                                           ) && e.preventDefault();\r\n//                                         }\r\n//                                       }}\r\n//                                       type={ele?.type?._attributes?.type}\r\n//                                       placeholder={ele?.placeholder?._text}\r\n//                                       name={ele?.name?._text}\r\n//                                       dateFormat={\r\n//                                         Context?.UserInformatio?.dateFormat\r\n//                                       }\r\n//                                       value={\r\n//                                         moment(formData[ele?.name?._text])\r\n//                                           .tz(Context?.UserInformatio?.timeZone)\r\n//                                           .format(\r\n//                                             Context?.UserInformatio?.dateFormat\r\n//                                           )\r\n//                                         // formData[ele?.name?._text]\r\n//                                       }\r\n//                                       // value={formData[ele?.name?._text]}\r\n//                                       onChange={(e) =>\r\n//                                         handleInputChange(\r\n//                                           e,\r\n//                                           ele?.type?._attributes?.type,\r\n//                                           i\r\n//                                         )\r\n//                                       }\r\n//                                     />\r\n//                                     {index === i ? (\r\n//                                       <>\r\n//                                         {error && (\r\n//                                           <span style={{ color: \"red\" }}>\r\n//                                             {error}\r\n//                                           </span>\r\n//                                         )}\r\n//                                       </>\r\n//                                     ) : (\r\n//                                       <></>\r\n//                                     )}\r\n//                                   </FormGroup>\r\n//                                 </Col>\r\n//                               </>\r\n//                             ) : (\r\n//                               <>\r\n//                                 <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                   <FormGroup key={i}>\r\n//                                     <Label>{ele?.label?._text}</Label>\r\n\r\n//                                     <Input\r\n//                                       disabled\r\n//                                       onKeyDown={(e) => {\r\n//                                         if (\r\n//                                           ele?.type?._attributes?.type ==\r\n//                                           \"number\"\r\n//                                         ) {\r\n//                                           [\"e\", \"E\", \"+\", \"-\"].includes(\r\n//                                             e.key\r\n//                                           ) && e.preventDefault();\r\n//                                         }\r\n//                                       }}\r\n//                                       type={ele?.type?._attributes?.type}\r\n//                                       placeholder={ele?.placeholder?._text}\r\n//                                       name={ele?.name?._text}\r\n//                                       value={formData[ele?.name?._text]}\r\n//                                       onChange={(e) =>\r\n//                                         handleInputChange(\r\n//                                           e,\r\n//                                           ele?.type?._attributes?.type,\r\n//                                           i\r\n//                                         )\r\n//                                       }\r\n//                                     />\r\n//                                     {index === i ? (\r\n//                                       <>\r\n//                                         {error && (\r\n//                                           <span style={{ color: \"red\" }}>\r\n//                                             {error}\r\n//                                           </span>\r\n//                                         )}\r\n//                                       </>\r\n//                                     ) : (\r\n//                                       <></>\r\n//                                     )}\r\n//                                   </FormGroup>\r\n//                                 </Col>\r\n//                               </>\r\n//                             )}\r\n//                           </>\r\n//                         );\r\n//                       }\r\n//                     } else {\r\n//                       return (\r\n//                         <>\r\n//                           {!!ele?.number ? (\r\n//                             <>\r\n//                               <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                                 <FormGroup key={i}>\r\n//                                   <Label>{ele?.label?._text}</Label>\r\n\r\n//                                   <Input\r\n//                                     disabled\r\n//                                     onWheel={(e) => {\r\n//                                       e.preventDefault(); // Prevent the mouse wheel scroll event\r\n//                                     }}\r\n//                                     onKeyDown={(e) => {\r\n//                                       if (\r\n//                                         ele?.type?._attributes?.type == \"number\"\r\n//                                       ) {\r\n//                                         [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                           e.preventDefault();\r\n//                                       }\r\n//                                     }}\r\n//                                     type={ele?.type?._attributes?.type}\r\n//                                     placeholder={ele?.placeholder?._text}\r\n//                                     name={ele?.name?._text}\r\n//                                     value={formData[ele?.name?._text]}\r\n//                                     onChange={(e) =>\r\n//                                       handleInputChange(\r\n//                                         e,\r\n//                                         ele?.type?._attributes?.type,\r\n//                                         i\r\n//                                       )\r\n//                                     }\r\n//                                   />\r\n//                                   {index === i ? (\r\n//                                     <>\r\n//                                       {error && (\r\n//                                         <span style={{ color: \"red\" }}>\r\n//                                           {error}\r\n//                                         </span>\r\n//                                       )}\r\n//                                     </>\r\n//                                   ) : (\r\n//                                     <></>\r\n//                                   )}\r\n//                                 </FormGroup>\r\n//                               </Col>\r\n//                             </>\r\n//                           ) : (\r\n//                             <Col key={i} lg=\"4\" md=\"4\" sm=\"12\">\r\n//                               <FormGroup key={i}>\r\n//                                 <Label>{ele?.label?._text}</Label>\r\n\r\n//                                 <Input\r\n//                                   disabled\r\n//                                   onKeyDown={(e) => {\r\n//                                     if (\r\n//                                       ele?.type?._attributes?.type == \"number\"\r\n//                                     ) {\r\n//                                       [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n//                                         e.preventDefault();\r\n//                                     }\r\n//                                   }}\r\n//                                   type={ele?.type?._attributes?.type}\r\n//                                   placeholder={ele?.placeholder?._text}\r\n//                                   name={ele?.name?._text}\r\n//                                   value={formData[ele?.name?._text]}\r\n//                                   onChange={(e) => {\r\n//                                     // const value = e.target.value;\r\n//                                     // // Use regular expression to allow only numbers\r\n//                                     // const numericValue = value.replace(\r\n//                                     //   /\\D/g,\r\n//                                     //   \"\"\r\n//                                     // );\r\n//                                     handleInputChange(\r\n//                                       e,\r\n//                                       ele?.type?._attributes?.type,\r\n//                                       i\r\n//                                     );\r\n//                                   }}\r\n//                                 />\r\n//                                 {index === i ? (\r\n//                                   <>\r\n//                                     {error && (\r\n//                                       <span style={{ color: \"red\" }}>\r\n//                                         {error}\r\n//                                       </span>\r\n//                                     )}\r\n//                                   </>\r\n//                                 ) : (\r\n//                                   <></>\r\n//                                 )}\r\n//                               </FormGroup>\r\n//                             </Col>\r\n//                           )}\r\n//                         </>\r\n//                       );\r\n//                     }\r\n//                   })}\r\n//               </Row>\r\n\r\n//               <hr />\r\n//               {/* <Row className=\"mt-2 \">\r\n//                 <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n//                   <Label className=\"\">\r\n//                     <h4>Status</h4>\r\n//                   </Label>\r\n//                   <div className=\"form-label-group mx-1\">\r\n//                     {CreatAccountView &&\r\n//                       CreatAccountView?.CreateAccount?.Radiobutton?.input?.map(\r\n//                         (ele, i) => {\r\n//                           return (\r\n//                             <FormGroup key={i}>\r\n//                               <Input\r\n//                                 key={i}\r\n//                                 style={{ marginRight: \"3px\" }}\r\n//                                 required\r\n//                                 type={ele?.type?._attributes?.type}\r\n//                                 name={ele?.name?._text}\r\n//                                 value={`${\r\n//                                   ele?.label?._text == \"Active\"\r\n//                                     ? \"Active\"\r\n//                                     : \"Deactive\"\r\n//                                 }`}\r\n//                                 onChange={handleInputChange}\r\n//                               />{\" \"}\r\n//                               <span\r\n//                                 className=\"mx-1 mt-1\"\r\n//                                 style={{ marginRight: \"20px\" }}\r\n//                               >\r\n//                                 {ele?.label?._text}\r\n//                               </span>\r\n//                             </FormGroup>\r\n//                           );\r\n//                         }\r\n//                       )}\r\n//                   </div>\r\n//                 </Col>\r\n//               </Row> */}\r\n\r\n//               {/* <Row>\r\n//                 <Button.Ripple\r\n//                   color=\"primary\"\r\n//                   type=\"submit\"\r\n//                   className=\"mr-1 mt-2 mx-2\"\r\n//                 >\r\n//                   Submit\r\n//                 </Button.Ripple>\r\n//               </Row> */}\r\n//             </Form>\r\n//           </CardBody>\r\n//         </Card>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n// export default EditUnit;\r\n\r\nimport React, { useEffect, useState, useRef, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport Select from \"react-select\";\r\nimport swal from \"sweetalert\";\r\nimport { Route } from \"react-router-dom\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\n\r\nimport { history } from \"../../../../../history\";\r\nimport \"../../../../../../src/layouts/assets/scss/pages/users.scss\";\r\nimport {\r\n  CreateunitxmlView,\r\n  SaveUnit,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\n// import UserContext from \"../../../../../context/Context\";\r\nconst StateList = [\r\n  { id: 1, state_title: \"Clothing & Apparel.\" },\r\n  { id: 2, state_title: \"Footwear & Shoes.\" },\r\n  { id: 3, state_title: \"Electronics & Gadgets.\" },\r\n  // Add more states as needed\r\n];\r\nconst EditUnit = ({ ViewOneData }) => {\r\n  const [CreatUnitView, setCreatUnitView] = useState({});\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  //   const [StateList, setCityList] = useState([]);\r\n  const [selectedValue, setSelectedValue] = useState([]);\r\n  const [formData, setFormData] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n  //   const formRef = useRef(null);\r\n  // const createUserXmlView = useContext(UserContext);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value } = e.target;\r\n    console.log(value);\r\n    setindex(i);\r\n    if (type == \"number\") {\r\n      if (/^\\d{0,10}$/.test(value)) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        setError(\"\");\r\n      } else {\r\n        setError(\r\n          \"Please enter a valid number with a maximum length of 10 digits\"\r\n        );\r\n      }\r\n    } else {\r\n      if (value.length <= 10) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        // console.log(value);\r\n        setError(\"\");\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        // setError(\"Input length exceeds the maximum of 10 characters\");\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(ViewOneData);\r\n    CreateunitxmlView()\r\n      .then(res => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData).CreateUnit);\r\n        setCreatUnitView(JSON.parse(jsonData));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const onSelect1 = selectedList => {\r\n    setSelectedValue(selectedList);\r\n    console.log(\"Selected:\", selectedList);\r\n  };\r\n  const onRemove1 = selectedList => {\r\n    setSelectedValue(selectedList);\r\n    console.log(\"Removed:\", selectedList);\r\n  };\r\n\r\n  const submitHandler = e => {\r\n    // if (formRef.current) {\r\n    //     formRef.current.reset();\r\n    //   }\r\n    e.preventDefault();\r\n    console.log(formData);\r\n    if (error) {\r\n      swal(\"Error occured while Entering Details\");\r\n    } else {\r\n      let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n      formData[\"created_by\"] = userData?._id;\r\n      SaveUnit(formData)\r\n        .then(res => {\r\n          console.log(res);\r\n          if (res.status) {\r\n            swal(`${res.message}`);\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">Edit Unit</h1>\r\n            </Col>\r\n            <Col>\r\n              <div className=\"float-right\">\r\n                {/* <Route\r\n                  render={({ history }) => (\r\n                    <Button\r\n                      style={{ cursor: \"pointer\" }}\r\n                      className=\"float-right mr-1\"\r\n                      color=\"primary\"\r\n                      onClick={() =>\r\n                        history.push(\"/app/SoftNumen/accounSearch\")\r\n                      }\r\n                    >\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                /> */}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form\r\n              className=\"m-1\"\r\n              //   ref={formRef}\r\n              onSubmit={submitHandler}\r\n            >\r\n              <Row className=\"mb-2\">\r\n                <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n                  <Label>Select Product</Label>\r\n                  <Multiselect\r\n                    required\r\n                    showCheckbox=\"true\"\r\n                    isObject=\"false\"\r\n                    options={StateList}\r\n                    onSelect={onSelect1}\r\n                    onRemove={onRemove1}\r\n                    displayValue=\"state_title\"\r\n                  />\r\n                </Col>\r\n                {CreatUnitView &&\r\n                  CreatUnitView?.CreateUnit?.input?.map((ele, i) => {\r\n                    return (\r\n                      <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                        <FormGroup key={i}>\r\n                          <Label>{ele?.label?._text}</Label>\r\n\r\n                          <Input\r\n                            type={ele?.type?._attributes?.type}\r\n                            placeholder={ele?.placeholder?._text}\r\n                            name={ele?.name?._text}\r\n                            value={formData[ele?.name?._text]}\r\n                            onChange={e =>\r\n                              handleInputChange(\r\n                                e,\r\n                                ele?.type?._attributes?.type,\r\n                                i\r\n                              )\r\n                            }\r\n                          />\r\n                          {index === i ? (\r\n                            <>\r\n                              {error && (\r\n                                <span style={{ color: \"red\" }}>{error}</span>\r\n                              )}\r\n                            </>\r\n                          ) : (\r\n                            <></>\r\n                          )}\r\n                        </FormGroup>\r\n                      </Col>\r\n                    );\r\n                  })}\r\n              </Row>\r\n              <hr />\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default EditUnit;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}