{"version":3,"sources":["views/apps/freshlist/customer/warehouse/CreateWareHouse.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["CreateWareHouse","useState","formData","setFormData","error","setError","Heading","setHeading","Params","useParams","useEffect","JSON","parse","localStorage","getItem","id","_Get","View_Wareahouse_Byid","then","res","warehoue","Warehouse","warehouseName","warehouseAddress","address","warehouseMobile","mobileNo","landlineNumber","status","catch","err","console","log","handleInputChange","e","target","name","value","type","test","className","render","history","onClick","push","onSubmit","preventDefault","userInfor","payload","database","swal","CreateWarehousesave","message","_Put","Update_Wareahouse_Byid","lg","md","sm","required","placeholder","onChange","checked","style","marginRight","Ripple","color","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/447.13067eae.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport swal from \"sweetalert\";\r\nimport { Route, useParams } from \"react-router-dom\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport \"../../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  CreateWarehousesave,\r\n  _Get,\r\n  _Put,\r\n} from \"../../../../../ApiEndPoint/ApiCalling\";\r\n\r\nimport \"../../../../../assets/scss/pages/users.scss\";\r\nimport {\r\n  Update_Wareahouse_Byid,\r\n  View_Wareahouse_Byid,\r\n} from \"../../../../../ApiEndPoint/Api\";\r\n// import UserContext from \"../../../../../context/Context\";\r\n\r\nconst CreateWareHouse = () => {\r\n  const [CreatWarehouseView, setCreatWarehouseView] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [error, setError] = useState(\"\");\r\n  const [Heading, setHeading] = useState(\"Create\");\r\n\r\n  let Params = useParams();\r\n  useEffect(() => {\r\n    const userInfor = JSON.parse(localStorage.getItem(\"userData\"));\r\n\r\n    if (Params?.id == 0) {\r\n      setHeading(\"Create\");\r\n    } else {\r\n      setHeading(\"Update\");\r\n      _Get(View_Wareahouse_Byid, Params?.id)\r\n        .then((res) => {\r\n          let warehoue = res?.Warehouse;\r\n          setFormData({\r\n            warehouseName: warehoue?.warehouseName,\r\n            warehouseAddress: warehoue?.address,\r\n            warehouseMobile: warehoue?.mobileNo,\r\n            landlineNumber: warehoue?.landlineNumber,\r\n            status: warehoue?.status,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type } = e.target;\r\n    if (type == \"number\") {\r\n      if (/^\\d{0,10}$/.test(value)) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: value,\r\n        });\r\n        setError(\"\");\r\n      } else {\r\n        setError(\r\n          \"Please enter a valid number with a maximum length of 10 digits\"\r\n        );\r\n      }\r\n    } else {\r\n      setFormData({\r\n        ...formData,\r\n        [name]: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    const userInfor = JSON.parse(localStorage.getItem(\"userData\"));\r\n    debugger;\r\n    let payload = {\r\n      warehouseName: formData?.warehouseName,\r\n      mobileNo: formData?.warehouseMobile,\r\n      address: formData?.warehouseAddress,\r\n      landlineNumber: formData?.landlineNumber,\r\n      database: userInfor?.database,\r\n      status: formData?.status,\r\n    };\r\n    if (Params?.id == 0) {\r\n      if (error) {\r\n        swal(\"Error occured while Entering Details\");\r\n      } else {\r\n        CreateWarehousesave(payload)\r\n          .then((res) => {\r\n            setFormData({\r\n              warehouseName: \"\",\r\n              warehouseMobile: \"\",\r\n              address: \"\",\r\n              landlineNumber: \"\",\r\n              status: \"\",\r\n            });\r\n            swal(`Warehouse  ${res.message}`);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            swal(\"Somthing Went Wrong\");\r\n          });\r\n      }\r\n    } else {\r\n      _Put(Update_Wareahouse_Byid, Params?.id, payload)\r\n        .then((res) => {\r\n          console.log(res);\r\n\r\n          swal(\"Updated Successfully\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          swal(\"Somthing Went Wrong\");\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col>\r\n              <h1 className=\"float-left\">{Heading && Heading} WareHouse</h1>\r\n            </Col>\r\n            <Col>\r\n              <Route\r\n                render={({ history }) => (\r\n                  <Button\r\n                    className=\" btn btn-danger float-right\"\r\n                    onClick={() =>\r\n                      history.push(\"/app/softNumen/system/WareHouseListSoft\")\r\n                    }>\r\n                    Back\r\n                  </Button>\r\n                )}\r\n              />\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row>\r\n                <Col lg=\"3\" md=\"3\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>WareHouse Name</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Name\"\r\n                      name=\"warehouseName\"\r\n                      value={formData[\"warehouseName\"]}\r\n                      onChange={handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"3\" md=\"3\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>WareHouse Address</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"text\"\r\n                      placeholder=\"Enter Address\"\r\n                      name=\"warehouseAddress\"\r\n                      value={formData[\"warehouseAddress\"]}\r\n                      onChange={handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"3\" md=\"3\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>WareHouse Mobile </Label>\r\n                    <Input\r\n                      required\r\n                      type=\"number\"\r\n                      placeholder=\"Enter Mobile No.\"\r\n                      name=\"warehouseMobile\"\r\n                      value={formData[\"warehouseMobile\"]}\r\n                      onChange={handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n                <Col lg=\"3\" md=\"3\" sm=\"12\">\r\n                  <FormGroup>\r\n                    <Label>WareHouse LandLine Number</Label>\r\n                    <Input\r\n                      required\r\n                      type=\"number\"\r\n                      placeholder=\"Enter LandLine Number\"\r\n                      name=\"landlineNumber\"\r\n                      value={formData[\"landlineNumber\"]}\r\n                      onChange={handleInputChange}\r\n                    />\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"mb-2\">\r\n                {/* {CreatWarehouseView &&\r\n                  CreatWarehouseView?.input?.map((ele, i) => {\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <>\r\n                            <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                              <FormGroup>\r\n                                <Label>{ele?.label?._text}</Label>\r\n                                <PhoneInput\r\n                                  inputClass=\"myphoneinput\"\r\n                                  country={\"us\"}\r\n                                  onKeyDown={(e) => {\r\n                                    if (\r\n                                      ele?.type?._attributes?.type == \"number\"\r\n                                    ) {\r\n                                      [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                        e.preventDefault();\r\n                                    }\r\n                                  }}\r\n                                  countryCodeEditable={false}\r\n                                  name={ele?.name?._text}\r\n                                  value={formData[ele?.name?._text]}\r\n                                  onChange={(phone) => {\r\n                                    console.log(phone);\r\n                                    setFormData({\r\n                                      ...formData,\r\n                                      [ele?.name?._text]: phone,\r\n                                    });\r\n                                  }}\r\n                                  // onChange={handleInputChange}\r\n                                />\r\n                                {index === i ? (\r\n                                  <>\r\n                                    {error && (\r\n                                      <span style={{ color: \"red\" }}>\r\n                                        {error}\r\n                                      </span>\r\n                                    )}\r\n                                  </>\r\n                                ) : (\r\n                                  <></>\r\n                                )}\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </>\r\n                        </>\r\n                      );\r\n                    } else if (ele?.type?._attributes?.type == \"text\") {\r\n                      return (\r\n                        <Col key={i} lg=\"3\" md=\"3\" sm=\"12\">\r\n                          <FormGroup key={i}>\r\n                            <Label>{ele?.label?._text}</Label>\r\n                            <Input\r\n                              type={ele?.type?._attributes?.type}\r\n                              placeholder={ele?.placeholder?._text}\r\n                              name={ele?.name?._text}\r\n                              value={formData[ele?.name?._text]}\r\n                              onChange={(e) => {\r\n                                handleInputChange(\r\n                                  e,\r\n                                  ele?.type?._attributes?.type,\r\n                                  i\r\n                                );\r\n                              }}\r\n                            />\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <Col key={i} lg=\"3\" md=\"3\" sm=\"12\">\r\n                          <FormGroup key={i}>\r\n                            <Label>{ele?.label?._text}</Label>\r\n                            <Input\r\n                              type={ele?.type?._attributes?.type}\r\n                              placeholder={ele?.placeholder?._text}\r\n                              name={ele?.name?._text}\r\n                              value={formData[ele?.name?._text]}\r\n                              onChange={(e) => {\r\n                                handleInputChange(\r\n                                  e,\r\n                                  ele?.type?._attributes?.type,\r\n                                  i\r\n                                );\r\n                              }}\r\n                            />\r\n                            {index === i ? (\r\n                              <>\r\n                                {error && (\r\n                                  <span style={{ color: \"red\" }}>{error}</span>\r\n                                )}\r\n                              </>\r\n                            ) : (\r\n                              <></>\r\n                            )}\r\n                          </FormGroup>\r\n                        </Col>\r\n                      );\r\n                    }\r\n                  })} */}\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                  <Label className=\"mb-0\">Status</Label>\r\n                  <div\r\n                    className=\"form-label-group\"\r\n                    onChange={(e) => {\r\n                      setFormData({\r\n                        ...formData,\r\n                        [\"status\"]: e.target.value,\r\n                      });\r\n                    }}>\r\n                    <input\r\n                      checked={formData[\"status\"] == \"Active\"}\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Active\"\r\n                    />\r\n                    <span style={{ marginRight: \"20px\" }}>Active</span>\r\n                    <input\r\n                      checked={formData[\"status\"] == \"Deactive\"}\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"status\"\r\n                      value=\"Deactive\"\r\n                    />\r\n                    <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n              <hr />\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\">\r\n                  {Heading && Heading}\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateWareHouse;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}