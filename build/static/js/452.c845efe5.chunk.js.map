{"version":3,"sources":["views/apps/freshlist/house/AddProduct.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["i","AddProduct","useState","CreatAccountView","setCreatAccountView","categoryList","setcategoryList","UnitList","setUnitList","wareHouseList","setWareHouseList","subcatlist","setsubcatlist","Countries","setCountry","Show","setShow","States","setState","Cities","setCities","formData","setFormData","BulkImport","setBulkImport","BulkUpload","setBulkUpload","dropdownValue","setdropdownValue","index","setindex","error","setError","Context","useContext","UserContext","history","useHistory","handleInputChange","e","type","target","name","value","checked","document","getElementById","selectedOptionValue","selectedIndex","selectedOptionText","options","text","list","test","files","length","useEffect","CreateProductXMLView","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","console","log","JSON","parse","createProduct","catch","err","localStorage","getItem","userData","AllCategoryList","_id","database","Category","UnitListView","Unit","_Get","WareahouseList_For_addProduct","Warehouse","submitHandler","preventDefault","undefined","formdata","FormData","append","_BulkUpload","Bulk_Upload_Product","push","swal","message","response","input","map","ele","_attributes","_text","unitType","unitQty","ProductType","MyDropDown","dropdown","SaveProduct","status","lg","md","sm","className","onChange","style","marginRight","fontSize","color","onClick","render","cursor","onSubmit","placeholder","Ripple","key","label","required","selecteddata","filter","subcategories","handlechangeSubcat","cat","toLowerCase","includes","whList","warehouseName","for","id","primaryUnit","data-order","option","moment","tz","format","phoneinput","inputClass","country","onKeyDown","countryCodeEditable","phone","library","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","dateFormat","UserInformatio","timeZone","number","onWheel","handleFileChange","_excluded","propTypes","children","PropTypes","node","row","bool","check","inline","disabled","tag","tagPropType","string","cssModule","object","FormGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"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","file":"static/js/452.c845efe5.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  FormGroup,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\nimport { history } from \"../../../../history\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport moment from \"moment-timezone\";\r\nimport { Route, useHistory } from \"react-router-dom\";\r\n\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  AllCategoryList,\r\n  CreateProductXMLView,\r\n  SaveProduct,\r\n  UnitListView,\r\n  _BulkUpload,\r\n  _Get,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nimport {\r\n  Bulk_Upload_Product,\r\n  WareahouseList_For_addProduct,\r\n} from \"../../../../ApiEndPoint/Api\";\r\n\r\nconst AddProduct = () => {\r\n  const [CreatAccountView, setCreatAccountView] = useState([]);\r\n  const [categoryList, setcategoryList] = useState([]);\r\n  const [UnitList, setUnitList] = useState([]);\r\n  const [wareHouseList, setWareHouseList] = useState([]);\r\n  const [subcatlist, setsubcatlist] = useState([]);\r\n  const [Countries, setCountry] = useState({});\r\n  const [Show, setShow] = useState(false);\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [BulkImport, setBulkImport] = useState(null);\r\n  const [BulkUpload, setBulkUpload] = useState(false);\r\n\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [permissions, setpermissions] = useState({});\r\n\r\n  const Context = useContext(UserContext);\r\n  const history = useHistory();\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    const { name, value, checked } = e.target;\r\n    if (name == \"Unit\") {\r\n      let value = document.getElementById(\"unitType\").value;\r\n      const selectedOptionValue = e.target.value;\r\n      const selectedIndex = e.target.selectedIndex;\r\n      const selectedOptionText = e.target.options[selectedIndex]?.text;\r\n\r\n      let list = formData;\r\n      list[\"unitType\"] = selectedOptionText;\r\n      list[\"unitQty\"] = selectedOptionValue;\r\n      setFormData(list);\r\n    }\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else if (type == \"file\") {\r\n        if (e.target.files) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: e.target.files[0],\r\n          });\r\n        }\r\n      } else {\r\n        if (value.length) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // console.log(value);\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const changeHandler1 = (e) => {\r\n    setFormData({\r\n      ...formData,\r\n      [\"status\"]: e.target.value,\r\n    });\r\n  };\r\n  const changeHandler2 = (e) => {\r\n    setShow(true);\r\n    setFormData({\r\n      ...formData,\r\n      [\"ProductType\"]: e.target.value,\r\n    });\r\n  };\r\n  // useEffect(() => {\r\n  //   console.log(formData);\r\n  // }, [formData]);\r\n  useEffect(() => {\r\n    CreateProductXMLView()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData).createProduct);\r\n        setCreatAccountView(JSON.parse(jsonData)?.createProduct);\r\n        setdropdownValue(JSON.parse(jsonData)?.createProduct);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    let pageparmission = JSON.parse(localStorage.getItem(\"userData\"));\r\n\r\n    let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n    AllCategoryList(userData?._id, userData?.database)\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res?.Category) {\r\n          setcategoryList(res.Category);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    UnitListView(userData?._id, userData?.database)\r\n      .then((res) => {\r\n        console.log(res?.Unit);\r\n        setUnitList(res?.Unit);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n\r\n    _Get(WareahouseList_For_addProduct, userData?.database)\r\n      .then((res) => {\r\n        let value = res?.Warehouse;\r\n        if (value) {\r\n          setWareHouseList(value);\r\n        }\r\n        console.log(res?.Warehouse);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n  const handleFileChange = (e, type, i) => {\r\n    const { name } = e.target;\r\n    setindex(i);\r\n    setFormData({\r\n      ...formData,\r\n      [name]: e.target.files[0],\r\n    });\r\n  };\r\n\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (BulkImport !== null || BulkImport != undefined) {\r\n      let formdata = new FormData();\r\n      formdata.append(\"file\", BulkImport);\r\n      await _BulkUpload(Bulk_Upload_Product, formdata)\r\n        .then((res) => {\r\n          history.push(\"/app/freshlist/house/houseProductList\");\r\n          swal(`${res?.message}`);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response);\r\n          swal(\"Something Went Wrong\");\r\n        });\r\n    } else {\r\n      let formdata = new FormData();\r\n      let userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n      formdata.append(\"created_by\", userData?._id);\r\n      CreatAccountView?.input?.map((ele, i) => {\r\n        if (ele?.type?._attributes?.type == \"text\") {\r\n          formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n        } else if (ele?.type?._attributes?.type == \"file\") {\r\n          formdata.append(\"file\", formData[ele?.name?._text]);\r\n        } else {\r\n          formdata.append(`${ele?.name._text}`, formData[ele?.name?._text]);\r\n        }\r\n      });\r\n\r\n      formdata.append(\"unitType\", formData?.unitType);\r\n      if (formData?.unitQty) {\r\n        formdata.append(\"unitQty\", formData?.unitQty);\r\n      }\r\n      formdata.append(\"addProductType\", formData?.ProductType);\r\n      CreatAccountView?.MyDropDown?.map((ele, i) => {\r\n        formdata.append(\r\n          `${ele?.dropdown?.name?._text}`,\r\n          formData[ele?.dropdown?.name?._text]\r\n        );\r\n      });\r\n      if (error) {\r\n        swal(\"Error occured while Entering Details\");\r\n      } else {\r\n        if (formData?.ProductType) {\r\n          SaveProduct(formdata)\r\n            .then((res) => {\r\n              console.log(res);\r\n              setFormData({});\r\n              if (res.status) {\r\n                history.push(\"/app/freshlist/house/houseProductList\");\r\n\r\n                swal(\"Product Created Successfully\");\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              swal(\"Enter All Details\");\r\n            });\r\n        } else {\r\n          swal(\"error\", \"Choose Product Type\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const handlechangeSubcat = (e) => {\r\n    console.log(e.target.value);\r\n    if (e.target.value != \"NA\") {\r\n      let selecteddata = categoryList?.filter(\r\n        (ele, i) => ele?.name == e.target.value\r\n      );\r\n      console.log(selecteddata[0]?.subcategories);\r\n      setsubcatlist(selecteddata[0]?.subcategories);\r\n    } else {\r\n      swal(\"Select Category\");\r\n    }\r\n  };\r\n\r\n  console.log(formData);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <CardBody>\r\n            <Row>\r\n              <Col lg=\"8\" md=\"8\" sm=\"8\" className=\"mb-1 mt-1\">\r\n                <div className=\"px-2\">\r\n                  <h3 className=\"mb-2 mx-2\">Add Product Type</h3>\r\n                  <div className=\"form-label-group\" onChange={changeHandler2}>\r\n                    <input\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      // value={formData[\"status\"]}\r\n                      name=\"ProductType\"\r\n                      className=\"ml-1\"\r\n                      value=\"Product\"\r\n                    />\r\n                    <span style={{ marginRight: \"20px\", fontSize: \"18px\" }}>\r\n                      <strong>Add Product</strong>\r\n                    </span>\r\n\r\n                    <input\r\n                      style={{ marginRight: \"3px\" }}\r\n                      type=\"radio\"\r\n                      name=\"ProductType\"\r\n                      className=\"ml-1\"\r\n                      value=\"Item\"\r\n                    />\r\n                    <span style={{ marginRight: \"20px\", fontSize: \"18px\" }}>\r\n                      <strong>Add Item</strong>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </Col>\r\n              {!BulkUpload && !BulkUpload ? (\r\n                <Col lg=\"3\" md=\"3\">\r\n                  <div className=\"d-flex justify-content-end\">\r\n                    <Button\r\n                      color=\"primary\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setBulkUpload(true);\r\n                      }}>\r\n                      Bulk Upload\r\n                    </Button>\r\n                  </div>\r\n                </Col>\r\n              ) : (\r\n                <Col lg=\"1\" md=\"1\">\r\n                  <div className=\"mt-2\">\r\n                    <Button\r\n                      color=\"primary\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        setBulkUpload(false);\r\n                      }}>\r\n                      Back\r\n                    </Button>\r\n                  </div>\r\n                </Col>\r\n              )}\r\n\r\n              {!BulkUpload && !BulkUpload && (\r\n                <Col lg=\"1\" md=\"1\">\r\n                  <div className=\"float-right\">\r\n                    <Route\r\n                      render={({ history }) => (\r\n                        <Button\r\n                          style={{ cursor: \"pointer\" }}\r\n                          className=\"float-right mr-1\"\r\n                          color=\"primary\"\r\n                          onClick={() =>\r\n                            history.push(\"/app/SoftNumen/accounSearch\")\r\n                          }>\r\n                          {\" \"}\r\n                          Back\r\n                        </Button>\r\n                      )}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </CardBody>\r\n\r\n          {/* <hr /> */}\r\n\r\n          <CardBody>\r\n            {BulkUpload && BulkUpload ? (\r\n              <>\r\n                <Form className=\"m-1\" onSubmit={submitHandler}>\r\n                  <Row>\r\n                    <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n                      <Label>OR</Label>\r\n                    </Col>\r\n                    <Col lg=\"4\" md=\"4\" sm=\"12\">\r\n                      <FormGroup>\r\n                        <Label>Bulk Import</Label>\r\n\r\n                        <Input\r\n                          className=\"form-control\"\r\n                          type=\"file\"\r\n                          placeholder=\"\"\r\n                          name=\"BulkImport\"\r\n                          onChange={(e) => {\r\n                            setBulkImport(e.target.files[0]);\r\n                          }}\r\n                        />\r\n                      </FormGroup>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row>\r\n                    <Button.Ripple\r\n                      color=\"primary\"\r\n                      type=\"submit\"\r\n                      className=\"mr-1 mt-2 mx-2\">\r\n                      Submit\r\n                    </Button.Ripple>\r\n                  </Row>\r\n                </Form>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {Show && Show && (\r\n                  <Form className=\"m-1\" onSubmit={submitHandler}>\r\n                    <Row className=\"mb-2\">\r\n                      {dropdownValue?.MyDropDown?.length > 0 &&\r\n                        dropdownValue?.MyDropDown?.map((ele, i) => {\r\n                          if (ele?.dropdown?.name?._text == \"category\") {\r\n                            return (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\">\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.dropdown?.label?._text}\r\n                                  </Label>\r\n                                  <CustomInput\r\n                                    required\r\n                                    type=\"select\"\r\n                                    placeholder=\"Select Category\"\r\n                                    name={ele?.dropdown?.name?._text}\r\n                                    value={formData[ele?.dropdown?.name?._text]}\r\n                                    onChange={(e) => {\r\n                                      handleInputChange(e);\r\n                                      handlechangeSubcat(e);\r\n                                    }}>\r\n                                    <option value=\"NA\">\r\n                                      --Select Category--\r\n                                    </option>\r\n                                    {categoryList &&\r\n                                      categoryList?.map((cat) => (\r\n                                        <option\r\n                                          value={cat?.name}\r\n                                          key={cat?._id}>\r\n                                          {cat?.name}\r\n                                        </option>\r\n                                      ))}\r\n                                  </CustomInput>\r\n                                </Col>\r\n                              </>\r\n                            );\r\n                          }\r\n                          if (ele?.dropdown?.name?._text == \"SubCategory\") {\r\n                            return (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\">\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.dropdown?.label?._text}\r\n                                  </Label>\r\n                                  <CustomInput\r\n                                    required\r\n                                    type=\"select\"\r\n                                    placeholder=\"Select Category\"\r\n                                    name={ele?.dropdown?.name?._text}\r\n                                    value={formData[ele?.dropdown?.name?._text]}\r\n                                    onChange={handleInputChange}>\r\n                                    <option value=\"NA\">\r\n                                      --Select SubCategory--\r\n                                    </option>\r\n                                    {subcatlist &&\r\n                                      subcatlist?.map((cat) => (\r\n                                        <option\r\n                                          value={cat?.name}\r\n                                          key={cat?._id}>\r\n                                          {cat?.name}\r\n                                        </option>\r\n                                      ))}\r\n                                  </CustomInput>\r\n                                </Col>\r\n                              </>\r\n                            );\r\n                          }\r\n                          if (\r\n                            ele?.dropdown?.name?._text\r\n                              ?.toLowerCase()\r\n                              ?.includes(\"arehouse\")\r\n                          ) {\r\n                            return (\r\n                              <>\r\n                                <Col key={i} lg=\"4\" md=\"4\">\r\n                                  <Label className=\"mb-1\">\r\n                                    {ele?.dropdown?.label?._text} *\r\n                                  </Label>\r\n                                  <CustomInput\r\n                                    required\r\n                                    type=\"select\"\r\n                                    placeholder=\"Select WareHouse\"\r\n                                    name={ele?.dropdown?.name?._text}\r\n                                    value={formData[ele?.dropdown?.name?._text]}\r\n                                    onChange={handleInputChange}>\r\n                                    <option value=\"NA\">\r\n                                      --Select WareHouse--\r\n                                    </option>\r\n\r\n                                    {wareHouseList &&\r\n                                      wareHouseList?.map((whList) => {\r\n                                        return (\r\n                                          <option\r\n                                            value={whList?._id}\r\n                                            key={whList?._id}>\r\n                                            {whList?.warehouseName}\r\n                                          </option>\r\n                                        );\r\n                                      })}\r\n                                  </CustomInput>\r\n                                </Col>\r\n                                {/* )} */}\r\n                              </>\r\n                            );\r\n                          }\r\n                          if (ele?.dropdown?.name?._text == \"Unit\") {\r\n                            return (\r\n                              <>\r\n                                {formData.ProductType &&\r\n                                formData?.ProductType == \"Item\" ? (\r\n                                  <>\r\n                                    <Col lg=\"4\" md=\"4\">\r\n                                      <div className=\"\">\r\n                                        <label className=\"mb-1\" for=\"unit\">\r\n                                          Select Unit\r\n                                        </label>\r\n                                        <select\r\n                                          id=\"unitType\"\r\n                                          className=\"form-control\"\r\n                                          name=\"Unit\"\r\n                                          placeholder=\"selecetedUnit\"\r\n                                          value={\r\n                                            formData[ele?.dropdown?.name?._text]\r\n                                          }\r\n                                          onChange={handleInputChange}>\r\n                                          <option value=\"\">\r\n                                            --select Unit--\r\n                                          </option>\r\n                                          {UnitList?.length > 0 &&\r\n                                            UnitList?.map((cat) => (\r\n                                              <option\r\n                                                // data-order={cat.primaryUnit}\r\n                                                value={cat?.primaryUnit}\r\n                                                key={cat?._id}>\r\n                                                {cat?.primaryUnit}\r\n                                              </option>\r\n                                            ))}\r\n\r\n                                          <option value=\"kg\">\r\n                                            Kilogram (kg)\r\n                                          </option>\r\n                                          <option value=\"Pcs\">\r\n                                            Pieces (Pcs)\r\n                                          </option>\r\n                                          <option value=\"g\">Gram (g)</option>\r\n                                          <option value=\"tonne\">\r\n                                            Metric Ton (tonne)\r\n                                          </option>\r\n                                          <option value=\"m\">Meter (m)</option>\r\n                                          <option value=\"cm\">\r\n                                            Centimeter (cm)\r\n                                          </option>\r\n                                          <option value=\"mm\">\r\n                                            Millimeter (mm)\r\n                                          </option>\r\n                                          <option value=\"in\">Inch (in)</option>\r\n                                          <option value=\"ft\">Foot (ft)</option>\r\n                                          <option value=\"m3\">\r\n                                            Cubic Meter (m³)\r\n                                          </option>\r\n                                          <option value=\"L\">Liter (L)</option>\r\n                                          <option value=\"ml\">\r\n                                            Milliliter (ml)\r\n                                          </option>\r\n                                          <option value=\"s\">Second (s)</option>\r\n                                          <option value=\"min\">\r\n                                            Minute (min)\r\n                                          </option>\r\n                                          <option value=\"hr\">Hour (hr)</option>\r\n                                          <option value=\"°C\">\r\n                                            Celsius (°C)\r\n                                          </option>\r\n                                          <option value=\"°F\">\r\n                                            Fahrenheit (°F)\r\n                                          </option>\r\n                                          <option value=\"Pa\">\r\n                                            Pascal (Pa)\r\n                                          </option>\r\n                                          <option value=\"bar\">Bar (bar)</option>\r\n                                          <option value=\"m/s\">\r\n                                            Meters per Second (m/s)\r\n                                          </option>\r\n                                          <option value=\"km/h\">\r\n                                            Kilometers per Hour (km/h)\r\n                                          </option>\r\n                                          <option value=\"A\">Ampere (A)</option>\r\n                                          <option value=\"V\">Volt (V)</option>\r\n                                          <option value=\"W\">Watt (W)</option>\r\n                                          <option value=\"kW\">\r\n                                            Kilowatt (kW)\r\n                                          </option>\r\n                                        </select>\r\n                                      </div>\r\n                                    </Col>\r\n                                  </>\r\n                                ) : (\r\n                                  <>\r\n                                    <Col key={i} lg=\"4\" md=\"4\">\r\n                                      <Label className=\"mb-1\">\r\n                                        {ele?.dropdown?.label?._text}\r\n                                      </Label>\r\n                                      <CustomInput\r\n                                        required\r\n                                        id=\"unitType\"\r\n                                        type=\"select\"\r\n                                        placeholder=\"Select Category\"\r\n                                        name={ele?.dropdown?.name?._text}\r\n                                        value={\r\n                                          formData[ele?.dropdown?.name?._text]\r\n                                        }\r\n                                        onChange={handleInputChange}>\r\n                                        <option value=\"NA\">\r\n                                          --Select Unit--\r\n                                        </option>\r\n                                        {UnitList &&\r\n                                          UnitList?.map((cat) => (\r\n                                            <option\r\n                                              data-order={cat.primaryUnit}\r\n                                              value={cat?.unitQty}\r\n                                              key={cat?._id}>\r\n                                              {cat?.primaryUnit}\r\n                                            </option>\r\n                                          ))}\r\n                                      </CustomInput>\r\n                                    </Col>\r\n                                  </>\r\n                                )}\r\n                              </>\r\n                            );\r\n                          } else {\r\n                            return (\r\n                              <Col lg=\"4\" md=\"4\">\r\n                                <FormGroup>\r\n                                  <Label>{ele?.dropdown?.label?._text}</Label>\r\n                                  <CustomInput\r\n                                    required\r\n                                    type=\"select\"\r\n                                    name={ele?.dropdown?.name?._text}\r\n                                    value={formData[ele?.dropdown?.name?._text]}\r\n                                    onChange={handleInputChange}>\r\n                                    <option value=\"\">--Select Role--</option>\r\n                                    {ele?.dropdown?.option &&\r\n                                      ele?.dropdown?.option?.map(\r\n                                        (option, index) => (\r\n                                          <option\r\n                                            key={index}\r\n                                            value={option?._attributes?.value}>\r\n                                            {option?._attributes?.value}\r\n                                          </option>\r\n                                        )\r\n                                      )}\r\n                                  </CustomInput>\r\n                                </FormGroup>\r\n                              </Col>\r\n                            );\r\n                          }\r\n                        })}\r\n                      {/* <Col lg=\"6\" md=\"6\">\r\n                  <FormGroup>\r\n                    <Label>\r\n                      {\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.label\r\n                          ?._text\r\n                      }\r\n                    </Label>\r\n                    <CustomInput\r\n                      required\r\n                      type=\"select\"\r\n                      name={\r\n                        dropdownValue.CreateAccount?.MyDropdown?.dropdown?.name\r\n                          ?._text\r\n                      }\r\n                      value={\r\n                        formData[\r\n                          dropdownValue.CreateAccount?.MyDropdown?.dropdown\r\n                            ?.name?._text\r\n                        ]\r\n                      }\r\n                      onChange={handleInputChange}\r\n                    >\r\n                      <option value=\"\">--Select Role--</option>\r\n                      {dropdownValue?.CreateAccount?.MyDropdown?.dropdown?.option.map(\r\n                        (option, index) => (\r\n                          <option\r\n                            key={index}\r\n                            value={option?._attributes?.value}\r\n                          >\r\n                            {option?._attributes?.value}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                    </CustomInput>\r\n                  </FormGroup>\r\n                </Col> */}\r\n\r\n                      {CreatAccountView &&\r\n                        CreatAccountView?.input?.map((ele, i) => {\r\n                          {\r\n                            /* console.log(Context?.UserInformatio?.dateFormat); */\r\n                          }\r\n                          // console.log(Countries);\r\n                          // console.log(States);\r\n                          const convertedTime = moment(\"2022-08-05T12:00:00\")\r\n                            .tz(\"America/New_York\")\r\n                            .format(\"D MMM, YYYY HH:mm\");\r\n\r\n                          if (!!ele?.phoneinput) {\r\n                            return (\r\n                              <>\r\n                                <Col\r\n                                  className=\"mt-1\"\r\n                                  key={i}\r\n                                  lg=\"4\"\r\n                                  md=\"4\"\r\n                                  sm=\"12\">\r\n                                  <FormGroup>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n                                    <PhoneInput\r\n                                      inputClass=\"myphoneinput\"\r\n                                      country={\"us\"}\r\n                                      onKeyDown={(e) => {\r\n                                        if (\r\n                                          ele?.type?._attributes?.type ==\r\n                                          \"number\"\r\n                                        ) {\r\n                                          [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                            e.key\r\n                                          ) && e.preventDefault();\r\n                                        }\r\n                                      }}\r\n                                      countryCodeEditable={false}\r\n                                      name={ele?.name?._text}\r\n                                      value={formData[ele?.name?._text]}\r\n                                      onChange={(phone) => {\r\n                                        setFormData({\r\n                                          ...formData,\r\n                                          [ele?.name?._text]: phone,\r\n                                        });\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              </>\r\n                            );\r\n                          } else if (!!ele?.library) {\r\n                            if (ele?.label._text?.includes(\"ountry\")) {\r\n                              console.log(ele);\r\n                              return (\r\n                                <Col\r\n                                  className=\"mt-1\"\r\n                                  key={i}\r\n                                  lg=\"4\"\r\n                                  md=\"4\"\r\n                                  sm=\"12\">\r\n                                  <FormGroup>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n                                    <Select\r\n                                      inputClass=\"countryclass\"\r\n                                      className=\"countryclassnw\"\r\n                                      options={Country.getAllCountries()}\r\n                                      getOptionLabel={(options) => {\r\n                                        return options[\"name\"];\r\n                                      }}\r\n                                      getOptionValue={(options) => {\r\n                                        return options[\"name\"];\r\n                                      }}\r\n                                      value={Countries}\r\n                                      onChange={(country) => {\r\n                                        setCountry(country);\r\n                                        setFormData({\r\n                                          ...formData,\r\n                                          [\"Country\"]: country?.name,\r\n                                        });\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              );\r\n                            } else if (ele?.label._text?.includes(\"tate\")) {\r\n                              return (\r\n                                <Col\r\n                                  className=\"mt-1\"\r\n                                  key={i}\r\n                                  lg=\"4\"\r\n                                  md=\"4\"\r\n                                  sm=\"12\">\r\n                                  <FormGroup>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n                                    <Select\r\n                                      options={State?.getStatesOfCountry(\r\n                                        Countries?.isoCode\r\n                                      )}\r\n                                      getOptionLabel={(options) => {\r\n                                        return options[\"name\"];\r\n                                      }}\r\n                                      getOptionValue={(options) => {\r\n                                        return options[\"name\"];\r\n                                      }}\r\n                                      value={States}\r\n                                      onChange={(State) => {\r\n                                        setState(State);\r\n                                        setFormData({\r\n                                          ...formData,\r\n                                          [\"State\"]: State?.name,\r\n                                        });\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              );\r\n                            } else if (ele?.label._text?.includes(\"ity\")) {\r\n                              return (\r\n                                <Col\r\n                                  className=\"mt-1\"\r\n                                  key={i}\r\n                                  lg=\"4\"\r\n                                  md=\"4\"\r\n                                  sm=\"12\">\r\n                                  <FormGroup>\r\n                                    <Label>{ele?.label?._text}</Label>\r\n                                    <Select\r\n                                      options={City?.getCitiesOfState(\r\n                                        States?.countryCode,\r\n                                        States?.isoCode\r\n                                      )}\r\n                                      getOptionLabel={(options) => {\r\n                                        return options[\"name\"];\r\n                                      }}\r\n                                      getOptionValue={(options) => {\r\n                                        return options[\"name\"];\r\n                                      }}\r\n                                      value={Cities}\r\n                                      onChange={(City) => {\r\n                                        setCities(City);\r\n                                        setFormData({\r\n                                          ...formData,\r\n                                          [\"City\"]: City?.name,\r\n                                        });\r\n                                      }}\r\n                                    />\r\n                                    {index === i ? (\r\n                                      <>\r\n                                        {error && (\r\n                                          <span style={{ color: \"red\" }}>\r\n                                            {error}\r\n                                          </span>\r\n                                        )}\r\n                                      </>\r\n                                    ) : (\r\n                                      <></>\r\n                                    )}\r\n                                  </FormGroup>\r\n                                </Col>\r\n                              );\r\n                            } else {\r\n                              return (\r\n                                <>\r\n                                  {ele?.type?._attributes?.type == \"date\" ? (\r\n                                    <>\r\n                                      <Col\r\n                                        className=\"mt-1\"\r\n                                        key={i}\r\n                                        lg=\"4\"\r\n                                        md=\"4\"\r\n                                        sm=\"12\">\r\n                                        <FormGroup key={i}>\r\n                                          <Label>{ele?.label?._text}</Label>\r\n\r\n                                          <Input\r\n                                            onKeyDown={(e) => {\r\n                                              if (\r\n                                                ele?.type?._attributes?.type ==\r\n                                                \"number\"\r\n                                              ) {\r\n                                                [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                                  e.key\r\n                                                ) && e.preventDefault();\r\n                                              }\r\n                                            }}\r\n                                            type={ele?.type?._attributes?.type}\r\n                                            placeholder={\r\n                                              ele?.placeholder?._text\r\n                                            }\r\n                                            name={ele?.name?._text}\r\n                                            dateFormat={\r\n                                              Context?.UserInformatio\r\n                                                ?.dateFormat\r\n                                            }\r\n                                            value={\r\n                                              moment(formData[ele?.name?._text])\r\n                                                .tz(\r\n                                                  Context?.UserInformatio\r\n                                                    ?.timeZone\r\n                                                )\r\n                                                .format(\r\n                                                  Context?.UserInformatio\r\n                                                    ?.dateFormat\r\n                                                )\r\n                                              // formData[ele?.name?._text]\r\n                                            }\r\n                                            // value={formData[ele?.name?._text]}\r\n                                            onChange={(e) =>\r\n                                              handleInputChange(\r\n                                                e,\r\n                                                ele?.type?._attributes?.type,\r\n                                                i\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          {index === i ? (\r\n                                            <>\r\n                                              {error && (\r\n                                                <span style={{ color: \"red\" }}>\r\n                                                  {error}\r\n                                                </span>\r\n                                              )}\r\n                                            </>\r\n                                          ) : (\r\n                                            <></>\r\n                                          )}\r\n                                        </FormGroup>\r\n                                      </Col>\r\n                                    </>\r\n                                  ) : (\r\n                                    <>\r\n                                      <Col\r\n                                        className=\"mt-1\"\r\n                                        key={i}\r\n                                        lg=\"4\"\r\n                                        md=\"4\"\r\n                                        sm=\"12\">\r\n                                        <FormGroup key={i}>\r\n                                          <Label>{ele?.label?._text}</Label>\r\n\r\n                                          <Input\r\n                                            onKeyDown={(e) => {\r\n                                              if (\r\n                                                ele?.type?._attributes?.type ==\r\n                                                \"number\"\r\n                                              ) {\r\n                                                [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                                  e.key\r\n                                                ) && e.preventDefault();\r\n                                              }\r\n                                            }}\r\n                                            type={ele?.type?._attributes?.type}\r\n                                            placeholder={\r\n                                              ele?.placeholder?._text\r\n                                            }\r\n                                            name={ele?.name?._text}\r\n                                            value={formData[ele?.name?._text]}\r\n                                            onChange={(e) =>\r\n                                              handleInputChange(\r\n                                                e,\r\n                                                ele?.type?._attributes?.type,\r\n                                                i\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                          {index === i ? (\r\n                                            <>\r\n                                              {error && (\r\n                                                <span style={{ color: \"red\" }}>\r\n                                                  {error}\r\n                                                </span>\r\n                                              )}\r\n                                            </>\r\n                                          ) : (\r\n                                            <></>\r\n                                          )}\r\n                                        </FormGroup>\r\n                                      </Col>\r\n                                    </>\r\n                                  )}\r\n                                </>\r\n                              );\r\n                            }\r\n                          } else {\r\n                            return (\r\n                              <>\r\n                                {!!ele?.number ? (\r\n                                  <>\r\n                                    <Col\r\n                                      className=\"mt-1\"\r\n                                      key={i}\r\n                                      lg=\"4\"\r\n                                      md=\"4\"\r\n                                      sm=\"12\">\r\n                                      <FormGroup key={i}>\r\n                                        <Label>{ele?.label?._text}</Label>\r\n\r\n                                        <Input\r\n                                          onWheel={(e) => {\r\n                                            e.preventDefault(); // Prevent the mouse wheel scroll event\r\n                                          }}\r\n                                          onKeyDown={(e) => {\r\n                                            if (\r\n                                              ele?.type?._attributes?.type ==\r\n                                              \"number\"\r\n                                            ) {\r\n                                              [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                                e.key\r\n                                              ) && e.preventDefault();\r\n                                            }\r\n                                          }}\r\n                                          type={ele?.type?._attributes?.type}\r\n                                          placeholder={ele?.placeholder?._text}\r\n                                          name={ele?.name?._text}\r\n                                          value={formData[ele?.name?._text]}\r\n                                          onChange={(e) =>\r\n                                            handleInputChange(\r\n                                              e,\r\n                                              ele?.type?._attributes?.type,\r\n                                              i\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                        {index === i ? (\r\n                                          <>\r\n                                            {error && (\r\n                                              <span style={{ color: \"red\" }}>\r\n                                                {error}\r\n                                              </span>\r\n                                            )}\r\n                                          </>\r\n                                        ) : (\r\n                                          <></>\r\n                                        )}\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </>\r\n                                ) : (\r\n                                  <Col\r\n                                    className=\"mt-1\"\r\n                                    key={i}\r\n                                    lg=\"4\"\r\n                                    md=\"4\"\r\n                                    sm=\"12\">\r\n                                    <FormGroup key={i}>\r\n                                      {ele?.type?._attributes?.type &&\r\n                                      ele?.type?._attributes?.type == \"file\" ? (\r\n                                        <>\r\n                                          <Label className=\"mb-1\">\r\n                                            {ele?.label?._text}\r\n                                          </Label>\r\n\r\n                                          <Input\r\n                                            className=\"form-control\"\r\n                                            type={ele?.type?._attributes?.type}\r\n                                            placeholder={\r\n                                              ele?.placeholder?._text\r\n                                            }\r\n                                            name={ele?.name?._text}\r\n                                            //   value={formData[ele?.name?._text]}\r\n                                            onChange={(e) => {\r\n                                              // const value = e.target.value;\r\n                                              // // Use regular expression to allow only numbers\r\n                                              // const numericValue = value.replace(\r\n                                              //   /\\D/g,\r\n                                              //   \"\"\r\n                                              // );\r\n                                              handleFileChange(\r\n                                                e,\r\n                                                ele?.type?._attributes?.type,\r\n                                                i\r\n                                              );\r\n                                            }}\r\n                                          />\r\n                                          {index === i ? (\r\n                                            <>\r\n                                              {error && (\r\n                                                <span style={{ color: \"red\" }}>\r\n                                                  {error}\r\n                                                </span>\r\n                                              )}\r\n                                            </>\r\n                                          ) : (\r\n                                            <></>\r\n                                          )}\r\n                                        </>\r\n                                      ) : (\r\n                                        <>\r\n                                          <Label className=\"mb-1\">\r\n                                            {ele?.label?._text}\r\n                                          </Label>\r\n\r\n                                          <Input\r\n                                            className=\"form-control\"\r\n                                            onKeyDown={(e) => {\r\n                                              if (\r\n                                                ele?.type?._attributes?.type ==\r\n                                                \"number\"\r\n                                              ) {\r\n                                                [\"e\", \"E\", \"+\", \"-\"].includes(\r\n                                                  e.key\r\n                                                ) && e.preventDefault();\r\n                                              }\r\n                                            }}\r\n                                            type={ele?.type?._attributes?.type}\r\n                                            placeholder={\r\n                                              ele?.placeholder?._text\r\n                                            }\r\n                                            name={ele?.name?._text}\r\n                                            value={formData[ele?.name?._text]}\r\n                                            onChange={(e) => {\r\n                                              // const value = e.target.value;\r\n                                              // // Use regular expression to allow only numbers\r\n                                              // const numericValue = value.replace(\r\n                                              //   /\\D/g,\r\n                                              //   \"\"\r\n                                              // );\r\n                                              handleInputChange(\r\n                                                e,\r\n                                                ele?.type?._attributes?.type,\r\n                                                i\r\n                                              );\r\n                                            }}\r\n                                          />\r\n                                          {index === i ? (\r\n                                            <>\r\n                                              {error && (\r\n                                                <span style={{ color: \"red\" }}>\r\n                                                  {error}\r\n                                                </span>\r\n                                              )}\r\n                                            </>\r\n                                          ) : (\r\n                                            <></>\r\n                                          )}\r\n                                        </>\r\n                                      )}\r\n                                    </FormGroup>\r\n                                  </Col>\r\n                                )}\r\n                              </>\r\n                            );\r\n                          }\r\n                        })}\r\n                    </Row>\r\n\r\n                    <Row>\r\n                      <Col lg=\"4\" md=\"4\" sm=\"6\" className=\"mb-2 mt-1\">\r\n                        <Label className=\"mb-0\">Status</Label>\r\n                        <div\r\n                          className=\"form-label-group\"\r\n                          onChange={changeHandler1}>\r\n                          <input\r\n                            style={{ marginRight: \"3px\" }}\r\n                            type=\"radio\"\r\n                            name=\"status\"\r\n                            value=\"Active\"\r\n                          />\r\n                          <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                          <input\r\n                            style={{ marginRight: \"3px\" }}\r\n                            type=\"radio\"\r\n                            name=\"status\"\r\n                            value=\"Deactive\"\r\n                          />\r\n                          <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                      <Button.Ripple\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        className=\"mr-1 mt-2 mx-2\">\r\n                        Submit\r\n                      </Button.Ripple>\r\n                    </Row>\r\n                  </Form>\r\n                )}\r\n              </>\r\n            )}\r\n          </CardBody>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default AddProduct;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}