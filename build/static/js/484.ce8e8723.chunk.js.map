{"version":3,"sources":["views/apps/freshlist/zone/AddZone.js","../node_modules/reactstrap/es/FormGroup.js"],"names":["AddZone","props","useState","open","setOpen","focusAfterClose","toggle","inline","onSubmit","e","preventDefault","color","onClick","returnFocusAfterClose","isOpen","className","type","_excluded","propTypes","children","PropTypes","node","row","bool","check","disabled","tag","tagPropType","string","cssModule","object","FormGroup","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps"],"mappings":"uPAiDeA,UArCf,SAAiBC,GACf,MAAwBC,oBAAS,GAAM,mBAAhCC,EAAI,KAAEC,EAAO,KACpB,EAA8CF,oBAAS,GAAK,mBAArDG,EAAe,KAEhBC,GAFoC,KAE3B,WAAH,OAASF,GAASD,KAM9B,OACE,6BACE,kBAAC,IAAI,CAACI,QAAM,EAACC,SAAU,SAACC,GAAC,OAAKA,EAAEC,mBAC9B,kBAAC,IAAM,CAACC,MAAM,SAASC,QAASN,GAAQ,aAI1C,kBAAC,IAAK,CAACO,sBAAuBR,EAAiBS,OAAQX,GACrD,kBAAC,IAAS,KACR,kBAAC,IAAS,KAER,kBAAC,IAAK,CAACY,UAAU,GAAGC,KAAK,YACf,6LAKd,kBAAC,IAAW,KACV,kBAAC,IAAM,CAACL,MAAM,UAAUC,QAASN,GAAQ,c,iCCxCnD,2EAEIW,EAAY,CAAC,YAAa,YAAa,MAAO,WAAY,QAAS,SAAU,OAK7EC,EAAY,CACdC,SAAUC,IAAUC,KACpBC,IAAKF,IAAUG,KACfC,MAAOJ,IAAUG,KACjBhB,OAAQa,IAAUG,KAClBE,SAAUL,IAAUG,KACpBG,IAAKC,cACLZ,UAAWK,IAAUQ,OACrBC,UAAWT,IAAUU,QAMnBC,EAAY,SAAmB9B,GACjC,IAAIc,EAAYd,EAAMc,UAClBc,EAAY5B,EAAM4B,UAClBP,EAAMrB,EAAMqB,IACZG,EAAWxB,EAAMwB,SACjBD,EAAQvB,EAAMuB,MACdjB,EAASN,EAAMM,OACfyB,EAAM/B,EAAMyB,IACZO,EAAaC,YAA8BjC,EAAOgB,GAElDkB,EAAUC,0BAAgBC,IAAWtB,IAAWO,GAAM,MAAeE,EAAQ,aAAe,gBAAcA,IAASjB,IAAS,uBAA6BiB,IAASC,IAAW,YAAqBI,GAMtM,MAJY,aAARG,IACFC,EAAWR,SAAWA,GAGJa,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACpElB,UAAWoB,MAIfJ,EAAUb,UAAYA,EACtBa,EAAUU,aA1BS,CACjBf,IAAK,OA0BQK","file":"static/js/484.ce8e8723.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  Form,\r\n} from \"reactstrap\";\r\n\r\nfunction AddZone(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const [focusAfterClose, setFocusAfterClose] = useState(true);\r\n\r\n  const toggle = () => setOpen(!open);\r\n\r\n  const handleSelectChange = ({ target: { value } }) => {\r\n    setFocusAfterClose(JSON.parse(value));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form inline onSubmit={(e) => e.preventDefault()}>\r\n        <Button color=\"danger\" onClick={toggle}>\r\n          Add Zone\r\n        </Button>\r\n      </Form>\r\n      <Modal returnFocusAfterClose={focusAfterClose} isOpen={open}>\r\n        <ModalBody>\r\n          <FormGroup>\r\n            {/* <Label for=\"focusAfterClose\">Focus After Close</Label> */}\r\n            <Input className=\"\" type=\"search\" />\r\n          </FormGroup>\r\n          Observe the &ldquo;Open&ldquo; button. It will be focused after close\r\n          when &ldquo;returnFocusAfterClose&ldquo; is true and will not be\r\n          focused if &ldquo;returnFocusAfterClose&ldquo; is false.\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={toggle}>\r\n            Close\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddZone;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"row\", \"disabled\", \"check\", \"inline\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  children: PropTypes.node,\n  row: PropTypes.bool,\n  check: PropTypes.bool,\n  inline: PropTypes.bool,\n  disabled: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar FormGroup = function FormGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      row = props.row,\n      disabled = props.disabled,\n      check = props.check,\n      inline = props.inline,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, row ? 'row' : false, check ? 'form-check' : 'form-group', check && inline ? 'form-check-inline' : false, check && disabled ? 'disabled' : false), cssModule);\n\n  if (Tag === 'fieldset') {\n    attributes.disabled = disabled;\n  }\n\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nFormGroup.propTypes = propTypes;\nFormGroup.defaultProps = defaultProps;\nexport default FormGroup;"],"sourceRoot":""}