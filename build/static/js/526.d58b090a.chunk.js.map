{"version":3,"sources":["views/apps/freshlist/batch/BatchList.js"],"names":["i","BatchList","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","batch","rack_no","shelf_life","expiry_date","stock","notify","value","className","status","render","history","size","color","onClick","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","delete","error","this","sm","tag","length","right","placeholder","onChange","e","target","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/526.d58b090a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Label,\r\n  CustomInput,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport axios from \"axios\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Edit, Trash2, ChevronDown, Eye } from \"react-feather\";\r\nimport { history } from \"../../../../history\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport { Route, Link } from \"react-router-dom\";\r\n\r\nclass BatchList extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 80,\r\n        filter: true,\r\n      },\r\n      {\r\n        headerName: \"Batch Name\",\r\n        field: \"batch\",\r\n        filter: true,\r\n        width: 100,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.batch}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Rack No.\",\r\n        field: \"rack_no\",\r\n        filter: true,\r\n        width: 100,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.rack_no}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Shelf Life\",\r\n        field: \"shelf_life\",\r\n        filter: true,\r\n        width: 100,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.shelf_life}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Expiry Date\",\r\n        field: \"expiry_date\",\r\n        filter: true,\r\n        width: 100,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.expiry_date}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Stock\",\r\n        field: \"stock\",\r\n        filter: true,\r\n        width: 100,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div>\r\n              <span>{params.data?.stock}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Notify\",\r\n        field: \"notify\",\r\n        filter: true,\r\n        width: 100,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.notify}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Status\",\r\n        field: \"status\",\r\n        filter: true,\r\n        width: 100,\r\n        cellRendererFramework: params => {\r\n          return params.value === \"Active\" ? (\r\n            <div className=\"badge badge-pill badge-success\">\r\n              {params.data.status}\r\n            </div>\r\n          ) : params.value === \"Deactive\" ? (\r\n            <div className=\"badge badge-pill badge-warning\">\r\n              {params.data.status}\r\n            </div>\r\n          ) : null;\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        // eslint-disable-next-line no-dupe-keys\r\n        field: \"transactions\",\r\n        width: 150,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Route\r\n                render={({ history }) => (\r\n                  <>\r\n                    <Eye\r\n                      className=\"mr-50\"\r\n                      size=\"25px\"\r\n                      color=\"green\"\r\n                      onClick={() =>\r\n                        history.push(\r\n                          `/app/freshlist/batch/viewBatch/${params.data._id}`\r\n                        )\r\n                      }\r\n                    />\r\n                    <Edit\r\n                      className=\"mr-50\"\r\n                      size=\"25px\"\r\n                      color=\"blue\"\r\n                      onClick={() =>\r\n                        history.push(\r\n                          `/app/freshlist/batch/editBatch/${params.data._id}`\r\n                        )\r\n                      }\r\n                    />\r\n                    <Trash2\r\n                      className=\"mr-50\"\r\n                      size=\"25px\"\r\n                      color=\"red\"\r\n                      onClick={() => {\r\n                        let selectedData = this.gridApi.getSelectedRows();\r\n                        this.runthisfunction(params.data._id);\r\n                        this.gridApi.updateRowData({ remove: selectedData });\r\n                      }}\r\n                    />\r\n                  </>\r\n                )}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await axiosConfig.get(`/admin/getall_batch`).then(response => {\r\n      let rowData = response.data.data;\r\n      console.log(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n\r\n  async runthisfunction(id) {\r\n    console.log(id);\r\n    await axiosConfig.delete(`/admin/viewone_addbatch/${id}`).then(\r\n      response => {\r\n        console.log(response);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  onGridReady = params => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n  updateSearchQuery = val => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n  filterSize = val => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      console.log(rowData),\r\n      (\r\n        <Row className=\"app-user-list\">\r\n          <Col sm=\"12\"></Col>\r\n          <Col sm=\"12\">\r\n            <Card>\r\n              <Row className=\"m-2\">\r\n                <Col>\r\n                  <h1 sm=\"6\" className=\"float-left\">\r\n                    Batch List\r\n                  </h1>\r\n                </Col>\r\n                <Col>\r\n                  <Route\r\n                    render={({ history }) => (\r\n                      <Button\r\n                        className=\"btn float-right\"\r\n                        color=\"primary\"\r\n                        onClick={() =>\r\n                          history.push(\"/app/freshlist/batch/addbatch\")\r\n                        }\r\n                      >\r\n                        Add Batch\r\n                      </Button>\r\n                    )}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <CardBody>\r\n                {this.state.rowData === null ? null : (\r\n                  <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                    <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                      <div className=\"mb-1\">\r\n                        <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                          <DropdownToggle tag=\"div\">\r\n                            {this.gridApi\r\n                              ? this.state.currenPageSize\r\n                              : \"\" * this.state.getPageSize -\r\n                                (this.state.getPageSize - 1)}{\" \"}\r\n                            -{\" \"}\r\n                            {this.state.rowData.length -\r\n                              this.state.currenPageSize *\r\n                                this.state.getPageSize >\r\n                            0\r\n                              ? this.state.currenPageSize *\r\n                                this.state.getPageSize\r\n                              : this.state.rowData.length}{\" \"}\r\n                            of {this.state.rowData.length}\r\n                            <ChevronDown className=\"ml-50\" size={15} />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu right>\r\n                            <DropdownItem\r\n                              tag=\"div\"\r\n                              onClick={() => this.filterSize(20)}\r\n                            >\r\n                              20\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              tag=\"div\"\r\n                              onClick={() => this.filterSize(50)}\r\n                            >\r\n                              50\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              tag=\"div\"\r\n                              onClick={() => this.filterSize(100)}\r\n                            >\r\n                              100\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              tag=\"div\"\r\n                              onClick={() => this.filterSize(134)}\r\n                            >\r\n                              134\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </div>\r\n                      <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                        <div className=\"table-input mr-1\">\r\n                          <Input\r\n                            placeholder=\"search...\"\r\n                            onChange={e =>\r\n                              this.updateSearchQuery(e.target.value)\r\n                            }\r\n                            value={this.state.value}\r\n                          />\r\n                        </div>\r\n                        <div className=\"export-btn\">\r\n                          <Button.Ripple\r\n                            color=\"primary\"\r\n                            onClick={() => this.gridApi.exportDataAsCsv()}\r\n                          >\r\n                            Export as CSV\r\n                          </Button.Ripple>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <ContextLayout.Consumer>\r\n                      {context => (\r\n                        <AgGridReact\r\n                          gridOptions={{}}\r\n                          rowSelection=\"multiple\"\r\n                          defaultColDef={defaultColDef}\r\n                          columnDefs={columnDefs}\r\n                          rowData={rowData}\r\n                          onGridReady={this.onGridReady}\r\n                          colResizeDefault={\"shift\"}\r\n                          animateRows={true}\r\n                          floatingFilter={false}\r\n                          pagination={true}\r\n                          paginationPageSize={this.state.paginationPageSize}\r\n                          pivotPanelShow=\"always\"\r\n                          enableRtl={context.state.direction === \"rtl\"}\r\n                        />\r\n                      )}\r\n                    </ContextLayout.Consumer>\r\n                  </div>\r\n                )}\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )\r\n    );\r\n  }\r\n}\r\nexport default BatchList;\r\n"],"sourceRoot":""}