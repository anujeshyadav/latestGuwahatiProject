{"version":3,"sources":["views/apps/freshlist/customer/CustomerGroup.js"],"names":["i","CustomerGroup","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","data","username","value","className","status","size","color","onClick","history","push","_id","selectedData","gridApi","getSelectedRows","runthisfunction","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","axiosConfig","get","then","response","console","log","id","axios","error","this","sm","render","tag","length","right","placeholder","onChange","e","target","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/540.0d44472b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\nimport { history } from \"../../../../history\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nclass CustomerGroup extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 150,\r\n        filter: true,\r\n      },\r\n      {\r\n        headerName: \" Name\",\r\n        field: \"username\",\r\n        filter: true,\r\n        width: 200,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div>\r\n              <span>{params.data.username}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n\r\n      {\r\n        headerName: \"Status\",\r\n        field: \"status\",\r\n        filter: true,\r\n        width: 150,\r\n        cellRendererFramework: params => {\r\n          return params.value === \"true\" ? (\r\n            <div className=\"badge badge-pill badge-success\">\r\n              {params.data.status}\r\n            </div>\r\n          ) : params.value === \"false\" ? (\r\n            <div className=\"badge badge-pill badge-warning\">\r\n              {params.data.status}\r\n            </div>\r\n          ) : null;\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        field: \"transactions\",\r\n        width: 150,\r\n        cellRendererFramework: params => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Eye\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"green\"\r\n                onClick={() =>\r\n                  history.push(\r\n                    `/app/freshlist/customer/viewCustomer/${params.data._id}`\r\n                  )\r\n                }\r\n              />\r\n              <Edit\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"blue\"\r\n                onClick={() =>\r\n                  history.push(\r\n                    `/app/freshlist/customer/editCustomer/${params.data._id}`\r\n                  )\r\n                }\r\n              />\r\n              <Trash2\r\n                className=\"mr-50\"\r\n                size=\"25px\"\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  let selectedData = this.gridApi.getSelectedRows();\r\n                  this.runthisfunction(params.data._id);\r\n                  this.gridApi.updateRowData({ remove: selectedData });\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await axiosConfig.get(\"/user/userlist\").then(response => {\r\n      let rowData = response.data.data;\r\n      console.log(rowData);\r\n      this.setState({ rowData });\r\n    });\r\n  }\r\n  async runthisfunction(id) {\r\n    console.log(id);\r\n    await axios.get(`/user/dlt_user/${id}`).then(\r\n      response => {\r\n        console.log(response);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n  onGridReady = params => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n  updateSearchQuery = val => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n  filterSize = val => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      console.log(rowData),\r\n      (\r\n        <Row className=\"app-user-list\">\r\n          <Col sm=\"12\"></Col>\r\n          <Col sm=\"12\">\r\n            <Card>\r\n              <Row className=\"m-2\">\r\n                <Col>\r\n                  <h1 sm=\"6\" className=\"float-left\">\r\n                    Customer Group\r\n                  </h1>\r\n                </Col>\r\n                <Col>\r\n                  <Route\r\n                    render={({ history }) => (\r\n                      <Button\r\n                        sm=\"6\"\r\n                        className=\"float-right\"\r\n                        color=\"primary\"\r\n                        onClick={() =>\r\n                          history.push(`/app/freshlist/customer/AddCustomer`)\r\n                        }\r\n                      >\r\n                        Add New\r\n                      </Button>\r\n                    )}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <CardBody>\r\n                {this.state.rowData === null ? null : (\r\n                  <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                    <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                      <div className=\"mb-1\">\r\n                        <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                          <DropdownToggle tag=\"div\">\r\n                            {this.gridApi\r\n                              ? this.state.currenPageSize\r\n                              : \"\" * this.state.getPageSize -\r\n                                (this.state.getPageSize - 1)}{\" \"}\r\n                            -{\" \"}\r\n                            {this.state.rowData.length -\r\n                              this.state.currenPageSize *\r\n                                this.state.getPageSize >\r\n                            0\r\n                              ? this.state.currenPageSize *\r\n                                this.state.getPageSize\r\n                              : this.state.rowData.length}{\" \"}\r\n                            of {this.state.rowData.length}\r\n                            <ChevronDown className=\"ml-50\" size={15} />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu right>\r\n                            <DropdownItem\r\n                              tag=\"div\"\r\n                              onClick={() => this.filterSize(20)}\r\n                            >\r\n                              20\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              tag=\"div\"\r\n                              onClick={() => this.filterSize(50)}\r\n                            >\r\n                              50\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              tag=\"div\"\r\n                              onClick={() => this.filterSize(100)}\r\n                            >\r\n                              100\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              tag=\"div\"\r\n                              onClick={() => this.filterSize(134)}\r\n                            >\r\n                              134\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </div>\r\n                      <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                        <div className=\"table-input mr-1\">\r\n                          <Input\r\n                            placeholder=\"search...\"\r\n                            onChange={e =>\r\n                              this.updateSearchQuery(e.target.value)\r\n                            }\r\n                            value={this.state.value}\r\n                          />\r\n                        </div>\r\n                        <div className=\"export-btn\">\r\n                          <Button.Ripple\r\n                            color=\"primary\"\r\n                            onClick={() => this.gridApi.exportDataAsCsv()}\r\n                          >\r\n                            Export as CSV\r\n                          </Button.Ripple>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <ContextLayout.Consumer>\r\n                      {context => (\r\n                        <AgGridReact\r\n                          gridOptions={{}}\r\n                          rowSelection=\"multiple\"\r\n                          defaultColDef={defaultColDef}\r\n                          columnDefs={columnDefs}\r\n                          rowData={rowData}\r\n                          onGridReady={this.onGridReady}\r\n                          colResizeDefault={\"shift\"}\r\n                          animateRows={true}\r\n                          floatingFilter={false}\r\n                          pagination={true}\r\n                          paginationPageSize={this.state.paginationPageSize}\r\n                          pivotPanelShow=\"always\"\r\n                          enableRtl={context.state.direction === \"rtl\"}\r\n                        />\r\n                      )}\r\n                    </ContextLayout.Consumer>\r\n                  </div>\r\n                )}\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      )\r\n    );\r\n  }\r\n}\r\nexport default CustomerGroup;\r\n"],"sourceRoot":""}