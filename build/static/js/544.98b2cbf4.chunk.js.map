{"version":3,"sources":["views/apps/freshlist/customer/HRM/RecPLace/jobForm.js"],"names":["i","JoForm","history","useHistory","useState","jobTitle","branch","jobCategory","numberOfPositions","status","startDate","endDate","skills","jobDescription","jobRequirements","data","setData","branchModal","setBranchModal","categoryModal","setCategoryModal","newCategory","setNewCategory","categories","setCategories","newBranch","setNewBranch","branches","setBranches","toggleBranchModal","toggleCategoryModal","showCategoriesModal","setShowCategoriesModal","toggleCategoriesModal","showBranchesModal","setShowBranchesModal","toggleBranchesModal","handleSubmit","e","preventDefault","_PostSave","HRM_CREATE_JOB","resetForm","push","console","log","handleRemoveCategory","categoryId","_Delete","HRM_JOB_DELETE_CATEGORY","updatedCategories","filter","category","_id","error","message","handleRemoveBranch","branchId","HRM_BRANCH_DELETE","updatedBranches","handleInputChange","target","name","value","handleCreateCategory","trim","HRM_JOB_CATEGORY","res","fetchJobCategories","success","_GetList","HRM_JOB_VIEW_CATEGORY","JobCategory","useEffect","handleCreateBranch","HRM_BRANCH_CATEGORY","getBranches","HRM_BRANCH_VIEW","JobBatch","color","onClick","goBack","onSubmit","md","for","required","type","id","onChange","placeholder","style","cursor","boxShadow","border","backgroundColor","borderRadius","size","marginLeft","map","key","className","marginRight","checked","row","sm","offset","isOpen","toggle","backdrop","width","margin","fontSize","padding","outline","CombinedCard","customFormData","handleCustomInputChange","class","check","gender","dateOfBirth","address","profileImage","resume","coverLetter","termsAndConditions","weakness","jobReason","companyReason","JobForm","setCustomFormData","field"],"mappings":"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","file":"static/js/544.98b2cbf4.chunk.js","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card, CardBody, CardHeader, Form, FormGroup, Label, Input, Row, Col, Button, Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from 'reactstrap';\r\nimport {\r\n  HRM_BRANCH_CATEGORY,\r\n  HRM_BRANCH_VIEW,\r\n  HRM_BRANCH_DELETE\r\n} from '../../../../../../ApiEndPoint/Api';\r\nimport {\r\n  HRM_JOB_CATEGORY,\r\n  HRM_JOB_VIEW_CATEGORY,\r\n  HRM_JOB_DELETE_CATEGORY\r\n} from '../../../../../../ApiEndPoint/Api';\r\nimport {  _GetList } from '../../../../../../ApiEndPoint/ApiCalling';\r\nimport { _PostSave } from '../../../../../../ApiEndPoint/ApiCalling';\r\nimport { IoIosAdd } from 'react-icons/io';\r\nimport { FiMinus } from \"react-icons/fi\";\r\nimport { _Delete } from '../../../../../../ApiEndPoint/ApiCalling';\r\nimport { HRM_CREATE_JOB } from '../../../../../../ApiEndPoint/Api';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst JoForm = () => {\r\n  const history = useHistory();\r\n  const [data, setData] = useState({\r\n\r\n    jobTitle: '',\r\n    branch: '',\r\n    jobCategory: '',\r\n    numberOfPositions: '',\r\n    status: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    skills: '',\r\n    jobDescription: '',\r\n    jobRequirements: '',\r\n  });\r\n\r\n  const [branchModal, setBranchModal] = useState(false);\r\n  const [categoryModal, setCategoryModal] = useState(false);\r\n  const [newCategory, setNewCategory] = useState('');\r\n  const [categories, setCategories] = useState([]);\r\n  const [newBranch, setNewBranch] = useState('');\r\n  const [branches, setBranches] = useState([]);\r\n\r\n  const toggleBranchModal = () => setBranchModal(!branchModal);\r\n  const toggleCategoryModal = () => setCategoryModal(!categoryModal);\r\n\r\n  const [showCategoriesModal, setShowCategoriesModal] = useState(false);\r\n  const toggleCategoriesModal = () => setShowCategoriesModal(!showCategoriesModal);\r\n\r\n  const [showBranchesModal, setShowBranchesModal] = useState(false);\r\n  const toggleBranchesModal = () => setShowBranchesModal(!showBranchesModal);\r\n\r\n\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await _PostSave(HRM_CREATE_JOB, data);\r\n      resetForm();\r\n      history.push(\"/app/ajgroup/HRM/JobList\",);\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n    }\r\n    console.log('Form submitted:', data);\r\n  };\r\n\r\n\r\n\r\n\r\n  const resetForm = () => {\r\n    setData({\r\n      jobTitle: '',\r\n      branch: '',\r\n      jobCategory: '',\r\n      numberOfPositions: '',\r\n      status: '',\r\n      startDate: '',\r\n      endDate: '',\r\n      skills: '',\r\n      jobDescription: '',\r\n      jobRequirements: '',\r\n    });\r\n  };\r\n\r\n  const handleRemoveCategory = async (categoryId) => {\r\n    try {\r\n      console.log('Deleting category:', categoryId);\r\n      await _Delete(HRM_JOB_DELETE_CATEGORY, categoryId);\r\n\r\n   \r\n      const updatedCategories = categories?.filter((category) => category?._id !== categoryId);\r\n      setCategories(updatedCategories);\r\n    \r\n    } catch (error) {\r\n      console.error('Error deleting category:', error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const handleRemoveBranch = async (branchId) => {\r\n    try {\r\n      await _Delete(HRM_BRANCH_DELETE, branchId);\r\n\r\n      const updatedBranches = branches?.filter((branch) => branch?._id !== branchId);\r\n      setBranches(updatedBranches);\r\n\r\n    } catch (error) {\r\n      console.error('Error deleting category:', error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData({ ...data, [name]: value });\r\n  };\r\n\r\n\r\n\r\n  const handleCreateCategory = async (e) => {\r\n    e.preventDefault();\r\n    console.log(newCategory)\r\n    if (newCategory.trim() === '') {\r\n      console.error('New category cannot be empty');\r\n      return;\r\n    }\r\n    try {\r\n      const res = await _PostSave(HRM_JOB_CATEGORY, { name: newCategory });\r\n      console.log(res);\r\n      toggleCategoryModal()\r\n      fetchJobCategories()\r\n      if (res && res.success) {\r\n        setNewCategory('');\r\n\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n\r\n  const fetchJobCategories = async () => {\r\n    try {\r\n      const res = await _GetList(HRM_JOB_VIEW_CATEGORY, newCategory);\r\n      setCategories(res?.JobCategory);\r\n      console.log(res)\r\n\r\n      if (res && res.success) {\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n\r\n    fetchJobCategories();\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  const handleCreateBranch = async (e) => {\r\n    e.preventDefault();\r\n    console.log(newBranch)\r\n    if (newBranch.trim() === '') {\r\n      console.error('New branch cannot be empty');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await _PostSave(HRM_BRANCH_CATEGORY, { name: newBranch });\r\n      console.log(res);\r\n      toggleBranchModal()\r\n      getBranches();\r\n\r\n      if (res && res.success) {\r\n        // setBranches([...branches, newBranch.trim()]);\r\n        setNewBranch('');\r\n\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n\r\n  const getBranches = async () => {\r\n    try {\r\n      const res = await _GetList(HRM_BRANCH_VIEW, newBranch);\r\n      // debugger\r\n      if (res && res?.status) {\r\n        setBranches(res?.JobBatch);\r\n        // console.log(res.JobBatch)\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBranches();\r\n  }, []);\r\n\r\n\r\n  const handleBack = () => {\r\n    history.goBack();\r\n  };\r\n\r\n\r\n  return (\r\n\r\n    <Card >\r\n      <CardHeader>\r\n        <h2>Job Form</h2>\r\n        <Button color=\"danger\" onClick={handleBack}>\r\n          Back\r\n        </Button>\r\n\r\n\r\n      </CardHeader>\r\n      <CardBody>\r\n\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n\r\n          <Row >\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"jobTitle\">Job Title</Label>\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"text\"\r\n                  name=\"jobTitle\"\r\n                  id=\"jobTitle\"\r\n                  value={data.jobTitle}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter job title\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"branch\">Branch</Label>    <span onClick={toggleBranchModal} style={{ cursor: 'pointer', boxShadow: '0 6px 8px rgba(0, 0, 0, 0.1)', border: '1px solid #ccc', backgroundColor: 'lightblue', borderRadius: '15px', }} size=\"sm\">\r\n                  <IoIosAdd size={17} color=\"blue\" />\r\n                </span>\r\n                <span onClick={toggleBranchesModal} style={{ cursor: 'pointer', boxShadow: '0 6px 8px rgba(0, 0, 0, 0.1)', border: '1px solid #ccc', backgroundColor: 'lightblue', marginLeft: '3%', borderRadius: '15px', }} size=\"sm\">\r\n                  <FiMinus size={16} color=\"blue\" />\r\n                </span>\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"select\"\r\n                  name=\"branch\"\r\n                  id=\"branch\"\r\n                  value={data.branch}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Select Branch\"\r\n                >\r\n                  <option value=\"\">Select Branch</option>\r\n                  {/* {branches && branches.map((branch) => (\r\n                    <option key={branch?._id} value={branch?._id}>\r\n                      {branch?.name}\r\n                    </option>\r\n                  ))} */}\r\n                  {branches &&\r\n                    branches\r\n                      .filter((branch) => branch?.name.trim() !== '')\r\n                      .map((branch) => (\r\n                        <option key={branch?._id} value={branch?._id}>\r\n                          {branch?.name}\r\n                        </option>\r\n                      ))}\r\n                </Input>\r\n              </FormGroup>\r\n\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"jobCategory\">Job Category</Label>  < span onClick={toggleCategoryModal} style={{ cursor: 'pointer', boxShadow: '0 6px 8px rgba(0, 0, 0, 0.1)', border: '1px solid #ccc', backgroundColor: 'lightblue', borderRadius: '15px', }} size=\"sm\">\r\n                  <IoIosAdd size={17} color=\"blue\" />\r\n                </span>\r\n                < span onClick={toggleCategoriesModal} style={{ cursor: 'pointer', boxShadow: '0 6px 8px rgba(0, 0, 0, 0.1)', border: '1px solid #ccc', backgroundColor: 'lightblue', marginLeft: '3%', borderRadius: '15px', }} size=\"sm\">\r\n                  <FiMinus size={16} color=\"blue\" />\r\n                </span>\r\n\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"select\"\r\n                  name=\"jobCategory\"\r\n                  id=\"jobCategory\"\r\n                  value={data.jobCategory}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Select job category\"\r\n\r\n                >\r\n                  <option value=\"\">Select Job Category</option>\r\n                  {/* {categories &&\r\n                    categories.map((category) => (\r\n                      <option key={category?._id} value={category?._id}>\r\n                        {category?.name}\r\n                      </option>\r\n                    ))} */}\r\n\r\n                  {categories &&\r\n                    categories\r\n                      .filter((category) => category?.name.trim() !== '')\r\n                      .map((category) => (\r\n                        <option key={category?._id} value={category?._id}>\r\n                          {category?.name}\r\n                        </option>\r\n                      ))}\r\n                  {/* {showRemoveButtons && (\r\n                    <div>\r\n                      {categories.map((category) => (\r\n                        <button\r\n                          key={category?._id}\r\n                          onClick={() => handleRemoveCategory(category?._id)}\r\n                        >\r\n                          {category?.name}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  )} */}\r\n                </Input>\r\n\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"numberOfPositions\">Number of Positions</Label>\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"Number\"\r\n                  name=\"numberOfPositions\"\r\n                  id=\"numberOfPositions\"\r\n                  value={data.numberOfPositions}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter number of positions\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"startDate\">Start Date</Label>\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"date\"\r\n                  name=\"startDate\"\r\n                  id=\"startDate\"\r\n                  value={data.startDate}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Select start date\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"endDate\">End Date</Label>\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"date\"\r\n                  name=\"endDate\"\r\n                  id=\"endDate\"\r\n                  value={data.endDate}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Select end date\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label>Status</Label>\r\n                <div className=\"form-label-group\">\r\n                  <input\r\n                    required\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Active\"\r\n                    checked={data.status === \"Active\"}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                  <input\r\n                    required\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Deactive\"\r\n                    checked={data.status === \"Deactive\"}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                </div>\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"skill\">Skill</Label>\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"\"\r\n                  name=\"skills\"\r\n                  id=\"skills\"\r\n                  value={data.skills}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter required skills\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"jobDescription\">Job Description</Label>\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"textarea\"\r\n                  name=\"jobDescription\"\r\n                  id=\"jobDescription\"\r\n                  value={data.jobDescription}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter job description\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"jobRequirement\">Job Requirement</Label>\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"textarea\"\r\n                  name=\"jobRequirements\"\r\n                  id=\"jobRequirements\"\r\n                  value={data.jobRequirements}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter job requirements\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <FormGroup row>\r\n            <Col sm={{ size: 8, offset: 5 }}>\r\n              <Button color=\"primary\" type=\"submit\">\r\n                Create\r\n              </Button>\r\n            </Col>\r\n          </FormGroup>\r\n        </Form>\r\n\r\n        <Form>\r\n\r\n          <FormGroup>\r\n\r\n            <Modal isOpen={branchModal} toggle={toggleBranchModal} backdrop=\"static\">\r\n              <ModalHeader toggle={toggleBranchModal}>Create New Branch</ModalHeader>\r\n              <ModalBody>\r\n                <Label for=\"newBranch\">Create Branch : </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={newBranch}\r\n                  onChange={(e) => setNewBranch(e.target.value)}\r\n                  placeholder=\"Enter new branch\"\r\n                  style={{ width: '85%', margin: '10px' }}\r\n                />\r\n\r\n\r\n\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggleBranchModal} style={{ fontSize: '15px', padding: '10px 10px' }}>\r\n                  Cancel\r\n                </Button>\r\n\r\n                <Button color=\"success\" onClick={handleCreateBranch} style={{ fontSize: '15px', padding: '10px 10px' }}> Create </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Modal isOpen={categoryModal} toggle={toggleCategoryModal} backdrop=\"static\">\r\n              <ModalHeader toggle={toggleCategoryModal}>Create Job Category</ModalHeader>\r\n              <ModalBody>\r\n                <Label for=\"newcategory\"> Create Category : </Label>\r\n\r\n                <Input\r\n                  required=\"required\"\r\n                  type=\"text\"\r\n                  value={newCategory}\r\n                  onChange={(e) => setNewCategory(e.target.value)}\r\n                  placeholder=\"Enter new category\"\r\n                  style={{ width: '85%', margin: '10px' }}\r\n                />\r\n\r\n              </ModalBody>\r\n\r\n              <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggleCategoryModal} style={{ fontSize: '15px', padding: '10px 10px' }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button color=\"success\" onClick={handleCreateCategory} style={{ fontSize: '15px', padding: '10px 10px' }}> Create </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Modal isOpen={showCategoriesModal} toggle={toggleCategoriesModal} backdrop=\"static\">\r\n              <ModalHeader toggle={toggleCategoriesModal}>Manage Categories</ModalHeader>\r\n              <ModalBody>\r\n                <ul className=\"list-group\">\r\n                  {categories\r\n                    .filter(category => category.name)\r\n                    .map((category) => (\r\n                      <li key={category?._id} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                        {category?.name}\r\n                        \r\n                        <Button\r\n                          color=\"danger\"\r\n                          outline\r\n                          onClick={() => handleRemoveCategory(category?._id)}\r\n                        >\r\n                          Remove\r\n                        </Button>\r\n\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggleCategoriesModal}>\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Modal isOpen={showBranchesModal} toggle={toggleBranchesModal} backdrop=\"static\">\r\n              <ModalHeader toggle={toggleBranchesModal}>Manage Branches</ModalHeader>\r\n              <ModalBody>\r\n                <ul className=\"list-group\">\r\n                  {branches\r\n                    .filter(branch => branch.name)\r\n                    .map((branch) => (\r\n                      <li key={branch?._id} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                        {branch?.name}\r\n                        <Button\r\n                          color=\"danger\"\r\n                          outline\r\n                          // onClick={() => handleRemoveItem(branch?._id, 'branch')}\r\n                          onClick={() => handleRemoveBranch(branch?._id)}\r\n                        >\r\n                          Remove\r\n                        </Button>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggleBranchesModal}>\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          </FormGroup>\r\n        </Form>\r\n\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\n\r\n// export default JobForm;\r\n\r\n\r\n\r\n\r\n// const CustomQuestionsCard = ({ customFormData, handleCustomInputChange }) => {\r\n//   return (\r\n//     <Card>\r\n//       <CardBody>\r\n//         <h3>Custom Questions</h3>\r\n//         <Form>\r\n//           {/* Custom Questions */}\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.weakness}\r\n//                 onChange={() => handleCustomInputChange('weakness')}\r\n//               />\r\n//               What Do You Consider to Be Your Weaknesses? *\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.jobReason}\r\n//                 onChange={() => handleCustomInputChange('jobReason')}\r\n//               />\r\n//               Why Do You Want This Job?\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.companyReason}\r\n//                 onChange={() => handleCustomInputChange('companyReason')}\r\n//               />\r\n//               Why Do You Want to Work at This Company?\r\n//             </Label>\r\n//           </FormGroup>\r\n//         </Form>\r\n//       </CardBody>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n// const NeedToAskCard = ({ customFormData, handleCustomInputChange }) => {\r\n//   return (\r\n//     <Card>\r\n//       <CardBody>\r\n//         <h3>Need to Ask?</h3>\r\n//         <Form>\r\n//           {/* Need to Ask? Section */}\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.gender}\r\n//                 onChange={() => handleCustomInputChange('gender')}\r\n//               />\r\n//               Gender\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.dateOfBirth}\r\n//                 onChange={() => handleCustomInputChange('dateOfBirth')}\r\n//               />\r\n//               Date Of Birth\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.address}\r\n//                 onChange={() => handleCustomInputChange('address')}\r\n//               />\r\n//               Address\r\n//             </Label>\r\n//           </FormGroup>\r\n//         </Form>\r\n//       </CardBody>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n// const OptionsCard = ({ customFormData, handleCustomInputChange }) => {\r\n//   return (\r\n//     <Card>\r\n//       <CardBody>\r\n//         <h3>Options</h3>\r\n//         <Form>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.profileImage}\r\n//                 onChange={() => handleCustomInputChange('profileImage')}\r\n//               />\r\n//               Profile Image\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.resume}\r\n//                 onChange={() => handleCustomInputChange('resume')}\r\n//               />\r\n//               Resume\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.coverLetter}\r\n//                 onChange={() => handleCustomInputChange('coverLetter')}\r\n//               />\r\n//               Cover Letter\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.termsAndConditions}\r\n//                 onChange={() => handleCustomInputChange('termsAndConditions')}\r\n//               />\r\n//               Terms And Conditions\r\n//             </Label>\r\n//           </FormGroup>\r\n//         </Form>\r\n//       </CardBody>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n\r\n\r\n// export default MainComponent;\r\n\r\nconst CombinedCard = ({ customFormData, handleCustomInputChange }) => {\r\n  return (\r\n    <Card >\r\n      <CardBody>\r\n        <Form>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <h3>Need to Ask?</h3>\r\n              <div class=\"my-4\">\r\n                <FormGroup check>\r\n\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.gender}\r\n                      onChange={() => handleCustomInputChange('gender')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.gender ? 'green' : 'transparent' }}></span>\r\n                    Gender\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.dateOfBirth}\r\n                      onChange={() => handleCustomInputChange('dateOfBirth')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.dateOfBirth ? 'green' : 'transparent' }}></span>\r\n                    Date Of Birth\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.address}\r\n                      onChange={() => handleCustomInputChange('address')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.address ? 'green' : 'transparent' }}></span>\r\n                    Address\r\n                  </Label>\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"col-md-6\">\r\n              <h3> Need to show Options ?</h3>\r\n              <div class=\"my-4\">\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.profileImage}\r\n                      onChange={() => handleCustomInputChange('profileImage')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.profileImage ? 'green' : 'transparent' }}></span>\r\n                    Profile Image\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.resume}\r\n                      onChange={() => handleCustomInputChange('resume')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.resume ? 'green' : 'transparent' }}></span>\r\n                    Resume\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.coverLetter}\r\n                      onChange={() => handleCustomInputChange('coverLetter')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.coverLetter ? 'green' : 'transparent' }}></span>\r\n                    Cover Letter\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.termsAndConditions}\r\n                      onChange={() => handleCustomInputChange('termsAndConditions')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.termsAndConditions ? 'green' : 'transparent' }}></span>\r\n                    Terms And Conditions\r\n                  </Label>\r\n\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <h3>Custom Questions</h3>\r\n              <div class=\"my-4\">\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.weakness}\r\n                      onChange={() => handleCustomInputChange('weakness')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.weakness ? 'green' : 'transparent' }}></span>\r\n                    What Do You Consider to Be Your Weaknesses? *\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.jobReason}\r\n                      onChange={() => handleCustomInputChange('jobReason')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.jobReason ? 'green' : 'transparent' }}></span>\r\n                    Why Do You Want This Job?\r\n                  </Label>\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                  <Label check>\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      checked={customFormData.companyReason}\r\n                      onChange={() => handleCustomInputChange('companyReason')}\r\n                    />\r\n                    <span className=\"checkmark\" style={{ backgroundColor: customFormData.companyReason ? 'green' : 'transparent' }}></span>\r\n                    Why Do You Want to Work at This Company?\r\n                  </Label>\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n        </Form>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst JobForm = () => {\r\n  const [customFormData, setCustomFormData] = useState({\r\n    weakness: false,\r\n    jobReason: false,\r\n    companyReason: false,\r\n    gender: false,\r\n    dateOfBirth: false,\r\n    address: false,\r\n    profileImage: false,\r\n    resume: false,\r\n    coverLetter: false,\r\n    termsAndConditions: false,\r\n  });\r\n\r\n  const handleCustomInputChange = (field) => {\r\n    setCustomFormData({ ...customFormData, [field]: !customFormData[field] });\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col  >\r\n          <JoForm />\r\n        </Col>\r\n        <Col >\r\n          <CombinedCard customFormData={customFormData} handleCustomInputChange={handleCustomInputChange} />\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobForm;"],"sourceRoot":""}