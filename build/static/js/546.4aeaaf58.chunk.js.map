{"version":3,"sources":["views/apps/freshlist/customer/HRM/ViewHrm/JobviewList.js"],"names":["i","JoForm","useState","jobTitle","branch","jobCategory","numberOfPositions","status","startDate","endDate","skills","jobDescription","jobRequirements","data","setData","branchModal","setBranchModal","categoryModal","setCategoryModal","newCategory","categories","setCategories","newBranch","branches","setBranches","toggleBranchModal","toggleCategoryModal","showCategoriesModal","setShowCategoriesModal","showBranchesModal","setShowBranchesModal","id","useParams","history","useHistory","useEffect","_Get","Hrm_ViewOne","response","Job","console","log","fetchData","handleSubmit","e","preventDefault","_Put","Hrm_Update","push","handleInputChange","target","name","value","fetchJobCategories","_GetList","HRM_JOB_VIEW_CATEGORY","res","JobCategory","success","error","getBranches","HRM_BRANCH_VIEW","JobBatch","color","type","onClick","goBack","onSubmit","md","for","readOnly","onChange","placeholder","style","cursor","boxShadow","border","backgroundColor","borderRadius","size","marginLeft","filter","trim","map","key","_id","category","className","disabled","marginRight","checked","JobViewform","sm"],"mappings":"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","file":"static/js/546.4aeaaf58.chunk.js","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card, CardBody, CardHeader, Form, FormGroup, Label, Input, Row, Col, Button, Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter\r\n} from 'reactstrap';\r\nimport {\r\n  HRM_BRANCH_CATEGORY,\r\n  HRM_BRANCH_VIEW,\r\n  HRM_BRANCH_DELETE\r\n} from '../../../../../../ApiEndPoint/Api';\r\nimport {\r\n  HRM_JOB_CATEGORY,\r\n  HRM_JOB_VIEW_CATEGORY,\r\n  HRM_JOB_DELETE_CATEGORY\r\n} from '../../../../../../ApiEndPoint/Api';\r\nimport { _Get, _Put,_GetList} from '../../../../../../ApiEndPoint/ApiCalling';\r\nimport { _PostSave } from '../../../../../../ApiEndPoint/ApiCalling';\r\nimport { IoIosAdd } from 'react-icons/io';\r\nimport { FiMinus } from \"react-icons/fi\";\r\nimport { _Delete } from '../../../../../../ApiEndPoint/ApiCalling';\r\nimport { Hrm_Update,Hrm_ViewOne } from '../../../../../../ApiEndPoint/Api';\r\nimport { useHistory,useParams } from 'react-router-dom';\r\n\r\nconst JoForm = () => {\r\n  // const history = useHistory();\r\n  const [data, setData] = useState({\r\n\r\n    jobTitle: '',\r\n    branch: '',\r\n    jobCategory: '',\r\n    numberOfPositions: '',\r\n    status: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    skills: '',\r\n    jobDescription: '',\r\n    jobRequirements: '',\r\n  });\r\n\r\n\r\n\r\n\r\n  const [branchModal, setBranchModal] = useState(false);\r\n  const [categoryModal, setCategoryModal] = useState(false);\r\n  const [newCategory, setNewCategory] = useState('');\r\n  const [categories, setCategories] = useState([]);\r\n  const [newBranch, setNewBranch] = useState('');\r\n  const [branches, setBranches] = useState([]);\r\n\r\n  const toggleBranchModal = () => setBranchModal(!branchModal);\r\n  const toggleCategoryModal = () => setCategoryModal(!categoryModal);\r\n\r\n  const [showCategoriesModal, setShowCategoriesModal] = useState(false);\r\n  const toggleCategoriesModal = () => setShowCategoriesModal(!showCategoriesModal);\r\n\r\n  const [showBranchesModal, setShowBranchesModal] = useState(false);\r\n  const toggleBranchesModal = () => setShowBranchesModal(!showBranchesModal);\r\n\r\n\r\n  const { id } = useParams();\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await _Get(Hrm_ViewOne, id);\r\n                setData(response.Job);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [id]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            await _Put(Hrm_Update, id, data);\r\n            history.push('/app/ajgroup/HRM/JobList')\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n\r\n  const handleBack=()=>{\r\n    history.goBack();\r\n  }\r\n\r\n\r\n\r\n\r\n  // const resetForm = () => {\r\n  //   setData({\r\n  //     jobTitle: '',\r\n  //     branch: '',\r\n  //     jobCategory: '',\r\n  //     numberOfPositions: '',\r\n  //     status: '',\r\n  //     startDate: '',\r\n  //     endDate: '',\r\n  //     skills: '',\r\n  //     jobDescription: '',\r\n  //     jobRequirements: '',\r\n  //   });\r\n  // };\r\n\r\n  const handleRemoveCategory = async (categoryId) => {\r\n    try {\r\n      console.log('Deleting category:', categoryId);\r\n      await _Delete(HRM_JOB_DELETE_CATEGORY, categoryId);\r\n\r\n      // if (response.ok) {\r\n      const updatedCategories = categories?.filter((category) => category?._id !== categoryId);\r\n      setCategories(updatedCategories);\r\n      // }\r\n    } catch (error) {\r\n      console.error('Error deleting category:', error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n  const handleRemoveBranch = async (branchId) => {\r\n    try {\r\n      await _Delete(HRM_BRANCH_DELETE, branchId);\r\n\r\n      const updatedBranches = branches?.filter((branch) => branch?._id !== branchId);\r\n      setBranches(updatedBranches);\r\n\r\n    } catch (error) {\r\n      console.error('Error deleting category:', error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData({ ...data, [name]: value });\r\n  };\r\n\r\n\r\n\r\n  const handleCreateCategory = async (e) => {\r\n    e.preventDefault();\r\n    console.log(newCategory)\r\n    if (newCategory.trim() === '') {\r\n      console.error('New category cannot be empty');\r\n      return;\r\n    }\r\n    try {\r\n      const res = await _PostSave(HRM_JOB_CATEGORY, { name: newCategory });\r\n      console.log(res);\r\n      toggleCategoryModal()\r\n      fetchJobCategories()\r\n      if (res && res.success) {\r\n        setNewCategory('');\r\n\r\n      }\r\n    }\r\n    catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n\r\n  const fetchJobCategories = async () => {\r\n    try {\r\n      const res = await _GetList(HRM_JOB_VIEW_CATEGORY, newCategory);\r\n      setCategories(res?.JobCategory);\r\n      console.log(res)\r\n\r\n      if (res && res.success) {\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n\r\n    fetchJobCategories();\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  const handleCreateBranch = async (e) => {\r\n    e.preventDefault();\r\n    console.log(newBranch)\r\n    if (newBranch.trim() === '') {\r\n      console.error('New branch cannot be empty');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const res = await _PostSave(HRM_BRANCH_CATEGORY, { name: newBranch });\r\n      console.log(res);\r\n      toggleBranchModal()\r\n      getBranches();\r\n\r\n      if (res && res.success) {\r\n        \r\n        setNewBranch('');\r\n\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n\r\n  const getBranches = async () => {\r\n    try {\r\n      const res = await _GetList(HRM_BRANCH_VIEW, newBranch);\r\n      // debugger\r\n      if (res && res?.status) {\r\n        setBranches(res?.JobBatch);\r\n        // console.log(res.JobBatch)\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBranches();\r\n  }, []);\r\n\r\n\r\n  \r\n\r\n\r\n  return (\r\n\r\n    <Card >\r\n     <CardHeader>\r\n                <h2>Job View Form</h2>\r\n\r\n                <Button color=\" btn btn-danger\" type=\"button\" onClick={handleBack}>\r\n                    Back\r\n                </Button>\r\n\r\n            </CardHeader>\r\n      <CardBody>\r\n\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"jobTitle\">Job Title</Label>\r\n                <Input\r\n                 readOnly\r\n                  type=\"text\"\r\n                  name=\"jobTitle\"\r\n                  id=\"jobTitle\"\r\n                  value={data.jobTitle}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter job title\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"branch\">Branch</Label>    <span onClick={toggleBranchModal} style={{ cursor: 'pointer', boxShadow: '0 6px 8px rgba(0, 0, 0, 0.1)', border: '1px solid #ccc', backgroundColor: 'lightblue', borderRadius: '15px', }} size=\"sm\">\r\n                  <IoIosAdd size={17} color=\"blue\" />\r\n                </span>\r\n                <span onClick={toggleBranchesModal} style={{ cursor: 'pointer', boxShadow: '0 6px 8px rgba(0, 0, 0, 0.1)', border: '1px solid #ccc', backgroundColor: 'lightblue', marginLeft: '3%', borderRadius: '15px', }} size=\"sm\">\r\n                  <FiMinus size={16} color=\"blue\" />\r\n                </span>\r\n                <Input\r\n                 readOnly\r\n                  type=\"text\"\r\n                  name=\"branch\"\r\n                  id=\"branch\"\r\n                  value={data.branch}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Select Branch\"\r\n                >\r\n                  <option value=\"\">Select Branch</option>\r\n                  {/* {branches && branches.map((branch) => (\r\n                    <option key={branch?._id} value={branch?._id}>\r\n                      {branch?.name}\r\n                    </option>\r\n                  ))} */}\r\n                  {branches &&\r\n                    branches\r\n                      .filter((branch) => branch?.name.trim() !== '')\r\n                      .map((branch) => (\r\n                        <option key={branch?._id} value={branch?._id}>\r\n                          {branch?.name}\r\n                        </option>\r\n                      ))}\r\n                </Input>\r\n              </FormGroup>\r\n\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"jobCategory\">Job Category</Label>  < span onClick={toggleCategoryModal} style={{ cursor: 'pointer', boxShadow: '0 6px 8px rgba(0, 0, 0, 0.1)', border: '1px solid #ccc', backgroundColor: 'lightblue', borderRadius: '15px', }} size=\"sm\">\r\n                  <IoIosAdd size={17} color=\"blue\" />\r\n                </span>\r\n                < span onClick={toggleCategoriesModal} style={{ cursor: 'pointer', boxShadow: '0 6px 8px rgba(0, 0, 0, 0.1)', border: '1px solid #ccc', backgroundColor: 'lightblue', marginLeft: '3%', borderRadius: '15px', }} size=\"sm\">\r\n                  <FiMinus size={16} color=\"blue\" />\r\n                </span>\r\n\r\n                <Input\r\n                 readOnly\r\n                  type=\"text\"\r\n                  name=\"jobCategory\"\r\n                  id=\"jobCategory\"\r\n                  value={data.jobCategory}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Select job category\"\r\n\r\n                >\r\n                  <option value=\"\">Select Job Category</option>\r\n                \r\n\r\n                  {categories &&\r\n                    categories\r\n                      .filter((category) => category?.name.trim() !== '')\r\n                      .map((category) => (\r\n                        <option key={category?._id} value={category?._id}>\r\n                          {category?.name}\r\n                        </option>\r\n                      ))}\r\n                  \r\n                </Input>\r\n\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"numberOfPositions\">Number of Positions</Label>\r\n                <Input\r\n                 readOnly\r\n                  type=\"Number\"\r\n                  name=\"numberOfPositions\"\r\n                  id=\"numberOfPositions\"\r\n                  value={data.numberOfPositions}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter number of positions\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"startDate\">Start Date</Label>\r\n                <Input\r\n                 readOnly\r\n                  type=\"date\"\r\n                  name=\"startDate\"\r\n                  id=\"startDate\"\r\n                  value={data.startDate}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Select start date\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"endDate\">End Date</Label>\r\n                <Input\r\n                 readOnly\r\n                  type=\"date\"\r\n                  name=\"endDate\"\r\n                  id=\"endDate\"\r\n                  value={data.endDate}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Select end date\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label>Status</Label>\r\n                <div className=\"form-label-group\">\r\n                  \r\n                  <input\r\n                   disabled\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Active\"\r\n                    checked={data.status === \"Active\"}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <span style={{ marginRight: \"20px\" }}>Active</span>\r\n\r\n                  <input\r\n                   disabled\r\n                    style={{ marginRight: \"3px\" }}\r\n                    type=\"radio\"\r\n                    name=\"status\"\r\n                    value=\"Deactive\"\r\n                    checked={data.status === \"Deactive\"}\r\n                    onChange={handleInputChange}\r\n                  />\r\n                  <span style={{ marginRight: \"3px\" }}>Deactive</span>\r\n                </div>\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"skill\">Skill</Label>\r\n                <Input\r\n                 readOnly\r\n                  type=\"\"\r\n                  name=\"skills\"\r\n                  id=\"skills\"\r\n                  value={data.skills}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter required skills\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"jobDescription\">Job Description</Label>\r\n                <Input\r\n                 readOnly\r\n                  type=\"textarea\"\r\n                  name=\"jobDescription\"\r\n                  id=\"jobDescription\"\r\n                  value={data.jobDescription}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter job description\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n            <Col md={6}>\r\n              <FormGroup>\r\n                <Label for=\"jobRequirement\">Job Requirement</Label>\r\n                <Input\r\n                 readOnly\r\n                  type=\"textarea\"\r\n                  name=\"jobRequirements\"\r\n                  id=\"jobRequirements\"\r\n                  value={data.jobRequirements}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter job requirements\"\r\n                />\r\n              </FormGroup>\r\n            </Col>\r\n          </Row>\r\n          \r\n        </Form>\r\n\r\n        <Form>\r\n\r\n          {/* <FormGroup>\r\n\r\n            <Modal isOpen={branchModal} toggle={toggleBranchModal} backdrop=\"static\">\r\n              <ModalHeader toggle={toggleBranchModal}>Create New Branch</ModalHeader>\r\n              <ModalBody>\r\n                <Label for=\"newBranch\">Create Branch : </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={newBranch}\r\n                  onChange={(e) => setNewBranch(e.target.value)}\r\n                  placeholder=\"Enter new branch\"\r\n                  style={{ width: '85%', margin: '10px' }}\r\n                />\r\n\r\n\r\n\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggleBranchModal} style={{ fontSize: '15px', padding: '10px 10px' }}>\r\n                  Cancel\r\n                </Button>\r\n\r\n                <Button color=\"success\" onClick={handleCreateBranch} style={{ fontSize: '15px', padding: '10px 10px' }}> Create </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Modal isOpen={categoryModal} toggle={toggleCategoryModal} backdrop=\"static\">\r\n              <ModalHeader toggle={toggleCategoryModal}>Create Job Category</ModalHeader>\r\n              <ModalBody>\r\n                <Label for=\"newcategory\"> Create Category : </Label>\r\n\r\n                <Input\r\n                  \r\n                  type=\"text\"\r\n                  value={newCategory}\r\n                  onChange={(e) => setNewCategory(e.target.value)}\r\n                  placeholder=\"Enter new category\"\r\n                  style={{ width: '85%', margin: '10px' }}\r\n                />\r\n\r\n              </ModalBody>\r\n\r\n              <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggleCategoryModal} style={{ fontSize: '15px', padding: '10px 10px' }}>\r\n                  Cancel\r\n                </Button>\r\n                <Button color=\"success\" onClick={handleCreateCategory} style={{ fontSize: '15px', padding: '10px 10px' }}> Create </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Modal isOpen={showCategoriesModal} toggle={toggleCategoriesModal} backdrop=\"static\">\r\n              <ModalHeader toggle={toggleCategoriesModal}>Manage Categories</ModalHeader>\r\n              <ModalBody>\r\n                <ul className=\"list-group\">\r\n                  {categories\r\n                    .filter(category => category.name)\r\n                    .map((category) => (\r\n                      <li key={category?._id} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                        {category?.name}\r\n                        \r\n                        <Button\r\n                          color=\"danger\"\r\n                          outline\r\n                          onClick={() => handleRemoveCategory(category?._id)}\r\n                        >\r\n                          Remove\r\n                        </Button>\r\n\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggleCategoriesModal}>\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Modal isOpen={showBranchesModal} toggle={toggleBranchesModal} backdrop=\"static\">\r\n              <ModalHeader toggle={toggleBranchesModal}>Manage Branches</ModalHeader>\r\n              <ModalBody>\r\n                <ul className=\"list-group\">\r\n                  {branches\r\n                    .filter(branch => branch.name)\r\n                    .map((branch) => (\r\n                      <li key={branch?._id} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                        {branch?.name}\r\n                        <Button\r\n                          color=\"danger\"\r\n                          outline\r\n                          // onClick={() => handleRemoveItem(branch?._id, 'branch')}\r\n                          onClick={() => handleRemoveBranch(branch?._id)}\r\n                        >\r\n                          Remove\r\n                        </Button>\r\n                      </li>\r\n                    ))}\r\n                </ul>\r\n              </ModalBody>\r\n              <ModalFooter>\r\n                <Button color=\"primary\" onClick={toggleBranchesModal}>\r\n                  Close\r\n                </Button>\r\n              </ModalFooter>\r\n            </Modal>\r\n          </FormGroup> */}\r\n        </Form>\r\n\r\n\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\n\r\n\r\n// export default JobForm;\r\n\r\n\r\n\r\n\r\n// const CustomQuestionsCard = ({ customFormData, handleCustomInputChange }) => {\r\n//   return (\r\n//     <Card>\r\n//       <CardBody>\r\n//         <h3>Custom Questions</h3>\r\n//         <Form>\r\n//           {/* Custom Questions */}\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.weakness}\r\n//                 onChange={() => handleCustomInputChange('weakness')}\r\n//               />\r\n//               What Do You Consider to Be Your Weaknesses? *\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.jobReason}\r\n//                 onChange={() => handleCustomInputChange('jobReason')}\r\n//               />\r\n//               Why Do You Want This Job?\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.companyReason}\r\n//                 onChange={() => handleCustomInputChange('companyReason')}\r\n//               />\r\n//               Why Do You Want to Work at This Company?\r\n//             </Label>\r\n//           </FormGroup>\r\n//         </Form>\r\n//       </CardBody>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n// const NeedToAskCard = ({ customFormData, handleCustomInputChange }) => {\r\n//   return (\r\n//     <Card>\r\n//       <CardBody>\r\n//         <h3>Need to Ask?</h3>\r\n//         <Form>\r\n//           {/* Need to Ask? Section */}\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.gender}\r\n//                 onChange={() => handleCustomInputChange('gender')}\r\n//               />\r\n//               Gender\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.dateOfBirth}\r\n//                 onChange={() => handleCustomInputChange('dateOfBirth')}\r\n//               />\r\n//               Date Of Birth\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.address}\r\n//                 onChange={() => handleCustomInputChange('address')}\r\n//               />\r\n//               Address\r\n//             </Label>\r\n//           </FormGroup>\r\n//         </Form>\r\n//       </CardBody>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n// const OptionsCard = ({ customFormData, handleCustomInputChange }) => {\r\n//   return (\r\n//     <Card>\r\n//       <CardBody>\r\n//         <h3>Options</h3>\r\n//         <Form>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.profileImage}\r\n//                 onChange={() => handleCustomInputChange('profileImage')}\r\n//               />\r\n//               Profile Image\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.resume}\r\n//                 onChange={() => handleCustomInputChange('resume')}\r\n//               />\r\n//               Resume\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.coverLetter}\r\n//                 onChange={() => handleCustomInputChange('coverLetter')}\r\n//               />\r\n//               Cover Letter\r\n//             </Label>\r\n//           </FormGroup>\r\n//           <FormGroup>\r\n//             <Label check>\r\n//               <Input\r\n//                 type=\"checkbox\"\r\n//                 checked={customFormData.termsAndConditions}\r\n//                 onChange={() => handleCustomInputChange('termsAndConditions')}\r\n//               />\r\n//               Terms And Conditions\r\n//             </Label>\r\n//           </FormGroup>\r\n//         </Form>\r\n//       </CardBody>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\n\r\n\r\n// export default MainComponent;\r\n\r\n// const CombinedCard = ({ customFormData, handleCustomInputChange }) => {\r\n//   return (\r\n//     <Card >\r\n//       <CardBody>\r\n//         <Form>\r\n//           <div className=\"row\">\r\n//             <div className=\"col-md-6\">\r\n//               <h3>Need to Ask?</h3>\r\n//               <div class=\"my-4\">\r\n//                 <FormGroup check>\r\n\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.gender}\r\n//                       onChange={() => handleCustomInputChange('gender')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.gender ? 'green' : 'transparent' }}></span>\r\n//                     Gender\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.dateOfBirth}\r\n//                       onChange={() => handleCustomInputChange('dateOfBirth')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.dateOfBirth ? 'green' : 'transparent' }}></span>\r\n//                     Date Of Birth\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.address}\r\n//                       onChange={() => handleCustomInputChange('address')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.address ? 'green' : 'transparent' }}></span>\r\n//                     Address\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//               </div>\r\n//             </div>\r\n\r\n\r\n\r\n//             <div className=\"col-md-6\">\r\n//               <h3> Need to show Options ?</h3>\r\n//               <div class=\"my-4\">\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.profileImage}\r\n//                       onChange={() => handleCustomInputChange('profileImage')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.profileImage ? 'green' : 'transparent' }}></span>\r\n//                     Profile Image\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.resume}\r\n//                       onChange={() => handleCustomInputChange('resume')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.resume ? 'green' : 'transparent' }}></span>\r\n//                     Resume\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.coverLetter}\r\n//                       onChange={() => handleCustomInputChange('coverLetter')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.coverLetter ? 'green' : 'transparent' }}></span>\r\n//                     Cover Letter\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.termsAndConditions}\r\n//                       onChange={() => handleCustomInputChange('termsAndConditions')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.termsAndConditions ? 'green' : 'transparent' }}></span>\r\n//                     Terms And Conditions\r\n//                   </Label>\r\n\r\n//                 </FormGroup>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n//           <div className=\"row\">\r\n//             <div className=\"col-md-12\">\r\n//               <h3>Custom Questions</h3>\r\n//               <div class=\"my-4\">\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.weakness}\r\n//                       onChange={() => handleCustomInputChange('weakness')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.weakness ? 'green' : 'transparent' }}></span>\r\n//                     What Do You Consider to Be Your Weaknesses? *\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.jobReason}\r\n//                       onChange={() => handleCustomInputChange('jobReason')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.jobReason ? 'green' : 'transparent' }}></span>\r\n//                     Why Do You Want This Job?\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//                 <FormGroup check>\r\n//                   <Label check>\r\n//                     <Input\r\n//                       type=\"checkbox\"\r\n//                       checked={customFormData.companyReason}\r\n//                       onChange={() => handleCustomInputChange('companyReason')}\r\n//                     />\r\n//                     <span className=\"checkmark\" style={{ backgroundColor: customFormData.companyReason ? 'green' : 'transparent' }}></span>\r\n//                     Why Do You Want to Work at This Company?\r\n//                   </Label>\r\n//                 </FormGroup>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n\r\n\r\n//         </Form>\r\n//       </CardBody>\r\n//     </Card>\r\n//   );\r\n// };\r\n\r\nconst JobViewform = () => {\r\n  // const [customFormData, setCustomFormData] = useState({\r\n  //   weakness: false,\r\n  //   jobReason: false,\r\n  //   companyReason: false,\r\n  //   gender: false,\r\n  //   dateOfBirth: false,\r\n  //   address: false,\r\n  //   profileImage: false,\r\n  //   resume: false,\r\n  //   coverLetter: false,\r\n  //   termsAndConditions: false,\r\n  // });\r\n\r\n  // const handleCustomInputChange = (field) => {\r\n  //   setCustomFormData({ ...customFormData, [field]: !customFormData[field] });\r\n  // };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col sm=\"12\" md=\"6\" className=\"mx-auto\">\r\n          <JoForm />\r\n        </Col>\r\n        {/* <Col >\r\n          <CombinedCard customFormData={customFormData} handleCustomInputChange={handleCustomInputChange} />\r\n        </Col> */}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobViewform;"],"sourceRoot":""}