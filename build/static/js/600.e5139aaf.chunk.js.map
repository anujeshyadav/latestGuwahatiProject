{"version":3,"sources":["views/apps/freshlist/policy/CreatePolicy.js"],"names":["importData","CreatePolicy","args","useState","CreatePolicyView","setCreatePolicyView","Countries","setCountry","States","setState","Cities","setCities","formData","setFormData","setdropdownValue","index","setindex","error","setError","name","JSON","parse","localStorage","getItem","UserName","userRole","Role","comment","time","Date","Comments","setComments","files","formValues","setFormValues","newComment","userName","toString","productName","model","variant","product","setProduct","color","part","setPart","modal","setModal","field","headerName","setAllPart","toggle","handleInputChange","useContext","UserContext","e","type","i","console","log","target","value","checked","test","length","useEffect","userData","PolicyViewData","then","res","jsonData","xmlJs","xml2json","data","compact","spaces","Policy","MyDropdown","CheckBox","input","map","ele","_text","catch","err","handleProductChange","newFormValues","handleopentoggle","className","onSubmit","preventDefault","formdata","FormData","MyDropDown","append","dropdown","values","PolicySaveDataapis","swal","drop","lg","md","key","label","required","onChange","option","_attributes","sm","placeholder","phoneinput","inputClass","country","onKeyDown","includes","countryCodeEditable","phone","style","library","options","Country","getAllCountries","getOptionLabel","getOptionValue","State","getStatesOfCountry","isoCode","City","getCitiesOfState","countryCode","multiple","selectedFiles","handleFileChange","onClick","splice","removeFileAttach","element","disabled","readOnly","fill","removeMoreProduct","partName","handlePartChange","removeMorePart","marginRight","size","Radiobutton","Ripple","handleComment","removeFormFields","alert","fullscreen","backdrop","isOpen","bordered","hover","responsive"],"mappings":"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","file":"static/js/600.e5139aaf.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport xmlJs from \"xml-js\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  Input,\r\n  Label,\r\n  Button,\r\n  CustomInput,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Table,\r\n  InputGroup,\r\n  Modal,\r\n  ModalFooter,\r\n  FormGroup,\r\n} from \"reactstrap\";\r\nimport AgGrid from \"ag-grid-react\";\r\nimport { history } from \"../../../../history\";\r\nimport YearPicker from \"react-year-picker\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/style.css\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport swal from \"sweetalert\";\r\nimport \"../../../../../src/layouts/assets/scss/pages/users.scss\";\r\n\r\nimport {\r\n  PolicySaveDataapis,\r\n  PolicyViewData,\r\n} from \"../../../../ApiEndPoint/ApiCalling\";\r\nimport { BiEnvelope } from \"react-icons/bi\";\r\nimport { FcPhoneAndroid } from \"react-icons/fc\";\r\nimport { BsWhatsapp } from \"react-icons/bs\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nimport UserContext from \"../../../../context/Context\";\r\nconst importData = [\r\n  \"Product Registration\",\r\n  \"SpareParts\",\r\n  \"Orders\",\r\n  \"PartsCatalogue\",\r\n  \"Scrutiny / Inspections\",\r\n  \"Invoices / Billing\",\r\n  \"Support\",\r\n  \"Servicing\",\r\n  \"Warehouse\",\r\n  \"Distributors\",\r\n  \"Dealers\",\r\n  \"Suppliers\",\r\n  \"Service Centers\",\r\n  \"Customer Data\",\r\n  \"Campaigns\",\r\n];\r\nconst columns = [\r\n  { headerName: \"Name\", field: \"name\" },\r\n  { headerName: \"Age\", field: \"age\" },\r\n  { headerName: \"Country\", field: \"country\" },\r\n];\r\n\r\nconst data = [\r\n  { name: \"John\", age: 30, country: \"USA\" },\r\n  { name: \"Mary\", age: 25, country: \"UK\" },\r\n  { name: \"Peter\", age: 40, country: \"Canada\" },\r\n];\r\nconst CreatePolicy = args => {\r\n  const [CreatePolicyView, setCreatePolicyView] = useState({});\r\n  const [Countries, setCountry] = useState({});\r\n  const [States, setState] = useState({});\r\n  const [Cities, setCities] = useState({});\r\n  const [formData, setFormData] = useState({});\r\n  const [dropdownValue, setdropdownValue] = useState({});\r\n  const [index, setindex] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n  const [selectedYear, setSelectedYear] = useState(null);\r\n\r\n  const [Comments, setComments] = useState([\r\n    {\r\n      name: JSON.parse(localStorage.getItem(\"userData\")).UserName,\r\n      userRole: JSON.parse(localStorage.getItem(\"userData\")).Role,\r\n      comment: \"\",\r\n      time: new Date(),\r\n    },\r\n  ]);\r\n  const [formValues, setFormValues] = useState([{ files: [] }]);\r\n\r\n  const newComment = {\r\n    userName: JSON.parse(localStorage.getItem(\"userData\")).UserName,\r\n    Role: JSON.parse(localStorage.getItem(\"userData\")).Role,\r\n    comment: \"\",\r\n    time: new Date().toString(),\r\n  };\r\n  const [product, setProduct] = useState([\r\n    { productName: \"\", model: \"\", variant: \"\" },\r\n  ]);\r\n  const [part, setPart] = useState([{ productName: \"\", color: \"\" }]);\r\n  const [modal, setModal] = useState(false);\r\n  const [columnDefs, setColumnDefs] = useState([\r\n    { field: \"name\" },\r\n    // Using dot notation to access nested property\r\n    { field: \"medals.gold\", headerName: \"Gold\" },\r\n    // Show default header name\r\n    { field: \"person.age\" },\r\n  ]);\r\n  const [allPart, setAllPart] = useState([]);\r\n  const toggle = () => setModal(!modal);\r\n  const createUserXmlView = useContext(UserContext);\r\n\r\n  const handleInputChange = (e, type, i) => {\r\n    console.log(e.target.value);\r\n    const { name, value, checked } = e.target;\r\n    setindex(i);\r\n    if (type == \"checkbox\") {\r\n      if (checked) {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      } else {\r\n        setFormData({\r\n          ...formData,\r\n          [name]: checked,\r\n        });\r\n      }\r\n    } else {\r\n      if (type == \"number\") {\r\n        if (/^\\d{0,10}$/.test(value)) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setError(\r\n            \"Please enter a valid number with a maximum length of 10 digits\"\r\n          );\r\n        }\r\n      } else {\r\n        if (value.length <= 10) {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          setError(\"\");\r\n        } else {\r\n          setFormData({\r\n            ...formData,\r\n            [name]: value,\r\n          });\r\n          // setError(\"Input length exceeds the maximum of 10 characters\");\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const handleyear = (date) => {\r\n    setSelectedYear(date);\r\n  };\r\n  useEffect(() => {\r\n    const userData = localStorage.getItem(\"userData\");\r\n    const { UserName, Role } = JSON.parse(userData);\r\n  }, [formData]);\r\n  useEffect(() => {\r\n    setAllPart(importData);\r\n    PolicyViewData()\r\n      .then((res) => {\r\n        const jsonData = xmlJs.xml2json(res.data, { compact: true, spaces: 2 });\r\n        console.log(JSON.parse(jsonData).Policy);\r\n        setCreatePolicyView(JSON.parse(jsonData));\r\n        let value = JSON.parse(jsonData)?.MyDropdown?.CheckBox?.input;\r\n        value?.map((ele) => {\r\n          formData[ele?.name._text] = false;\r\n        });\r\n\r\n        setdropdownValue(JSON.parse(jsonData));\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {}, [Comments]);\r\n\r\n  useEffect(() => {\r\n    console.log(formData);\r\n    console.log(CreatePolicyView);\r\n  }, [formData, CreatePolicyView]);\r\n\r\n  let handleComment = (i, e) => {\r\n    let newFormValues = [...Comments];\r\n    newFormValues[i][e.target.name] = e.target.value;\r\n    setComments(newFormValues);\r\n  };\r\n  const SubmitComment = () => {\r\n    alert(\"Comment Submit\");\r\n  };\r\n  let addFormFields = () => {\r\n    setComments([...Comments, newComment]);\r\n  };\r\n\r\n  let addFileInput = () => {\r\n    setFormValues([...formValues, { files: [] }]);\r\n  };\r\n\r\n  let removeFileAttach = (i) => {\r\n    let newFormValues = [...formValues];\r\n    newFormValues.splice(i, 1);\r\n    setFormValues(newFormValues);\r\n  };\r\n\r\n  let handleFileChange = (i, e) => {\r\n    const newFormValues = [...formValues];\r\n    const selectedFiles = e.target.files;\r\n    newFormValues[i].files = selectedFiles;\r\n    setFormValues(newFormValues);\r\n  };\r\n  let removeFormFields = (i) => {\r\n    let newFormValues = [...Comments];\r\n    newFormValues.splice(i, 1);\r\n    setComments(newFormValues);\r\n  };\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n    let formdata = new FormData();\r\n    let dropdown = CreatePolicyView?.Policy?.MyDropDown?.map((ele) => {\r\n      formdata.append(\r\n        `${ele?.dropdown?.name?._text}`,\r\n        formData[ele?.dropdown?.name?._text]\r\n      );\r\n    });\r\n    let inputs = CreatePolicyView?.Policy?.input?.map((ele) => {\r\n      formdata.append(`${ele?.name?._text}`, formData[ele?.name?._text]);\r\n    });\r\n\r\n    for (var value of formdata.values()) {\r\n      console.log(value);\r\n    }\r\n    // e.preventDefault();\r\n\r\n    PolicySaveDataapis(formdata)\r\n      .then((res) => {\r\n        swal(\"Policy Added Successfully\");\r\n        console.log(res);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  // product addmore\r\n  let handleProductChange = (i, e) => {\r\n    let newFormValues = [...product];\r\n    newFormValues[i][e.target.name] = e.target.value;\r\n    setProduct(newFormValues);\r\n  };\r\n\r\n  let addMoreProduct = () => {\r\n    setProduct([...product, { productName: \"\", model: \"\", variant: \"\" }]);\r\n  };\r\n\r\n  let removeMoreProduct = (i) => {\r\n    let newFormValues = [...product];\r\n    newFormValues.splice(i, 1);\r\n    setProduct(newFormValues);\r\n  };\r\n  //  let handleSubmit = event => {\r\n  //    event.preventDefault();\r\n  //    alert(JSON.stringify(product));\r\n  //  };\r\n  // part addmore\r\n  let handlePartChange = (i, e) => {\r\n    let newFormValues = [...part];\r\n    newFormValues[i][e.target.name] = e.target.value;\r\n    setPart(newFormValues);\r\n  };\r\n\r\n  let addMorePart = () => {\r\n    setPart([...part, { partName: \"\", color: \"\" }]);\r\n  };\r\n\r\n  let removeMorePart = (i) => {\r\n    let newFormValues = [...part];\r\n    newFormValues.splice(i, 1);\r\n    setPart(newFormValues);\r\n  };\r\n  const handleopentoggle = () => {\r\n    toggle();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Card>\r\n          <Row className=\"m-2\">\r\n            <Col className=\"\">\r\n              <div>\r\n                <h1 className=\"\">Create Policy </h1>\r\n              </div>\r\n              <div>\r\n                <span>Policy Id</span> <span>#</span>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n\r\n          <CardBody>\r\n            <Form className=\"m-1\" onSubmit={submitHandler}>\r\n              <Row className=\"mb-2\">\r\n                {CreatePolicyView?.Policy?.MyDropDown.map((drop, i) => {\r\n                  return (\r\n                    <Col lg=\"6\" md=\"6\" key={i}>\r\n                      <FormGroup>\r\n                        <Label>{drop?.dropdown?.label?._text}</Label>\r\n                        <CustomInput\r\n                          required\r\n                          type=\"select\"\r\n                          name={drop?.dropdown?.name?._text}\r\n                          value={\r\n                            formData[drop?.dropdown?.dropdown?.name?._text]\r\n                          }\r\n                          onChange={handleInputChange}\r\n                        >\r\n                          <option value=\"\">\r\n                            --Select {drop?.dropdown.name._text}---\r\n                          </option>\r\n                          {drop.dropdown.option.map((option, index) => {\r\n                            return (\r\n                              <option\r\n                                key={index}\r\n                                value={option?._attributes?.value}\r\n                              >\r\n                                {option?._attributes?.value}\r\n                              </option>\r\n                            );\r\n                          })}\r\n                        </CustomInput>\r\n                      </FormGroup>\r\n                    </Col>\r\n                  );\r\n                })}\r\n\r\n                {CreatePolicyView &&\r\n                  CreatePolicyView?.Policy?.input?.map((ele, i) => {\r\n                    if (ele.label._text == \"Policy Duration\") {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>Policy Duration</Label>\r\n                              <Row>\r\n                                <div className=\"mainDiv \">\r\n                                  <div className=\"child\">\r\n                                    <Input type=\"number\" placeholder=\"Number\" />\r\n                                  </div>\r\n\r\n                                  <div className=\"dropdownselect\">\r\n                                    <CustomInput\r\n                                      // required\r\n                                      type=\"select\"\r\n                                      // name={drop?.dropdown?.name?._text}\r\n                                      // value={\r\n                                      //   formData[\r\n                                      //     drop?.dropdown?.dropdown?.name?._text\r\n                                      //   ]\r\n                                      // }\r\n                                      // onChange={handleInputChange}\r\n                                    >\r\n                                      <option value=\"day\">Day</option>\r\n                                      <option value=\"month\">Month</option>\r\n                                      <option value=\"year\">Year</option>\r\n                                    </CustomInput>\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"mainDiv \">\r\n                                  <div className=\"child\">\r\n                                    <Input type=\"number\" placeholder=\"Number\" />\r\n                                  </div>\r\n\r\n                                  <div className=\"dropdownselect\">\r\n                                    <CustomInput\r\n                                      // required\r\n                                      type=\"select\"\r\n                                      // name={drop?.dropdown?.name?._text}\r\n                                      // value={\r\n                                      //   formData[\r\n                                      //     drop?.dropdown?.dropdown?.name?._text\r\n                                      //   ]\r\n                                      // }\r\n                                      // onChange={handleInputChange}\r\n                                    >\r\n                                      <option value=\"day\">Day</option>\r\n                                      <option value=\"month\">Month</option>\r\n                                      <option value=\"year\">Year</option>\r\n                                    </CustomInput>\r\n                                  </div>\r\n                                </div>\r\n                              </Row>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    }\r\n                    {\r\n                      /* if (!!ele?.YearPicker) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <YearPicker\r\n                                style={{ width: \"100%\" }}\r\n                                onChange={handleyear}\r\n                                selectedYear={selectedYear}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } */\r\n                    }\r\n                    if (!!ele?.phoneinput) {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <PhoneInput\r\n                                inputClass=\"myphoneinput\"\r\n                                country={\"us\"}\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                countryCodeEditable={false}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(phone) => {\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [ele?.name?._text]: phone,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    } else if (!!ele?.library) {\r\n                      if (ele?.label._text?.includes(\"ountry\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                inputClass=\"countryclass\"\r\n                                className=\"countryclassnw\"\r\n                                options={Country.getAllCountries()}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Countries}\r\n                                onChange={(country) => {\r\n                                  setCountry(country);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"Country\"]: country?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"tate\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={State?.getStatesOfCountry(\r\n                                  Countries?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={States}\r\n                                onChange={(State) => {\r\n                                  setState(State);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"State\"]: State?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else if (ele?.label._text?.includes(\"ity\")) {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup>\r\n                              <Label>{ele?.label?._text}</Label>\r\n                              <Select\r\n                                options={City?.getCitiesOfState(\r\n                                  States?.countryCode,\r\n                                  States?.isoCode\r\n                                )}\r\n                                getOptionLabel={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                getOptionValue={(options) => {\r\n                                  return options[\"name\"];\r\n                                }}\r\n                                value={Cities}\r\n                                onChange={(City) => {\r\n                                  setCities(City);\r\n                                  setFormData({\r\n                                    ...formData,\r\n                                    [\"City\"]: City?.name,\r\n                                  });\r\n                                }}\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      } else {\r\n                        return (\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup key={i}>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        );\r\n                      }\r\n                    } else {\r\n                      return (\r\n                        <>\r\n                          <Col key={i} lg=\"6\" md=\"6\" sm=\"12\">\r\n                            <FormGroup key={i}>\r\n                              <Label>{ele?.label?._text}</Label>\r\n\r\n                              <Input\r\n                                onKeyDown={(e) => {\r\n                                  if (\r\n                                    ele?.type?._attributes?.type == \"number\"\r\n                                  ) {\r\n                                    [\"e\", \"E\", \"+\", \"-\"].includes(e.key) &&\r\n                                      e.preventDefault();\r\n                                  }\r\n                                }}\r\n                                type={ele?.type?._attributes?.type}\r\n                                placeholder={ele?.placeholder?._text}\r\n                                name={ele?.name?._text}\r\n                                value={formData[ele?.name?._text]}\r\n                                onChange={(e) =>\r\n                                  handleInputChange(\r\n                                    e,\r\n                                    ele?.type?._attributes?.type,\r\n                                    i\r\n                                  )\r\n                                }\r\n                              />\r\n                              {index === i ? (\r\n                                <>\r\n                                  {error && (\r\n                                    <span style={{ color: \"red\" }}>\r\n                                      {error}\r\n                                    </span>\r\n                                  )}\r\n                                </>\r\n                              ) : (\r\n                                <></>\r\n                              )}\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </>\r\n                      );\r\n                    }\r\n                  })}\r\n              </Row>\r\n\r\n              {formValues.map((index, i) => (\r\n                <Row className=\"my-2\">\r\n                  <Col lg=\"6\" md=\"6\" sm=\"12\" key={i}>\r\n                    <Input\r\n                      type=\"file\"\r\n                      multiple\r\n                      onChange={(e) => handleFileChange(i, e)}\r\n                    />\r\n                  </Col>\r\n                  <Col className=\"d-flex mt-2\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                    <div>\r\n                      {i ? (\r\n                        <Button\r\n                          type=\"button\"\r\n                          className=\"btn btn-danger\"\r\n                          onClick={() => removeFileAttach(i)}\r\n                        >\r\n                          -\r\n                        </Button>\r\n                      ) : null}\r\n                    </div>\r\n                    <div>\r\n                      <Button\r\n                        className=\"ml-1\"\r\n                        color=\"primary\"\r\n                        type=\"button\"\r\n                        onClick={() => addFileInput()}\r\n                      >\r\n                        +\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              ))}\r\n              {product.map((element, index) => (\r\n                <Row className=\"\" key={index}>\r\n                  <Col className=\"\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <Label>Product#</Label>\r\n                    <InputGroup className=\"maininput\">\r\n                      <Input\r\n                        // value={Role}\r\n                        // onChange={e => handleInputChange(e)}\r\n                        className=\"form-control inputs\"\r\n                        disabled\r\n                        type=\"text\"\r\n                        name=\"productN\"\r\n                        readOnly\r\n                        placeholder=\"Product\"\r\n                        // value={element.productName || \"\"}\r\n                        // onChange={e => handleProductChange(index, e)}\r\n                      />\r\n                      <Button\r\n                        onClick={handleopentoggle}\r\n                        color=\"primary\"\r\n                        className=\"mybtn primary\"\r\n                      >\r\n                        <AiOutlineSearch\r\n                          onClick={(e) => e.preventDefault()}\r\n                          fill=\"white\"\r\n                        />\r\n                      </Button>\r\n                    </InputGroup>\r\n                  </Col>\r\n                  <Col className=\"\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <FormGroup>\r\n                      <Label>Product Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"productName\"\r\n                        readOnly\r\n                        placeholder=\"Product Name\"\r\n                        value={element.productName || \"\"}\r\n                        onChange={(e) => handleProductChange(index, e)}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col className=\"\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <FormGroup>\r\n                      <Label>Model</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"model\"\r\n                        readOnly\r\n                        placeholder=\"Model\"\r\n                        value={element.model || \"\"}\r\n                        onChange={(e) => handleProductChange(index, e)}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col className=\"\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <FormGroup>\r\n                      <Label>Variant</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"variant\"\r\n                        readOnly\r\n                        placeholder=\"Variant\"\r\n                        value={element.variant || \"\"}\r\n                        onChange={(e) => handleProductChange(index, e)}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col className=\"d-flex mt-2\" lg=\"2\" md=\"2\" sm=\"12\">\r\n                    <div>\r\n                      {index ? (\r\n                        <Button\r\n                          type=\"button\"\r\n                          className=\"button remove \"\r\n                          onClick={() => removeMoreProduct(index)}\r\n                        >\r\n                          Remove\r\n                        </Button>\r\n                      ) : null}\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Button\r\n                        className=\"ml-1 \"\r\n                        color=\"primary\"\r\n                        type=\"button\"\r\n                        onClick={() => addMoreProduct()}\r\n                      >\r\n                        +\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              ))}\r\n              {part.map((element, index) => (\r\n                <Row className=\"\" key={index}>\r\n                  <Col className=\"\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                    <FormGroup>\r\n                      <Label>Part#</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"partName\"\r\n                        readOnly\r\n                        placeholder=\"Part Name\"\r\n                        // value={element.partName || \"\"}\r\n                        // onChange={e => handlePartChange(index, e)}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col className=\"\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                    <FormGroup>\r\n                      <Label>Part Name</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"partName\"\r\n                        readOnly\r\n                        placeholder=\"Part Name\"\r\n                        value={element.partName || \"\"}\r\n                        onChange={(e) => handlePartChange(index, e)}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n                  <Col className=\"\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                    <FormGroup>\r\n                      <Label>Color</Label>\r\n                      <Input\r\n                        type=\"text\"\r\n                        name=\"model\"\r\n                        placeholder=\"Color\"\r\n                        readOnly\r\n                        value={element.color || \"\"}\r\n                        onChange={(e) => handleProductChange(index, e)}\r\n                      />\r\n                    </FormGroup>\r\n                  </Col>\r\n\r\n                  <Col className=\"d-flex mt-2\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                    <div>\r\n                      {index ? (\r\n                        <Button\r\n                          type=\"button\"\r\n                          className=\"button remove \"\r\n                          onClick={() => removeMorePart(index)}\r\n                        >\r\n                          Remove\r\n                        </Button>\r\n                      ) : null}\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Button\r\n                        className=\"ml-1 \"\r\n                        color=\"primary\"\r\n                        type=\"button\"\r\n                        onClick={() => addMorePart()}\r\n                      >\r\n                        +\r\n                      </Button>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              ))}\r\n\r\n              <hr />\r\n              <Row className=\"mt-2 \">\r\n                <div className=\"container my-2\">\r\n                  <Label className=\"py-1\">Notification</Label>\r\n                  <div>\r\n                    {CreatePolicyView &&\r\n                      CreatePolicyView?.Policy?.CheckBox?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <>\r\n                              <span key={i} className=\"mx-2\">\r\n                                <Input\r\n                                  style={{ marginRight: \"3px\" }}\r\n                                  type={ele?.type?._attributes?.type}\r\n                                  name={ele?.name?._text}\r\n                                  onChange={(e) =>\r\n                                    handleInputChange(e, \"checkbox\")\r\n                                  }\r\n                                />{\" \"}\r\n                                <span\r\n                                  className=\"mt-1 mx-1\"\r\n                                  style={{ marginRight: \"40px\" }}\r\n                                >\r\n                                  {ele?.label?._text == \"Whatsapp\" ? (\r\n                                    <BsWhatsapp\r\n                                      className=\"mx-1\"\r\n                                      color=\"#59CE72\"\r\n                                      size={25}\r\n                                    />\r\n                                  ) : (\r\n                                    <>\r\n                                      {ele.label?._text == \"SMS\" ? (\r\n                                        <>\r\n                                          <FcPhoneAndroid size={30} />\r\n                                        </>\r\n                                      ) : (\r\n                                        <>\r\n                                          <BiEnvelope className=\"\" size={30} />\r\n                                        </>\r\n                                      )}\r\n                                    </>\r\n                                  )}\r\n                                </span>\r\n                              </span>\r\n                            </>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </div>\r\n                <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2\">\r\n                  <Label className=\"\">\r\n                    <h4>Status</h4>\r\n                  </Label>\r\n                  <div className=\"form-label-group mx-1\">\r\n                    {CreatePolicyView &&\r\n                      CreatePolicyView?.Policy?.Radiobutton?.input?.map(\r\n                        (ele, i) => {\r\n                          return (\r\n                            <FormGroup key={i}>\r\n                              <Input\r\n                                key={i}\r\n                                style={{ marginRight: \"3px\" }}\r\n                                required\r\n                                type={ele?.type?._attributes?.type}\r\n                                name={ele?.name?._text}\r\n                                value={`${\r\n                                  ele?.label?._text == \"Active\"\r\n                                    ? \"Active\"\r\n                                    : \"Deactive\"\r\n                                }`}\r\n                                onChange={handleInputChange}\r\n                              />{\" \"}\r\n                              <span\r\n                                className=\"mx-1 mt-1\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                              >\r\n                                {ele?.label?._text}\r\n                              </span>\r\n                            </FormGroup>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Button.Ripple\r\n                  color=\"primary\"\r\n                  type=\"submit\"\r\n                  className=\"mr-1 mt-2 mx-2\"\r\n                >\r\n                  Submit\r\n                </Button.Ripple>\r\n              </Row>\r\n            </Form>\r\n\r\n            {Comments &&\r\n              Comments?.map((element, index) => (\r\n                <>\r\n                  <Row key={index} className=\"my-2\">\r\n                    <Col lg=\"6\" md=\"6\" sm=\"12\">\r\n                      <Label>Comment</Label>\r\n                      <Input\r\n                        type=\"textarea\"\r\n                        name=\"comment\"\r\n                        placeholder=\"Comment\"\r\n                        value={element.comment || \"\"}\r\n                        onChange={(e) => handleComment(index, e)}\r\n                      />\r\n                    </Col>\r\n\r\n                    <Col className=\"d-flex mt-2\" lg=\"3\" md=\"3\" sm=\"12\">\r\n                      <div>\r\n                        {index ? (\r\n                          <Button\r\n                            type=\"button\"\r\n                            className=\"btn btn-danger\"\r\n                            onClick={() => removeFormFields(index)}\r\n                          >\r\n                            -\r\n                          </Button>\r\n                        ) : null}\r\n                      </div>\r\n\r\n                      <div>\r\n                        <Button\r\n                          className=\"ml-1 \"\r\n                          color=\"primary\"\r\n                          type=\"button\"\r\n                          onClick={() => addFormFields()}\r\n                        >\r\n                          +\r\n                        </Button>\r\n                      </div>\r\n                    </Col>\r\n                  </Row>\r\n                </>\r\n              ))}\r\n            <Button\r\n              className=\"ml-1 \"\r\n              color=\"primary\"\r\n              onClick={(e) => {\r\n                SubmitComment(e);\r\n              }}\r\n            >\r\n              Submit Comment\r\n            </Button>\r\n          </CardBody>\r\n        </Card>\r\n        <Modal\r\n          fullscreen=\"xl\"\r\n          size=\"lg\"\r\n          backdrop={false}\r\n          isOpen={modal}\r\n          toggle={toggle}\r\n          // {...args}\r\n        >\r\n          <ModalHeader toggle={toggle}>Product Look Up</ModalHeader>\r\n          <ModalBody className=\"table-body shedulemodalbody\">\r\n            <div className=\"modalheaderaddrol p-1\">\r\n              <h3 className=\"table-item\">Product List</h3>\r\n              {/* <AgGrid columnDefs={columns} rowData={data} /> */}\r\n              <Table\r\n                className=\"scheduletble_heading\"\r\n                bordered\r\n                hover\r\n                responsive\r\n                size=\"sm\"\r\n              >\r\n                <thead className=\"tableRowStyle\">\r\n                  <tr className=\"tableRowStyle\">\r\n                    <th>S.No.</th>\r\n                    <th>ProductName</th>\r\n                    <th>Modal</th>\r\n                    <th>Variant</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr>\r\n                    <td>1</td>\r\n                    <td>abc</td>\r\n                    <td>ls123</td>\r\n                    <td>ch84</td>\r\n                  </tr>\r\n                </tbody>\r\n              </Table>\r\n            </div>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={toggle}>\r\n              Submit\r\n            </Button>\r\n            <Button color=\"secondary\" onClick={toggle}>\r\n              Cancel\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CreatePolicy;\r\n"],"sourceRoot":""}