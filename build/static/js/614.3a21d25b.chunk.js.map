{"version":3,"sources":["views/apps/freshlist/vendor/WithDraws.js"],"names":["WithDraws","state","rowData","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","src","data","product_img","alt","height","name","desc","value","status","size","color","onClick","history","push","selectedData","gridApi","getSelectedRows","runthisfunction","_id","updateRowData","remove","onGridReady","api","gridColumnApi","columnApi","setState","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","this","sm","col-sm-6","tag","length","right","placeholder","onChange","e","target","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/614.3a21d25b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    UncontrolledDropdown,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    DropdownToggle,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport axiosConfig from \"../../../../axiosConfig\";\r\nimport { ContextLayout } from \"../../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\n\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\n//import classnames from \"classnames\";\r\nimport { history } from \"../../../../history\";\r\nimport \"../../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../../assets/scss/pages/users.scss\";\r\nclass WithDraws extends React.Component {\r\n    state = {\r\n        rowData: [],\r\n        paginationPageSize: 20,\r\n        currenPageSize: \"\",\r\n        getPageSize: \"\",\r\n        defaultColDef: {\r\n            sortable: true,\r\n            editable: true,\r\n            resizable: true,\r\n            suppressMenu: true,\r\n        },\r\n        columnDefs: [\r\n            {\r\n                headerName: \"S.No\",\r\n                valueGetter: \"node.rowIndex + 1\",\r\n                field: \"node.rowIndex + 1\",\r\n                width: 150,\r\n                filter: true,\r\n            },\r\n            {\r\n                headerName: \"Amount\",\r\n                field: \"product_img\",\r\n                filter: true,\r\n                width: 150,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <img\r\n                                className=\"rounded-circle mr-50\"\r\n                                src={params.data.product_img}\r\n                                alt=\"user avatar\"\r\n                                height=\"40\"\r\n                                width=\"40\"\r\n                            />\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Name\",\r\n                field: \"name\",\r\n                //filter: true,\r\n                filter: \"agSetColumnFilter\",\r\n                width: 250,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <div className=\"ml-2\">\r\n                                <span>{params.data.name}</span>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Request Time\",\r\n                field: \"desc\",\r\n                filter: true,\r\n                width: 200,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"d-flex align-items-center cursor-pointer\">\r\n                            <span>{params.data.desc}</span>\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Status\",\r\n                field: \"status\",\r\n                filter: true,\r\n                width: 150,\r\n                cellRendererFramework: (params) => {\r\n                    return params.value === \"Active\" ? (\r\n                        <div className=\"badge badge-pill badge-success\">\r\n                            {params.data.status}\r\n                        </div>\r\n                    ) : params.value === \"Inactive\" ? (\r\n                        <div className=\"badge badge-pill badge-danger\">\r\n                            {params.data.status}\r\n                        </div>\r\n                    ) : null;\r\n                },\r\n            },\r\n            {\r\n                headerName: \"Actions\",\r\n                field: \"transactions\",\r\n                width: 150,\r\n                cellRendererFramework: (params) => {\r\n                    return (\r\n                        <div className=\"actions cursor-pointer\">\r\n                            <Eye\r\n                                className=\"mr-50\"\r\n                                size=\"25px\"\r\n                                color=\"green\"\r\n                                onClick={() =>\r\n                                    history.push(`/app/freshlist/vendor/viewWithDraws`)}\r\n                            />\r\n                            <Trash2\r\n                                size={20}\r\n                                onClick={() => {\r\n                                    let selectedData = this.gridApi.getSelectedRows();\r\n                                    this.runthisfunction(params.data._id);\r\n                                    this.gridApi.updateRowData({ remove: selectedData });\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        ],\r\n    };\r\n\r\n    // async componentDidMount() {\r\n    //     await axiosConfig.get(\"/getproductCategory\").then((response) => {\r\n    //         let rowData = response.data.data;\r\n    //         this.setState({ rowData });\r\n    //     });\r\n    // }\r\n\r\n    // async runthisfunction(id) {\r\n    //     console.log(id);\r\n    //     await axiosConfig.get(`/deleteproductcategory/${id}`).then((response) => {\r\n    //         console.log(response);\r\n    //     });\r\n    // }\r\n\r\n    onGridReady = (params) => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.setState({\r\n            currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n            getPageSize: this.gridApi.paginationGetPageSize(),\r\n            totalPages: this.gridApi.paginationGetTotalPages(),\r\n        });\r\n    };\r\n\r\n    updateSearchQuery = (val) => {\r\n        this.gridApi.setQuickFilter(val);\r\n    };\r\n\r\n    filterSize = (val) => {\r\n        if (this.gridApi) {\r\n            this.gridApi.paginationSetPageSize(Number(val));\r\n            this.setState({\r\n                currenPageSize: val,\r\n                getPageSize: val,\r\n            });\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { rowData, columnDefs, defaultColDef } = this.state;\r\n        return (\r\n            <Row className=\"app-user-list\">\r\n                <Col sm=\"12\"></Col>\r\n                <Col sm=\"12\">\r\n                    <Card>\r\n                        <Row className=\"m-2\">\r\n                            <Col>\r\n                                <h1 col-sm-6 className=\"float-left\">\r\n                                    WithDraws Request Table\r\n                                </h1>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                        <CardBody>\r\n                            {this.state.rowData === null ? null : (\r\n                                <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                                    <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                                        <div className=\"mb-1\">\r\n                                            <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                                                <DropdownToggle tag=\"div\">\r\n                                                    {this.gridApi\r\n                                                        ? this.state.currenPageSize\r\n                                                        : \"\" * this.state.getPageSize -\r\n                                                        (this.state.getPageSize - 1)}{\" \"}\r\n                                                    -{\" \"}\r\n                                                    {this.state.rowData.length -\r\n                                                        this.state.currenPageSize * this.state.getPageSize >\r\n                                                        0\r\n                                                        ? this.state.currenPageSize * this.state.getPageSize\r\n                                                        : this.state.rowData.length}{\" \"}\r\n                                                    of {this.state.rowData.length}\r\n                                                    <ChevronDown className=\"ml-50\" size={15} />\r\n                                                </DropdownToggle>\r\n                                                <DropdownMenu right>\r\n                                                    <DropdownItem\r\n                                                        tag=\"div\"\r\n                                                        onClick={() => this.filterSize(20)}\r\n                                                    >\r\n                                                        20\r\n                                                    </DropdownItem>\r\n                                                    <DropdownItem\r\n                                                        tag=\"div\"\r\n                                                        onClick={() => this.filterSize(50)}\r\n                                                    >\r\n                                                        50\r\n                                                    </DropdownItem>\r\n                                                    <DropdownItem\r\n                                                        tag=\"div\"\r\n                                                        onClick={() => this.filterSize(100)}\r\n                                                    >\r\n                                                        100\r\n                                                    </DropdownItem>\r\n                                                    <DropdownItem\r\n                                                        tag=\"div\"\r\n                                                        onClick={() => this.filterSize(134)}\r\n                                                    >\r\n                                                        134\r\n                                                    </DropdownItem>\r\n                                                </DropdownMenu>\r\n                                            </UncontrolledDropdown>\r\n                                        </div>\r\n                                        <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                                            <div className=\"table-input mr-1\">\r\n                                                <Input\r\n                                                    placeholder=\"search...\"\r\n                                                    onChange={(e) =>\r\n                                                        this.updateSearchQuery(e.target.value)\r\n                                                    }\r\n                                                    value={this.state.value}\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"export-btn\">\r\n                                                <Button.Ripple\r\n                                                    color=\"primary\"\r\n                                                    onClick={() => this.gridApi.exportDataAsCsv()}\r\n                                                >\r\n                                                    Export as CSV\r\n                                                </Button.Ripple>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <ContextLayout.Consumer>\r\n                                        {(context) => (\r\n                                            <AgGridReact\r\n                                                gridOptions={{}}\r\n                                                rowSelection=\"multiple\"\r\n                                                defaultColDef={defaultColDef}\r\n                                                columnDefs={columnDefs}\r\n                                                rowData={rowData}\r\n                                                onGridReady={this.onGridReady}\r\n                                                colResizeDefault={\"shift\"}\r\n                                                animateRows={true}\r\n                                                floatingFilter={false}\r\n                                                pagination={true}\r\n                                                paginationPageSize={this.state.paginationPageSize}\r\n                                                pivotPanelShow=\"always\"\r\n                                                enableRtl={context.state.direction === \"rtl\"}\r\n                                            />\r\n                                        )}\r\n                                    </ContextLayout.Consumer>\r\n                                </div>\r\n                            )}\r\n                        </CardBody>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WithDraws;"],"sourceRoot":""}